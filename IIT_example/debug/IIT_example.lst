
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/debug/IIT_example.elf:     file format elf32-littleriscv
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/debug/IIT_example.elf
architecture: riscv:rv32, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x20400000

Program Header:
    LOAD off    0x00001000 vaddr 0x20400000 paddr 0x20400000 align 2**12
         filesz 0x0000093c memsz 0x0000093c flags rwx
    LOAD off    0x00007000 vaddr 0x80000000 paddr 0x20405e40 align 2**12
         filesz 0x00000788 memsz 0x00000788 flags rw-
     TLS off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**2
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00000788 vaddr 0x80000788 paddr 0x80000788 align 2**12
         filesz 0x00000000 memsz 0x00000cf8 flags rw-
    LOAD off    0x00000114 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---
    LOAD off    0x00001980 vaddr 0x20400980 paddr 0x20400980 align 2**12
         filesz 0x000054c0 memsz 0x000054c0 flags r-x
    LOAD off    0x00000114 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags ---

Sections:
Idx Name              Size      VMA       LMA       File off  Algn  Flags
  0 .init             000002dc  20400000  20400000  00001000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .init_array       00000004  204002e0  204002e0  000012e0  2**3  CONTENTS, ALLOC, LOAD, DATA
  2 .ctors            00000024  204002e4  204002e4  000012e4  2**1  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata           00000634  20400308  20400308  00001308  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .text             000054c0  20400980  20400980  00001980  2**7  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .data             00000788  80000000  20405e40  00007000  2**3  CONTENTS, ALLOC, LOAD, DATA
  6 .bss              000000f0  80000788  80000788  00007788  2**3  ALLOC
  7 .stack            00000400  80000880  80000880  00007788  2**4  ALLOC
  8 .heap             00000800  80000c80  80000c80  00007788  2**3  ALLOC
  9 .debug_info       00016e57  00000000  00000000  00007788  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev     0000251c  00000000  00000000  0001e5df  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges    00000b80  00000000  00000000  00020b00  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges     000009c0  00000000  00000000  00021680  2**3  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line       00009733  00000000  00000000  00022040  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str        000041da  00000000  00000000  0002b773  2**0  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .comment          0000002a  00000000  00000000  0002f94d  2**0  CONTENTS, READONLY
 16 .riscv.attributes 0000002b  00000000  00000000  0002f977  2**0  CONTENTS, READONLY
 17 .debug_frame      00002f9c  00000000  00000000  0002f9a4  2**2  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
20400000 l    d  .init	00000000 .init
204002e0 l    d  .init_array	00000000 .init_array
204002e4 l    d  .ctors	00000000 .ctors
20400308 l    d  .rodata	00000000 .rodata
20400980 l    d  .text	00000000 .text
80000000 l    d  .data	00000000 .data
80000788 l    d  .bss	00000000 .bss
80000880 l    d  .stack	00000000 .stack
80000c80 l    d  .heap	00000000 .heap
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 scrub.o
204000c2 l     F .init	00000000 __metal_memory_scrub
20400130 l       .init	00000000 skip_scrub
00000000 l    df *ABS*	00000000 synchronize_harts.c
00000000 l    df *ABS*	00000000 crt0.o
20400240 l       .init	00000000 _skip_init
2040091c l       .rodata	00000000 argv
20400920 l       .rodata	00000000 envp
20400924 l       .rodata	00000000 name
00000000 l    df *ABS*	00000000 tty.c
00000000 l    df *ABS*	00000000 IIT_example.c
8000079c l     O .bss	00000004 frontPointer.2
80000760 l     O .data	00000004 currentChar.1
800007b8 l     O .bss	00000032 cmd.0
00000000 l    df *ABS*	00000000 findfp.c
204014c8 l     F .text	00000068 std
00000000 l    df *ABS*	00000000 riscv_clint0.c
20401e30 l     F .text	00000026 __metal_driver_sifive_clint0_control_base
20401e56 l     F .text	00000024 __metal_driver_sifive_clint0_num_interrupts
20401e7a l     F .text	0000003c __metal_driver_sifive_clint0_interrupt_parents
20401eb6 l     F .text	00000030 __metal_driver_sifive_clint0_interrupt_lines
20402016 l     F .text	00000032 _get_cpu_intc
00000000 l    df *ABS*	00000000 riscv_cpu.c
20402552 l     F .text	00000024 __metal_driver_cpu_hartid
20402576 l     F .text	0000002a __metal_driver_cpu_timebase
204025a0 l     F .text	0000002a __metal_driver_cpu_interrupt_controller
204025ca l     F .text	00000024 __metal_driver_cpu_buserror
00000000 l    df *ABS*	00000000 riscv_plic0.c
20403f68 l     F .text	0000002a __metal_driver_sifive_plic0_control_base
20403f92 l     F .text	00000028 __metal_driver_sifive_plic0_num_interrupts
20403fba l     F .text	00000028 __metal_driver_sifive_plic0_max_priority
20403fe2 l     F .text	00000028 __metal_driver_sifive_plic0_interrupt_parents
2040400a l     F .text	00000022 __metal_driver_sifive_plic0_interrupt_lines
2040402c l     F .text	0000001e __metal_driver_sifive_plic0_context_ids
00000000 l    df *ABS*	00000000 sifive_gpio0.c
20404826 l     F .text	00000026 __metal_driver_sifive_gpio0_base
2040484c l     F .text	0000002a __metal_driver_sifive_gpio0_interrupt_parent
20404876 l     F .text	000001b4 __metal_driver_sifive_gpio0_interrupt_lines
00000000 l    df *ABS*	00000000 sifive_uart0.c
204050d6 l     F .text	0000002a __metal_driver_sifive_uart0_control_base
20405100 l     F .text	0000002e __metal_driver_sifive_uart0_interrupt_parent
2040512e l     F .text	00000028 __metal_driver_sifive_uart0_interrupt_line
20405156 l     F .text	0000002e __metal_driver_sifive_uart0_clock
20405184 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux
204051ae l     F .text	00000028 __metal_driver_sifive_uart0_pinmux_output_selector
204051d6 l     F .text	0000002a __metal_driver_sifive_uart0_pinmux_source_selector
20405594 l     F .text	000000da pre_rate_change_callback_func
2040566e l     F .text	00000030 post_rate_change_callback_func
00000000 l    df *ABS*	00000000 impure.c
80000000 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 fixed-clock.c
20405900 l     F .text	0000002e __metal_driver_fixed_clock_rate
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strchr.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 cpu.c
00000000 l    df *ABS*	00000000 gpio.c
00000000 l    df *ABS*	00000000 interrupt.c
00000000 l    df *ABS*	00000000 uart.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 shutdown.c
00000000 l    df *ABS*	00000000 vector.o
20405880 l       .text	00000000 IRQ_0
20405884 l       .text	00000000 IRQ_1
20405888 l       .text	00000000 IRQ_2
2040588c l       .text	00000000 IRQ_3
20405890 l       .text	00000000 IRQ_4
20405894 l       .text	00000000 IRQ_5
20405898 l       .text	00000000 IRQ_6
2040589c l       .text	00000000 IRQ_7
204058a0 l       .text	00000000 IRQ_8
204058a4 l       .text	00000000 IRQ_9
204058a8 l       .text	00000000 IRQ_10
204058ac l       .text	00000000 IRQ_11
204058b0 l       .text	00000000 IRQ_12
204058b4 l       .text	00000000 IRQ_13
204058b8 l       .text	00000000 IRQ_14
204058bc l       .text	00000000 IRQ_15
204058c0 l       .text	00000000 IRQ_LC0
204058c4 l       .text	00000000 IRQ_LC1
204058c8 l       .text	00000000 IRQ_LC2
204058cc l       .text	00000000 IRQ_LC3
204058d0 l       .text	00000000 IRQ_LC4
204058d4 l       .text	00000000 IRQ_LC5
204058d8 l       .text	00000000 IRQ_LC6
204058dc l       .text	00000000 IRQ_LC7
204058e0 l       .text	00000000 IRQ_LC8
204058e4 l       .text	00000000 IRQ_LC9
204058e8 l       .text	00000000 IRQ_LC10
204058ec l       .text	00000000 IRQ_LC11
204058f0 l       .text	00000000 IRQ_LC12
204058f4 l       .text	00000000 IRQ_LC13
204058f8 l       .text	00000000 IRQ_LC14
204058fc l       .text	00000000 IRQ_LC15
00000000 l    df *ABS*	00000000 sys_close.c
00000000 l    df *ABS*	00000000 sys_fstat.c
00000000 l    df *ABS*	00000000 sys_isatty.c
00000000 l    df *ABS*	00000000 sys_lseek.c
00000000 l    df *ABS*	00000000 sys_read.c
00000000 l    df *ABS*	00000000 sys_sbrk.c
80000784 l     O .data	00000004 __brk
00000000 l    df *ABS*	00000000 sys_write.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fini.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 __atexit.c
800007ec l     O .bss	0000008c _global_atexit0
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 init.c
800007b0 l     O .bss	00000004 init_done.1
800007b4 l     O .bss	00000004 fini_done.0
00000000 l    df *ABS*	00000000 sys_exit.c
00000000 l    df *ABS*	00000000 inline.c
00000000 l    df *ABS*	00000000 
204002e4 l       .init_array	00000000 metal_constructors_end
204002e8 l       .init_array	00000000 __fini_array_end
204002e8 l       .init_array	00000000 metal_destructors_end
204002e8 l       .init_array	00000000 metal_destructors_start
204002e8 l       .init_array	00000000 __fini_array_start
204002e0 l       .init_array	00000000 __init_array_end
204002e0 l       .init_array	00000000 __preinit_array_end
204002e0 l       .init_array	00000000 __init_array_start
204002e0 l       .init_array	00000000 metal_constructors_start
204002e0 l       .init_array	00000000 __preinit_array_start
204008dc g     O .rodata	00000040 __metal_driver_vtable_sifive_uart0
20401ba2 g     F .text	00000026 metal_cpu_timer_get_interrupt_id
20401ae0 g     F .text	00000030 _isatty_r
20402e52  w    F .text	00000096 metal_lc4_interrupt_vector_handler
20401014 g     F .text	000000da _puts_r
20401b10 g     F .text	00000034 _lseek_r
204054f4 g     F .text	000000a0 __metal_driver_sifive_uart0_set_baud_rate
204021ee g     F .text	00000058 __metal_driver_riscv_clint0_set_vector_mode
2040534a g     F .text	0000004a __metal_driver_sifive_uart0_set_tx_watermark
20402dbc  w    F .text	00000096 metal_lc3_interrupt_vector_handler
20403664 g     F .text	00000058 __metal_valid_interrupt_id
20403ae0 g     F .text	0000001c __metal_driver_riscv_cpu_controller_get_vector_mode
80000f60 g       .data	00000000 __global_pointer$
204002e4 g     F .ctors	00000024 metal_tty_init
20401b7c g     F .text	00000026 metal_cpu_timer_interrupt_controller
20405770 g     F .text	00000054 _metal_clock_append_to_callbacks
20404086 g     F .text	00000046 __metal_plic0_complete_interrupt
204038a8 g     F .text	000001e0 __metal_driver_riscv_cpu_controller_interrupt_register
20401a0e g     F .text	00000036 __sseek
2040157e g     F .text	0000006a __sinit
20401154 g     F .text	000000c0 __swbuf_r
80000788 g       .data	00000000 __tls_base
2040153a g     F .text	00000044 __sfmoreglue
20401b46 g     F .text	00000002 __malloc_unlock
20401dd4 g     F .text	0000002e metal_uart_getc
20401bee g     F .text	0000002e metal_cpu_get
80000740 g     O .data	00000020 __metal_dt_serial_10013000
20404cb0 g     F .text	0000004a __metal_driver_sifive_gpio0_disable_io
20400670 g     O .rodata	00000064 __metal_driver_vtable_riscv_clint0
80000878 g       .bss	00000000 metal_segment_bss_target_end
20401ee6 g     F .text	0000009a __metal_clint0_mtime_get
20403edc g     F .text	0000002e __metal_driver_cpu_get_instruction_length
00000001 g       *ABS*	00000000 __metal_chicken_bit
2040540e g     F .text	00000030 __metal_driver_sifive_uart0_get_rx_watermark
20404a68 g     F .text	00000044 __metal_driver_sifive_gpio0_disable_input
20405b0e g     F .text	0000000a __errno
08000000 g       .rodata	00000000 metal_segment_itim_target_start
2040531a g     F .text	00000030 __metal_driver_sifive_uart0_txready
204052aa g     F .text	00000038 __metal_driver_sifive_uart0_rx_interrupt_enable
20400142 g     F .init	0000000e __metal_synchronize_harts
80000788 g       .data	00000000 metal_segment_bss_target_start
20401f80 g     F .text	00000096 __metal_driver_riscv_clint0_mtimecmp_set
20401aae g     F .text	00000032 _fstat_r
20404f00 g     F .text	00000188 __metal_driver_sifive_gpio0_clear_int
800007a8 g     O .bss	00000004 errno
00000400 g       *ABS*	00000000 __stack_size
204057c4 g     F .text	00000030 metal_clock_register_pre_rate_change_callback
20403140  w    F .text	00000096 metal_lc9_interrupt_vector_handler
204000ce  w    F .init	00000000 __metal_before_start
20405e04  w    F .text	00000014 metal_init_run
204007fc g     O .rodata	00000064 __metal_driver_vtable_riscv_plic0
204007b8 g     O .rodata	00000044 __metal_driver_vtable_cpu
20401e02 g     F .text	0000002e metal_uart_set_baud_rate
2040569e g     F .text	000000d2 __metal_driver_sifive_uart0_init
00000000 g       *ABS*	00000000 __metal_eccscrub_bit
20400e98 g     F .text	000000d4 memcpy
80000788 g     O .bss	00000004 cpu
20403b6c g     F .text	00000070 __metal_driver_cpu_mcycle_get
8000076c  w    O .data	00000004 __metal_gpio_table
80000c80 g       .heap	00000000 metal_segment_heap_target_start
20401530 g     F .text	0000000a _cleanup_r
80000778 g     O .data	00000008 __metal_dt_cpu_0
204030aa  w    F .text	00000096 metal_lc8_interrupt_vector_handler
2040478a g     F .text	00000074 __metal_driver_riscv_plic0_affinity_set_threshold
204010ee g     F .text	0000000c puts
20403398  w    F .text	00000096 metal_lc13_interrupt_vector_handler
2040275c g     F .text	00000018 __metal_default_exception_handler
20405990 g     F .text	00000026 _fstat
2040251e g     F .text	00000034 __metal_driver_riscv_clint0_set_interrupt
20403afc g     F .text	00000054 __metal_driver_riscv_cpu_controller_set_vector_mode
204025ee g     F .text	00000030 __metal_driver_cpu_get
20400754 g     O .rodata	00000064 __metal_driver_vtable_riscv_cpu_intc
20402650 g     F .text	00000018 __metal_interrupt_global_disable
204047fe g     F .text	00000028 __metal_driver_riscv_plic0_affinity_get_threshold
20403014  w    F .text	00000096 metal_lc7_interrupt_vector_handler
204031d6  w    F .text	00000096 metal_lc10_interrupt_vector_handler
20401960 g     F .text	00000030 _sbrk_r
204045aa g     F .text	00000050 __metal_driver_riscv_plic0_disable
20403778 g     F .text	0000004e __metal_exception_register
20405d14 g     F .text	00000078 metal_init
20401b48 g     F .text	00000034 _read_r
20403cfe g     F .text	00000016 __metal_driver_cpu_timer_controller_interrupt
20404b48 g     F .text	00000040 __metal_driver_sifive_gpio0_enable_output
80000000 g       .rodata	00000000 metal_segment_lim_target_end
2040284c g     F .text	00000068 __metal_default_sw_handler
204057f4 g     F .text	00000030 metal_clock_register_post_rate_change_callback
20405200 g     F .text	0000001e __metal_driver_sifive_uart0_interrupt_controller
204059b6 g     F .text	00000020 _isatty
20404c0e g     F .text	00000040 __metal_driver_sifive_gpio0_output_toggle
2040523c g     F .text	00000038 __metal_driver_sifive_uart0_tx_interrupt_enable
20400934 g     O .rodata	00000008 __metal_driver_vtable_fixed_clock
20400930 g     O .rodata	00000004 _global_impure_ptr
204028b4  w    F .text	00000092 metal_timer_interrupt_vector_handler
20405b76 g     F .text	0000005e __libc_init_array
20404b88 g     F .text	00000040 __metal_driver_sifive_gpio0_output_set
2040326c  w    F .text	00000096 metal_lc11_interrupt_vector_handler
20403a88 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_enable
20405a2a g     F .text	0000006a _sbrk
20404b02 g     F .text	00000046 __metal_driver_sifive_gpio0_disable_output
204002ba g     F .init	00000002 _init
204026b2 g     F .text	0000001a __metal_interrupt_timer_disable
20404cfa g     F .text	00000206 __metal_driver_sifive_gpio0_config_int
20403db4 g     F .text	00000062 __metal_driver_cpu_clear_sw_ipi
204008a0 g     O .rodata	0000003c __metal_driver_vtable_sifive_gpio0
20401d48 g     F .text	00000032 metal_tty_getc
20405274 g     F .text	00000036 __metal_driver_sifive_uart0_tx_interrupt_disable
20404c4e g     F .text	00000062 __metal_driver_sifive_gpio0_enable_io
20405b40 g     F .text	00000036 __libc_fini_array
20405d8c g     F .text	00000078 metal_fini
20405088 g     F .text	00000020 __metal_driver_gpio_interrupt_controller
20403d3e g     F .text	00000014 __metal_driver_cpu_get_sw_interrupt_id
20403f48 g     F .text	00000020 __metal_driver_cpu_get_buserror
80000000 g       .data	00000000 metal_segment_data_target_start
20402704 g     F .text	0000002c __metal_interrupt_local_enable
204024ea g     F .text	00000034 __metal_driver_riscv_clint0_clear_interrupt
20401d22 g     F .text	00000026 metal_tty_putc
20404284 g     F .text	00000018 __metal_plic0_default_handler
20405a94  w    F .text	00000070 write
00000000 g       *ABS*	00000000 __tbss_size
80000060 g     O .data	0000000c __metal_dt_clock_0
00000800 g       *ABS*	00000000 __heap_size
204045fa g     F .text	00000030 __metal_driver_riscv_plic0_set_threshold
20402946 g     F .text	00000016 __metal_default_beu_handler
20400610 g     O .rodata	00000020 __sf_fake_stderr
204026e8 g     F .text	0000001c __metal_interrupt_external_disable
2040521e g     F .text	0000001e __metal_driver_sifive_uart0_get_interrupt_id
20403b50 g     F .text	0000001c __metal_driver_riscv_cpu_controller_command_request
204037c6 g     F .text	000000e2 __metal_driver_riscv_cpu_controller_interrupt_init
20403e96 g     F .text	00000046 __metal_driver_cpu_exception_register
20402668 g     F .text	00000018 __metal_interrupt_software_enable
20402c90  w    F .text	00000096 metal_lc1_interrupt_vector_handler
204017e6 g     F .text	000000a2 _free_r
800007ac g     O .bss	00000004 _global_atexit
2040414c g     F .text	00000062 __metal_driver_riscv_plic0_set_priority
2040355a g     F .text	00000058 __metal_controller_interrupt_vector_mode
20405c4c g     F .text	000000c8 __call_exitprocs
80000c80 g       .stack	00000000 _sp
204002e0 g     O .init_array	00000004 _metal_tty_init_ptr
20400150 g     F .init	00000000 _start
204059d6 g     F .text	0000002a _lseek
20403e76 g     F .text	00000020 __metal_driver_cpu_controller_interrupt
20403f0a g     F .text	0000001e __metal_driver_cpu_get_exception_pc
204026cc g     F .text	0000001c __metal_interrupt_external_enable
20405bd4 g     F .text	00000078 __register_exitproc
2040543e g     F .text	00000040 __metal_driver_sifive_uart0_putc
20401126 g     F .text	0000002e strncmp
20404340 g     F .text	00000158 __metal_driver_riscv_plic0_init
2040455a g     F .text	00000050 __metal_driver_riscv_plic0_enable
20404ad6 g     F .text	0000002c __metal_driver_sifive_gpio0_output
20402f7e  w    F .text	00000096 metal_lc6_interrupt_vector_handler
2040261e g     F .text	0000001a __metal_myhart_id
204050a8 g     F .text	0000002e __metal_driver_gpio_get_interrupt_id
204027ba  w    F .text	00000092 metal_software_interrupt_vector_handler
20403ab4 g     F .text	0000002c __metal_driver_riscv_cpu_controller_interrupt_disable
20401a7e g     F .text	00000030 _close_r
204054d4 g     F .text	00000020 __metal_driver_sifive_uart0_get_baud_rate
204020d0 g     F .text	000000da __metal_driver_riscv_clint0_register
80000770 g     O .data	00000008 __metal_dt_clint_2000000
20401214 g     F .text	0000010a __swsetup_r
20401c88 g     F .text	0000003e metal_interrupt_register_handler
204015e8 g     F .text	0000009e __sfp
20401c36 g     F .text	0000002e metal_gpio_get_device
20401990 g     F .text	00000030 __sread
20404a2a g     F .text	0000003e __metal_driver_sifive_gpio0_enable_input
204002bc  w    F .init	00000000 secondary_main
2040278c  w    F .text	0000002e metal_interrupt_vector_handler
20401b44 g     F .text	00000002 __malloc_lock
204052e2 g     F .text	00000038 __metal_driver_sifive_uart0_rx_interrupt_disable
80000790 g     O .bss	00000004 tmr_intr
20401464 g     F .text	00000064 _fflush_r
20404112 g     F .text	0000003a __metal_plic0_get_threshold
20400630 g     O .rodata	00000020 __sf_fake_stdin
204036bc g     F .text	000000bc __metal_local_interrupt_enable
204023aa g     F .text	00000140 __metal_driver_riscv_clint0_command_request
20400f6c g     F .text	000000a8 memset
20402ee8  w    F .text	00000096 metal_lc5_interrupt_vector_handler
20400a22 g     F .text	00000476 main
80000788 g       .data	00000000 metal_segment_data_target_end
204053c4 g     F .text	0000004a __metal_driver_sifive_uart0_set_rx_watermark
20403d52 g     F .text	00000062 __metal_driver_cpu_set_sw_ipi
20403e16 g     F .text	00000060 __metal_driver_cpu_get_msip
20405824 g     F .text	0000000e metal_shutdown
08000000 g       .rodata	00000000 metal_segment_itim_target_end
20403f28 g     F .text	00000020 __metal_driver_cpu_set_exception_pc
2040404a g     F .text	0000003c __metal_plic0_claim_interrupt
20405394 g     F .text	00000030 __metal_driver_sifive_uart0_get_tx_watermark
20401a44 g     F .text	00000006 __sclose
20403302  w    F .text	00000096 metal_lc12_interrupt_vector_handler
2040008a g     F .init	00000000 metal_mem_scrub
20401888 g     F .text	000000d8 _malloc_r
204021d2 g     F .text	0000001c __metal_driver_riscv_clint0_get_vector_mode
20403bdc g     F .text	00000046 __metal_driver_cpu_timebase_get
204046ee g     F .text	0000009c __metal_driver_riscv_plic0_affinity_disable
20400000 g       .init	00000000 _enter
20401c1c g     F .text	0000001a metal_cpu_get_current_hartid
20405880 g       .text	00000000 __metal_vector_table
20400940 g       *ABS*	00000000 metal_segment_itim_source_start
80000768  w    O .data	00000004 __metal_cpu_table
80000070 g     O .data	000003d0 __metal_dt_cpu_0_interrupt_controller
204002ba g     F .init	00000002 _fini
80000000 g       .rodata	00000000 metal_segment_lim_target_start
204041ae g     F .text	00000034 __metal_driver_riscv_plic0_get_priority
20400980 g     F .text	00000066 display_banner
20402638 g     F .text	00000018 __metal_interrupt_global_enable
20405b04 g     F .text	0000000a atexit
20401a4a g     F .text	00000034 _write_r
20402698 g     F .text	0000001a __metal_interrupt_timer_enable
2040547e g     F .text	00000056 __metal_driver_sifive_uart0_getc
204022f8 g     F .text	000000b2 __metal_driver_riscv_clint0_disable
80000764 g     O .data	00000004 _impure_ptr
20403c88 g     F .text	00000076 __metal_driver_cpu_mtimecmp_set
2040131e g     F .text	00000146 __sflush_r
2040462a g     F .text	00000028 __metal_driver_riscv_plic0_get_threshold
8000078c g     O .bss	00000004 cpu_intr
2040592e g     F .text	0000001e __metal_driver_fixed_clock_get_rate_hz
20402246 g     F .text	000000b2 __metal_driver_riscv_clint0_enable
20405e40 g       *ABS*	00000000 metal_segment_data_source_start
20400134 g       .init	00000000 early_trap_vector
80001480 g       .heap	00000000 metal_segment_heap_target_end
204035b2 g     F .text	000000b2 __metal_controller_interrupt_vector
80000440 g     O .data	00000300 __metal_dt_interrupt_controller_c000000
204016f0 g     F .text	0000005a __swhatbuf_r
20404bc8 g     F .text	00000046 __metal_driver_sifive_gpio0_output_clear
2040295c g     F .text	00000066 __metal_default_timer_handler
20405a94 g     F .text	00000070 _write
2040429c g     F .text	000000a4 __metal_plic0_handler
20402d26  w    F .text	00000096 metal_lc2_interrupt_vector_handler
204034c4  w    F .text	00000096 metal_lc15_interrupt_vector_handler
20401bc8 g     F .text	00000026 metal_cpu_interrupt_controller
20401c64 g     F .text	00000024 metal_interrupt_init
204019c0 g     F .text	0000004e __swrite
20405b18 g     F .text	00000028 exit
20401686 g     F .text	0000006a _fwalk_reent
2040594c g     F .text	00000022 __metal_driver_fixed_clock_set_rate_hz
20400940 g       *ABS*	00000000 metal_segment_lim_source_start
20400650 g     O .rodata	00000020 __sf_fake_stdout
80000780 g     O .data	00000004 __metal_dt_gpio_10012000
20402774 g     F .text	00000018 __metal_default_interrupt_handler
20401cc6 g     F .text	0000002e metal_interrupt_enable
20401da6 g     F .text	0000002e metal_uart_putc
20405a00 g     F .text	0000002a _read
20405e18  w    F .text	00000014 metal_fini_run
20404aac g     F .text	0000002a __metal_driver_sifive_gpio0_input
20402a00 g     F .text	00000180 __metal_exception_handler
20402bfa  w    F .text	00000096 metal_lc0_interrupt_vector_handler
20405e2c g     F .text	00000014 _exit
204009e6 g     F .text	0000003c timer_isr
20403c22 g     F .text	00000066 __metal_driver_cpu_mtime_get
2040174a g     F .text	0000009c __smakebuf_r
204021aa g     F .text	00000028 __metal_driver_riscv_clint0_vector_register
20401114 g     F .text	00000012 strlen
800007a4 g     O .bss	00000004 __malloc_sbrk_start
80000798 g     O .bss	00000004 timer_isr_flag
2040342e  w    F .text	00000096 metal_lc14_interrupt_vector_handler
204010fa g     F .text	0000001a strchr
20402048 g     F .text	00000088 __metal_driver_riscv_clint0_init
800007a0 g     O .bss	00000004 __malloc_free_list
80000794 g     O .bss	00000004 tmr_id
20403d14 g     F .text	00000014 __metal_driver_cpu_get_timer_interrupt_id
204041e2 g     F .text	000000a2 __metal_plic0_enable
20400088  w      .init	00000000 __register_frame_info
20403d28 g     F .text	00000016 __metal_driver_cpu_sw_controller_interrupt
20402730 g     F .text	0000002c __metal_interrupt_local_disable
20402680 g     F .text	00000018 __metal_interrupt_software_disable
20401d7a g     F .text	0000002c metal_uart_init
204040cc g     F .text	00000046 __metal_plic0_set_threshold
20404652 g     F .text	0000009c __metal_driver_riscv_plic0_affinity_enable
2040596e g     F .text	00000022 _close
00000000 g       *ABS*	00000000 __metal_boot_hart
20404498 g     F .text	000000c2 __metal_driver_riscv_plic0_register
20401cf4 g     F .text	0000002e metal_interrupt_disable



Disassembly of section .init:

20400000 <_enter>:
_enter():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:24
     * it's not valid to obtain the address of any symbol without GP
     * configured.  The C environment might go ahead and do this again, but
     * that's safe as it's a fixed register. */
.option push
.option norelax
    la gp, __global_pointer$
20400000:	5fc01197          	auipc	gp,0x5fc01
20400004:	f6018193          	addi	gp,gp,-160 # 80000f60 <__global_pointer$>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:28
.option pop

    /* trap over the chicken bit register clearing, aloe & fe310 dont have it */
    la t0, 1f
20400008:	00000297          	auipc	t0,0x0
2040000c:	01828293          	addi	t0,t0,24 # 20400020 <_enter+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:29
    csrw mtvec, t0
20400010:	30529073          	csrw	mtvec,t0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:31
    /* chicken bit is enable if core are sifive series. */
    la t0, __metal_chicken_bit
20400014:	00100293          	li	t0,1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:32
    beqz t0, 1f
20400018:	00028463          	beqz	t0,20400020 <_enter+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:34
    /* If set, always clear the feature disable register for all cores series */
    csrwi 0x7C1, 0
2040001c:	7c105073          	csrwi	0x7c1,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:39
.align 4
1:
    /* Set up a simple trap vector to catch anything that goes wrong early in
     * the boot process. */
    la t0, early_trap_vector
20400020:	00000297          	auipc	t0,0x0
20400024:	11428293          	addi	t0,t0,276 # 20400134 <early_trap_vector>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:40
    csrw mtvec, t0
20400028:	30529073          	csrw	mtvec,t0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:48
     * C, so here we set up a C environment. First we set up a stack pointer,
     * which is left as a weak reference in order to allow initialization
     * routines that do not need a stack to be set up to transparently be
     * called. */
    .weak __metal_stack_pointer
    la sp, __metal_stack_pointer
2040002c:	00000113          	li	sp,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:55
   /* The METAL is designed for a bare-metal environment and therefore is expected
    * to define its own stack pointer. We also align the stack pointer here
    * because the only RISC-V ABI that's currently defined, mandates 16-byte
    * stack alignment. */

    bne sp, zero, 1f
20400030:	00011463          	bnez	sp,20400038 <_enter+0x38>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:56
    la sp, _sp
20400034:	d2018113          	addi	sp,gp,-736 # 80000c80 <_sp>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:59
1:
    /* Increment by hartid number of stack sizes */
    csrr a0, mhartid
20400038:	f1402573          	csrr	a0,mhartid
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:60
    li t0, 0
2040003c:	4281                	li	t0,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:61
    la t1, __stack_size
2040003e:	40000313          	li	t1,1024
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:63
1:
    andi sp, sp, -16
20400042:	ff017113          	andi	sp,sp,-16
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:64
    beq t0, a0, 1f
20400046:	00a28563          	beq	t0,a0,20400050 <_enter+0x50>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:65
    add sp, sp, t1
2040004a:	911a                	add	sp,sp,t1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:66
    addi t0, t0, 1
2040004c:	0285                	addi	t0,t0,1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:67
    j 1b
2040004e:	bfd5                	j	20400042 <_enter+0x42>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:76
     * just skip over the call entirely.   Note that __metal_initialize isn't
     * actually a full C function, as it doesn't end up with the .bss or .data
     * segments having been initialized.  This is done to avoid putting a
     * burden on systems that can be initialized without having a C environment
     * set up. */
    la ra, __metal_before_start
20400050:	00000097          	auipc	ra,0x0
20400054:	07e08093          	addi	ra,ra,126 # 204000ce <__metal_before_start>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:77
    beqz ra, 1f
20400058:	00008363          	beqz	ra,2040005e <_enter+0x5e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:78
    jalr ra
2040005c:	9082                	jalr	ra
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:84
1:

    /* At this point we can enter the C runtime's startup file.  The arguments
     * to this function are designed to match those provided to the SEE, just
     * so we don't have to write another ABI. */
    csrr a0, mhartid
2040005e:	f1402573          	csrr	a0,mhartid
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:85
    li a1, 0
20400062:	4581                	li	a1,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:86
    li a2, 0
20400064:	4601                	li	a2,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:87
    call _start
20400066:	20ed                	jal	20400150 <_start>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:92

    /* If we've made it back here then there's probably something wrong.  We
     * allow the METAL to register a handler here. */
    .weak __metal_after_main
    la ra, __metal_after_main
20400068:	00000093          	li	ra,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:93
    beqz ra, 1f
2040006c:	00008363          	beqz	ra,20400072 <_enter+0x72>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:94
    jalr ra
20400070:	9082                	jalr	ra
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:99
1:

    /* If that handler returns then there's not a whole lot we can do.  Just
     * try to make some noise. */
     la t0, 1f
20400072:	00000297          	auipc	t0,0x0
20400076:	00c28293          	addi	t0,t0,12 # 2040007e <_enter+0x7e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:100
     csrw mtvec, t0
2040007a:	30529073          	csrw	mtvec,t0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:102
1:
     lw t1, 0(x0)
2040007e:	00002303          	lw	t1,0(zero) # 0 <__metal_boot_hart>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:103
     j 1b
20400082:	bff5                	j	2040007e <_enter+0x7e>
20400084:	0000                	unimp
	...

20400088 <__register_frame_info>:
__register_frame_info():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/entry.S:117
.weak __register_frame_info
.global __register_frame_info
.section .text.metal.init.__register_frame_info
__register_frame_info:
    .cfi_startproc
    ret
20400088:	8082                	ret

2040008a <metal_mem_scrub>:
metal_mem_scrub():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:24
.type metal_mem_scrub, @function
metal_mem_scrub:

    /* Disable machine interrupts,
    restore previous mstatus value at exit */
    li      a3, 8
2040008a:	46a1                	li	a3,8
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:25
    csrrc   t1, mstatus, a3
2040008c:	3006b373          	csrrc	t1,mstatus,a3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:28

#if __riscv_xlen == 32
    addi    t0, x0, 4
20400090:	00400293          	li	t0,4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:30
1:
    blt     a1, t0, 2f
20400094:	0055c563          	blt	a1,t0,2040009e <metal_mem_scrub+0x14>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:31
    andi    a2, a0, 3
20400098:	00357613          	andi	a2,a0,3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:32
    beqz    a2, 3f
2040009c:	ca11                	beqz	a2,204000b0 <metal_mem_scrub+0x26>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:34
2:
    sb      x0, 0(a0)
2040009e:	00050023          	sb	zero,0(a0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:35
    addi    a0, a0, 1
204000a2:	0505                	addi	a0,a0,1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:36
    addi    a1, a1, -1
204000a4:	15fd                	addi	a1,a1,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:37
    bgtz    a1, 1b
204000a6:	feb047e3          	bgtz	a1,20400094 <metal_mem_scrub+0xa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:38
    csrw    mstatus, t1
204000aa:	30031073          	csrw	mstatus,t1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:39
    ret
204000ae:	8082                	ret
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:41
3:
    sw      x0, 0(a0)
204000b0:	00052023          	sw	zero,0(a0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:42
    addi    a0, a0, 4
204000b4:	0511                	addi	a0,a0,4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:43
    addi    a1, a1, -4
204000b6:	15f1                	addi	a1,a1,-4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:44
    bgtz    a1, 1b
204000b8:	fcb04ee3          	bgtz	a1,20400094 <metal_mem_scrub+0xa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:45
    csrw    mstatus, t1
204000bc:	30031073          	csrw	mstatus,t1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:46
    ret
204000c0:	8082                	ret

204000c2 <__metal_memory_scrub>:
__metal_memory_scrub():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:74
.type __metal_memory_scrub, @function
__metal_memory_scrub:
/* Zero out specified memory regions */
1:
#if __riscv_xlen == 32
    sw      x0, 0(t1)
204000c2:	00032023          	sw	zero,0(t1)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:75
    addi    t1, t1, 4
204000c6:	0311                	addi	t1,t1,4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:76
    blt     t1, t2, 1b
204000c8:	fe734de3          	blt	t1,t2,204000c2 <__metal_memory_scrub>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:82
#else
    sd      x0, 0(t1)
    addi    t1, t1, 8
    blt     t1, t2, 1b
#endif
    ret
204000cc:	8082                	ret

204000ce <__metal_before_start>:
__metal_before_start():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:94
.weak __metal_before_start
.global __metal_before_start
.type __metal_before_start, @function
__metal_before_start:
    /* Save caller ra */
    mv      s0, ra
204000ce:	8406                	mv	s0,ra
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:96

    la      t0, __metal_eccscrub_bit
204000d0:	dfc00297          	auipc	t0,0xdfc00
204000d4:	f3028293          	addi	t0,t0,-208 # 0 <__metal_boot_hart>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:97
    beqz    t0, skip_scrub
204000d8:	04028c63          	beqz	t0,20400130 <skip_scrub>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:99

    la      t0, __metal_boot_hart
204000dc:	dfc00297          	auipc	t0,0xdfc00
204000e0:	f2428293          	addi	t0,t0,-220 # 0 <__metal_boot_hart>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:100
    csrr    a5, mhartid
204000e4:	f14027f3          	csrr	a5,mhartid
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:103

    /* Disable machine interrupts to be safe */
    li      a3, 8
204000e8:	46a1                	li	a3,8
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:104
    csrc    mstatus, a3
204000ea:	3006b073          	csrc	mstatus,a3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:107

    /* Zero out per hart stack */
    mv      t1, sp
204000ee:	830a                	mv	t1,sp
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:108
    la      t2, __stack_size
204000f0:	dfc00397          	auipc	t2,0xdfc00
204000f4:	31038393          	addi	t2,t2,784 # 400 <__stack_size>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:109
    add     t2, t2, sp
204000f8:	938a                	add	t2,t2,sp
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:110
    beq     t1, t2, 1f
204000fa:	00730363          	beq	t1,t2,20400100 <__metal_before_start+0x32>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:111
    jal     __metal_memory_scrub
204000fe:	37d1                	jal	204000c2 <__metal_memory_scrub>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:113
1:
    bne     a5, t0, skip_scrub
20400100:	02579863          	bne	a5,t0,20400130 <skip_scrub>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:116

    /* Zero out data segment */
    la      t1, metal_segment_data_target_start
20400104:	5fc00317          	auipc	t1,0x5fc00
20400108:	efc30313          	addi	t1,t1,-260 # 80000000 <impure_data>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:117
    la      t2, metal_segment_data_target_end
2040010c:	5fc00397          	auipc	t2,0x5fc00
20400110:	67c38393          	addi	t2,t2,1660 # 80000788 <cpu>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:118
    beq     t1, t2, 1f
20400114:	00730363          	beq	t1,t2,2040011a <__metal_before_start+0x4c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:119
    jal     __metal_memory_scrub
20400118:	376d                	jal	204000c2 <__metal_memory_scrub>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:122
1:
    /* Zero out itim memory */
    la      t1, metal_segment_itim_target_start
2040011a:	e7c00317          	auipc	t1,0xe7c00
2040011e:	ee630313          	addi	t1,t1,-282 # 8000000 <metal_segment_itim_target_end>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:123
    la      t2, metal_segment_itim_target_end
20400122:	e7c00397          	auipc	t2,0xe7c00
20400126:	ede38393          	addi	t2,t2,-290 # 8000000 <metal_segment_itim_target_end>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:124
    beq     t1, t2, skip_scrub
2040012a:	00730363          	beq	t1,t2,20400130 <skip_scrub>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:125
    jal     __metal_memory_scrub
2040012e:	3f51                	jal	204000c2 <__metal_memory_scrub>

20400130 <skip_scrub>:
skip_scrub():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:129

skip_scrub:
    /* Restore caller ra */
    mv      ra, s0
20400130:	80a2                	mv	ra,s0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/scrub.S:130
    ret
20400132:	8082                	ret

20400134 <early_trap_vector>:
early_trap_vector():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/trap.S:64
.section .text.metal.init.trapvec
.global early_trap_vector
.align 2
early_trap_vector:
    .cfi_startproc
    csrr t0, mcause
20400134:	342022f3          	csrr	t0,mcause
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/trap.S:65
    csrr t1, mepc
20400138:	34102373          	csrr	t1,mepc
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/trap.S:66
    csrr t2, mtval
2040013c:	343023f3          	csrr	t2,mtval
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/trap.S:67
    j early_trap_vector
20400140:	bfd5                	j	20400134 <early_trap_vector>

20400142 <__metal_synchronize_harts>:
__metal_synchronize_harts():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:19
/*
 * _synchronize_harts() is called by crt0.S to cause harts > 0 to wait for
 * hart 0 to finish copying the datat section, zeroing the BSS, and running
 * the libc contstructors.
 */
__attribute__((section(".init"))) void __metal_synchronize_harts() {
20400142:	1141                	addi	sp,sp,-16
20400144:	c622                	sw	s0,12(sp)
20400146:	0800                	addi	s0,sp,16
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/synchronize_harts.c:66
        while (METAL_MSIP(msip_base, hart) == 1)
            ;
    }

#endif /* __METAL_DT_MAX_HARTS > 1 */
}
20400148:	0001                	nop
2040014a:	4432                	lw	s0,12(sp)
2040014c:	0141                	addi	sp,sp,16
2040014e:	8082                	ret

20400150 <_start>:
_start():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:36
.cfi_startproc
.cfi_undefined ra

  /* This is a bit funky: it's not usually sane for _start to return, but in
   * this case we actually want to in order to signal an error to the METAL. */
  mv s0, ra
20400150:	8406                	mv	s0,ra
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:44
   * safely perform any access that may be relaxed without GP being set.  This
   * is done with relaxation disabled to avoid relaxing the address calculation
   * to just "addi gp, gp, 0". */
.option push
.option norelax
  la gp, __global_pointer$
20400152:	5fc01197          	auipc	gp,0x5fc01
20400156:	e0e18193          	addi	gp,gp,-498 # 80000f60 <__global_pointer$>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:50
.option pop

  /* Stack pointer is expected to be initialized before _start */

  /* If we're not hart 0, skip the initialization work */
  la t0, __metal_boot_hart
2040015a:	00000293          	li	t0,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:51
  bne a0, t0, _skip_init
2040015e:	0e551163          	bne	a0,t0,20400240 <_skip_init>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:60
   * boot and then need to get relocated into a non-persistant writable memory
   * before C code can execute.  If this is the case we do so here.  This step
   * is optional: if the METAL provides an environment in which this relocation
   * is not necessary then it must simply set metal_segment_data_source_start to
   * be equal to metal_segment_data_target_start. */
  la t0, metal_segment_data_source_start
20400162:	00006297          	auipc	t0,0x6
20400166:	cde28293          	addi	t0,t0,-802 # 20405e40 <metal_segment_data_source_start>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:61
  la t1, metal_segment_data_target_start
2040016a:	5fc00317          	auipc	t1,0x5fc00
2040016e:	e9630313          	addi	t1,t1,-362 # 80000000 <impure_data>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:62
  la t2, metal_segment_data_target_end
20400172:	5fc00397          	auipc	t2,0x5fc00
20400176:	61638393          	addi	t2,t2,1558 # 80000788 <cpu>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:64

  beq t0, t1, 2f
2040017a:	00628c63          	beq	t0,t1,20400192 <_start+0x42>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:65
  bge t1, t2, 2f
2040017e:	00735a63          	bge	t1,t2,20400192 <_start+0x42>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:69

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
20400182:	0002a503          	lw	a0,0(t0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:70
  addi t0, t0, 4
20400186:	0291                	addi	t0,t0,4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:71
  sw   a0, 0(t1)
20400188:	00a32023          	sw	a0,0(t1)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:72
  addi t1, t1, 4
2040018c:	0311                	addi	t1,t1,4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:73
  blt  t1, t2, 1b
2040018e:	fe734ae3          	blt	t1,t2,20400182 <_start+0x32>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:84
  blt  t1, t2, 1b
#endif
2:

  /* Copy the ITIM section */
  la t0, metal_segment_itim_source_start
20400192:	00000297          	auipc	t0,0x0
20400196:	7ae28293          	addi	t0,t0,1966 # 20400940 <metal_segment_itim_source_start>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:85
  la t1, metal_segment_itim_target_start
2040019a:	e7c00317          	auipc	t1,0xe7c00
2040019e:	e6630313          	addi	t1,t1,-410 # 8000000 <metal_segment_itim_target_end>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:86
  la t2, metal_segment_itim_target_end
204001a2:	e7c00397          	auipc	t2,0xe7c00
204001a6:	e5e38393          	addi	t2,t2,-418 # 8000000 <metal_segment_itim_target_end>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:88

  beq t0, t1, 2f
204001aa:	00628c63          	beq	t0,t1,204001c2 <_start+0x72>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:89
  bge t1, t2, 2f
204001ae:	00735a63          	bge	t1,t2,204001c2 <_start+0x72>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:93

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204001b2:	0002a503          	lw	a0,0(t0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:94
  addi t0, t0, 4
204001b6:	0291                	addi	t0,t0,4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:95
  sw   a0, 0(t1)
204001b8:	00a32023          	sw	a0,0(t1)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:96
  addi t1, t1, 4
204001bc:	0311                	addi	t1,t1,4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:97
  blt  t1, t2, 1b
204001be:	fe734ae3          	blt	t1,t2,204001b2 <_start+0x62>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:109
#endif
2:

  /* Fence all subsequent instruction fetches until after the ITIM writes
     complete */
  fence.i
204001c2:	0000100f          	fence.i
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:114

2:

  /* Copy the LIM section */
  la t0, metal_segment_lim_source_start
204001c6:	00000297          	auipc	t0,0x0
204001ca:	77a28293          	addi	t0,t0,1914 # 20400940 <metal_segment_itim_source_start>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:115
  la t1, metal_segment_lim_target_start
204001ce:	5fc00317          	auipc	t1,0x5fc00
204001d2:	e3230313          	addi	t1,t1,-462 # 80000000 <impure_data>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:116
  la t2, metal_segment_lim_target_end
204001d6:	5fc00397          	auipc	t2,0x5fc00
204001da:	e2a38393          	addi	t2,t2,-470 # 80000000 <impure_data>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:118

  beq t0, t1, 2f
204001de:	00628c63          	beq	t0,t1,204001f6 <_start+0xa6>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:119
  bge t1, t2, 2f
204001e2:	00735a63          	bge	t1,t2,204001f6 <_start+0xa6>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:123

1:
#if __riscv_xlen == 32
  lw   a0, 0(t0)
204001e6:	0002a503          	lw	a0,0(t0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:124
  addi t0, t0, 4
204001ea:	0291                	addi	t0,t0,4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:125
  sw   a0, 0(t1)
204001ec:	00a32023          	sw	a0,0(t1)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:126
  addi t1, t1, 4
204001f0:	0311                	addi	t1,t1,4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:127
  blt  t1, t2, 1b
204001f2:	fe734ae3          	blt	t1,t2,204001e6 <_start+0x96>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:139
#endif
2:

  /* Fence all subsequent instruction fetches until after the LIM writes
     complete */
  fence.i
204001f6:	0000100f          	fence.i
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:142

  /* Zero the BSS segment. */
  la t1, metal_segment_bss_target_start
204001fa:	5fc00317          	auipc	t1,0x5fc00
204001fe:	58e30313          	addi	t1,t1,1422 # 80000788 <cpu>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:143
  la t2, metal_segment_bss_target_end
20400202:	91818393          	addi	t2,gp,-1768 # 80000878 <metal_segment_bss_target_end>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:145

  bge t1, t2, 2f
20400206:	00735763          	bge	t1,t2,20400214 <_start+0xc4>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:149

1:
#if __riscv_xlen == 32
  sw   x0, 0(t1)
2040020a:	00032023          	sw	zero,0(t1)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:150
  addi t1, t1, 4
2040020e:	0311                	addi	t1,t1,4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:151
  blt  t1, t2, 1b
20400210:	fe734de3          	blt	t1,t2,2040020a <_start+0xba>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:161
#endif
2:

  /* Set TLS pointer */
  .weak __tls_base	
  la tp, __tls_base
20400214:	5fc00217          	auipc	tp,0x5fc00
20400218:	57420213          	addi	tp,tp,1396 # 80000788 <cpu>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:166

  /* At this point we're in an environment that can execute C code.  The first
   * thing to do is to make the callback to the parent environment if it's been
   * requested to do so. */
  beqz a2, 1f
2040021c:	c211                	beqz	a2,20400220 <_start+0xd0>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:167
  jalr a2
2040021e:	9602                	jalr	a2
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:171
1:

  /* The RISC-V port only uses new-style constructors and destructors. */
  la a0, __libc_fini_array
20400220:	00006517          	auipc	a0,0x6
20400224:	92050513          	addi	a0,a0,-1760 # 20405b40 <__libc_fini_array>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:172
  call atexit
20400228:	0dd050ef          	jal	ra,20405b04 <atexit>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:173
  call __libc_init_array
2040022c:	14b050ef          	jal	ra,20405b76 <__libc_init_array>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:177

  /* Register metal_fini_run as a destructor and call metal_init_run to
   * run and setup Metal constructors */
  la a0, metal_fini_run
20400230:	00006517          	auipc	a0,0x6
20400234:	be850513          	addi	a0,a0,-1048 # 20405e18 <metal_fini_run>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:178
  call atexit
20400238:	0cd050ef          	jal	ra,20405b04 <atexit>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:179
  call metal_init_run
2040023c:	3c9050ef          	jal	ra,20405e04 <metal_init_run>

20400240 <_skip_init>:
_skip_init():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:185

_skip_init:

  /* Synchronize harts so that secondary harts wait until hart 0 finishes
     initializing */
  call __metal_synchronize_harts
20400240:	3709                	jal	20400142 <__metal_synchronize_harts>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:188

  /* Disable and clear all interrupt sources */
  li   a3, -1
20400242:	56fd                	li	a3,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:189
  csrc mie, a3
20400244:	3046b073          	csrc	mie,a3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:190
  csrc mip, a3
20400248:	3446b073          	csrc	mip,a3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:194

  /* The delegation CSRs exist if user mode interrupts (N extension) or
   * supervisor mode (S extension) are supported */
  csrr a5, misa
2040024c:	301027f3          	csrr	a5,misa
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:195
  lui  a4, 0x42
20400250:	00042737          	lui	a4,0x42
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:196
  and  a4, a4, a5
20400254:	8f7d                	and	a4,a4,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:197
  beqz a4, 1f
20400256:	c709                	beqz	a4,20400260 <_skip_init+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:198
  csrc mideleg, a3
20400258:	3036b073          	csrc	mideleg,a3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:199
  csrc medeleg, a3
2040025c:	3026b073          	csrc	medeleg,a3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:203
1:

  /* The satp CSR exists if supervisor mode (S extension) is supported */
  lui  a4, 0x40
20400260:	00040737          	lui	a4,0x40
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:204
  and  a4, a4, a5
20400264:	8f7d                	and	a4,a4,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:205
  beqz a4, 1f
20400266:	c319                	beqz	a4,2040026c <_skip_init+0x2c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:206
  csrc satp, a3
20400268:	1806b073          	csrc	satp,a3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:210
1:

  /* Check RISC-V isa and enable FS bits if Floating Point architecture. */
  li   a4, 0x10028
2040026c:	6741                	lui	a4,0x10
2040026e:	02870713          	addi	a4,a4,40 # 10028 <__heap_size+0xf828>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:211
  and  a5, a5, a4
20400272:	8ff9                	and	a5,a5,a4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:212
  beqz a5, 1f
20400274:	cb89                	beqz	a5,20400286 <_skip_init+0x46>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:213
  csrr a5, mstatus
20400276:	300027f3          	csrr	a5,mstatus
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:214
  lui  a4, 0x2
2040027a:	6709                	lui	a4,0x2
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:215
  or   a5, a5, a4
2040027c:	8fd9                	or	a5,a5,a4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:216
  csrw mstatus, a5
2040027e:	30079073          	csrw	mstatus,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:217
  csrwi fcsr, 0
20400282:	00305073          	csrwi	fcsr,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:221
1:

  /* Check for vector extension support and enable it if found */
  csrr a5, misa
20400286:	301027f3          	csrr	a5,misa
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:222
  li a4, 0x200000
2040028a:	00200737          	lui	a4,0x200
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:223
  and a5, a5, a4
2040028e:	8ff9                	and	a5,a5,a4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:224
  beqz a5, 1f
20400290:	c799                	beqz	a5,2040029e <_skip_init+0x5e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:225
  csrr a5, mstatus
20400292:	300027f3          	csrr	a5,mstatus
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:226
  ori a5, a5, 0x200
20400296:	2007e793          	ori	a5,a5,512
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:227
  csrw mstatus, a5
2040029a:	30079073          	csrw	mstatus,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:233
1:

  /* This is a C runtime, so main() is defined to have some arguments.  Since
   * there's nothing sane the METAL can pass we don't bother with that but
   * instead just setup as close to a NOP as we can. */
  li a0, 1     /* argc=1 */
2040029e:	4505                	li	a0,1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:234
  la a1, argv  /* argv = {"libgloss", NULL} */
204002a0:	00000597          	auipc	a1,0x0
204002a4:	67c58593          	addi	a1,a1,1660 # 2040091c <argv>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:235
  la a2, envp  /* envp = {NULL} */
204002a8:	00000617          	auipc	a2,0x0
204002ac:	67860613          	addi	a2,a2,1656 # 20400920 <envp>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:236
  call secondary_main
204002b0:	2031                	jal	204002bc <secondary_main>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:242

  /* Call exit to handle libc's cleanup routines.  Under normal contains this
   * shouldn't even get called, but I'm still not using a tail call here
   * because returning to the METAL is the right thing to do in pathological
   * situations. */
  call exit
204002b2:	067050ef          	jal	ra,20405b18 <exit>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:247

  /* And here's where we return.  Again, it's a bit odd but the METAL defines
   * this as a bad idea (ie, as opposed to leaving it undefined) and at this
   * point it's really the only thing left to do. */
  mv ra, s0
204002b6:	80a2                	mv	ra,s0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:248
  ret
204002b8:	8082                	ret

204002ba <_fini>:
_init():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:260
.type   _init, @function
.global _fini
.type   _fini, @function
_init:
_fini:
  ret
204002ba:	8082                	ret

204002bc <secondary_main>:
secondary_main():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:271
.weak   secondary_main
.global secondary_main
.type   secondary_main, @function

secondary_main:
  addi sp, sp, -16
204002bc:	1141                	addi	sp,sp,-16
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:273
#if __riscv_xlen == 32
  sw ra, 4(sp)
204002be:	c206                	sw	ra,4(sp)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:277
#else
  sd ra, 8(sp)
#endif
  csrr t0, mhartid
204002c0:	f14022f3          	csrr	t0,mhartid
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:278
  la t1, __metal_boot_hart
204002c4:	00000313          	li	t1,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:279
  beq t0, t1, 2f
204002c8:	00628563          	beq	t0,t1,204002d2 <secondary_main+0x16>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:281
1:
  wfi
204002cc:	10500073          	wfi
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:282
  j 1b
204002d0:	bff5                	j	204002cc <secondary_main+0x10>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:284
2:
  call main
204002d2:	750000ef          	jal	ra,20400a22 <main>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:286
#if __riscv_xlen == 32
  lw ra, 4(sp)
204002d6:	4092                	lw	ra,4(sp)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:290
#else
  ld ra, 8(sp)
#endif
  addi sp, sp, 16
204002d8:	0141                	addi	sp,sp,16
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/crt0.S:291
  ret
204002da:	8082                	ret

Disassembly of section .ctors:

204002e4 <metal_tty_init>:
metal_tty_init():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/tty.c:28

#ifndef __METAL_DT_STDOUT_UART_BAUD
#define __METAL_DT_STDOUT_UART_BAUD 115200
#endif

METAL_CONSTRUCTOR(metal_tty_init) {
204002e4:	1141                	addi	sp,sp,-16
204002e6:	c606                	sw	ra,12(sp)
204002e8:	c422                	sw	s0,8(sp)
204002ea:	0800                	addi	s0,sp,16
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/tty.c:29
    metal_uart_init(__METAL_DT_STDOUT_UART_HANDLE, __METAL_DT_STDOUT_UART_BAUD);
204002ec:	67f1                	lui	a5,0x1c
204002ee:	20078593          	addi	a1,a5,512 # 1c200 <__heap_size+0x1ba00>
204002f2:	800007b7          	lui	a5,0x80000
204002f6:	74078513          	addi	a0,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2c0>
204002fa:	281010ef          	jal	ra,20401d7a <metal_uart_init>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/tty.c:30
}
204002fe:	0001                	nop
20400300:	40b2                	lw	ra,12(sp)
20400302:	4422                	lw	s0,8(sp)
20400304:	0141                	addi	sp,sp,16
20400306:	8082                	ret

Disassembly of section .text:

20400980 <display_banner>:
display_banner():
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:18
struct metal_cpu *cpu;
struct metal_interrupt *cpu_intr, *tmr_intr;
int tmr_id;
volatile uint32_t timer_isr_flag;

void display_banner (void) {
20400980:	714d                	addi	sp,sp,-336
20400982:	14112623          	sw	ra,332(sp)
20400986:	14812423          	sw	s0,328(sp)
2040098a:	0a80                	addi	s0,sp,336
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:20

    char mainMSG[] = "\r\n    Illinois Tech ECE\
2040098c:	204007b7          	lui	a5,0x20400
20400990:	30878713          	addi	a4,a5,776 # 20400308 <__fini_array_end+0x20>
20400994:	eb440793          	addi	a5,s0,-332
20400998:	86ba                	mv	a3,a4
2040099a:	13500713          	li	a4,309
2040099e:	863a                	mv	a2,a4
204009a0:	85b6                	mv	a1,a3
204009a2:	853e                	mv	a0,a5
204009a4:	29d5                	jal	20400e98 <memcpy>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:32
    \r\n  I        I         I\
    \r\nIIIII    IIIII       I\
    \r\n\
    \r\nRunning on RISCV!\
    \r\nABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890-=`";
    for(int i=0; i<(sizeof(mainMSG)/sizeof(char)); i++) metal_tty_putc(mainMSG[i]);
204009a6:	fe042623          	sw	zero,-20(s0)
204009aa:	a005                	j	204009ca <display_banner+0x4a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:32 (discriminator 3)
204009ac:	fec42783          	lw	a5,-20(s0)
204009b0:	ff040713          	addi	a4,s0,-16
204009b4:	97ba                	add	a5,a5,a4
204009b6:	ec47c783          	lbu	a5,-316(a5)
204009ba:	853e                	mv	a0,a5
204009bc:	366010ef          	jal	ra,20401d22 <metal_tty_putc>
204009c0:	fec42783          	lw	a5,-20(s0)
204009c4:	0785                	addi	a5,a5,1
204009c6:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:32 (discriminator 1)
204009ca:	fec42703          	lw	a4,-20(s0)
204009ce:	13400793          	li	a5,308
204009d2:	fce7fde3          	bgeu	a5,a4,204009ac <display_banner+0x2c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:34

}
204009d6:	0001                	nop
204009d8:	0001                	nop
204009da:	14c12083          	lw	ra,332(sp)
204009de:	14812403          	lw	s0,328(sp)
204009e2:	6171                	addi	sp,sp,336
204009e4:	8082                	ret

204009e6 <timer_isr>:
timer_isr():
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:36

void timer_isr (int id, void *data) {
204009e6:	1101                	addi	sp,sp,-32
204009e8:	ce06                	sw	ra,28(sp)
204009ea:	cc22                	sw	s0,24(sp)
204009ec:	1000                	addi	s0,sp,32
204009ee:	fea42623          	sw	a0,-20(s0)
204009f2:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:39

    // Disable Timer interrupt
    metal_interrupt_disable(tmr_intr, tmr_id);
204009f6:	800007b7          	lui	a5,0x80000
204009fa:	7907a703          	lw	a4,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff310>
204009fe:	800007b7          	lui	a5,0x80000
20400a02:	7947a783          	lw	a5,1940(a5) # 80000794 <metal_segment_heap_target_end+0xfffff314>
20400a06:	85be                	mv	a1,a5
20400a08:	853a                	mv	a0,a4
20400a0a:	2ea010ef          	jal	ra,20401cf4 <metal_interrupt_disable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:42

    // Flag showing we hit timer isr
    timer_isr_flag = 1;
20400a0e:	800007b7          	lui	a5,0x80000
20400a12:	4705                	li	a4,1
20400a14:	78e7ac23          	sw	a4,1944(a5) # 80000798 <metal_segment_heap_target_end+0xfffff318>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:43
}
20400a18:	0001                	nop
20400a1a:	40f2                	lw	ra,28(sp)
20400a1c:	4462                	lw	s0,24(sp)
20400a1e:	6105                	addi	sp,sp,32
20400a20:	8082                	ret

20400a22 <main>:
main():
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:69
    // Turn off this LED
    metal_led_off(which_led);
}

int main (void)
{
20400a22:	716d                	addi	sp,sp,-272
20400a24:	10112623          	sw	ra,268(sp)
20400a28:	10812423          	sw	s0,264(sp)
20400a2c:	10912223          	sw	s1,260(sp)
20400a30:	0a00                	addi	s0,sp,272
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:73
    int rc;

    // Lets get the CPU and and its interrupt
    cpu = metal_cpu_get(metal_cpu_get_current_hartid());
20400a32:	1ea010ef          	jal	ra,20401c1c <metal_cpu_get_current_hartid>
20400a36:	87aa                	mv	a5,a0
20400a38:	853e                	mv	a0,a5
20400a3a:	1b4010ef          	jal	ra,20401bee <metal_cpu_get>
20400a3e:	872a                	mv	a4,a0
20400a40:	800007b7          	lui	a5,0x80000
20400a44:	78e7a423          	sw	a4,1928(a5) # 80000788 <metal_segment_heap_target_end+0xfffff308>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:74
    if (cpu == NULL) {
20400a48:	800007b7          	lui	a5,0x80000
20400a4c:	7887a783          	lw	a5,1928(a5) # 80000788 <metal_segment_heap_target_end+0xfffff308>
20400a50:	eb81                	bnez	a5,20400a60 <main+0x3e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:75
        printf("CPU null.\n");
20400a52:	204007b7          	lui	a5,0x20400
20400a56:	44078513          	addi	a0,a5,1088 # 20400440 <__fini_array_end+0x158>
20400a5a:	2d51                	jal	204010ee <puts>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:76
        return 2;
20400a5c:	4789                	li	a5,2
20400a5e:	a125                	j	20400e86 <main+0x464>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:78
    }
    cpu_intr = metal_cpu_interrupt_controller(cpu);
20400a60:	800007b7          	lui	a5,0x80000
20400a64:	7887a783          	lw	a5,1928(a5) # 80000788 <metal_segment_heap_target_end+0xfffff308>
20400a68:	853e                	mv	a0,a5
20400a6a:	15e010ef          	jal	ra,20401bc8 <metal_cpu_interrupt_controller>
20400a6e:	872a                	mv	a4,a0
20400a70:	800007b7          	lui	a5,0x80000
20400a74:	78e7a623          	sw	a4,1932(a5) # 8000078c <metal_segment_heap_target_end+0xfffff30c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:79
    if (cpu_intr == NULL) {
20400a78:	800007b7          	lui	a5,0x80000
20400a7c:	78c7a783          	lw	a5,1932(a5) # 8000078c <metal_segment_heap_target_end+0xfffff30c>
20400a80:	eb81                	bnez	a5,20400a90 <main+0x6e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:80
        printf("CPU interrupt controller is null.\n");
20400a82:	204007b7          	lui	a5,0x20400
20400a86:	44c78513          	addi	a0,a5,1100 # 2040044c <__fini_array_end+0x164>
20400a8a:	2595                	jal	204010ee <puts>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:81
        return 3;
20400a8c:	478d                	li	a5,3
20400a8e:	aee5                	j	20400e86 <main+0x464>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:83
    }
    metal_interrupt_init(cpu_intr);
20400a90:	800007b7          	lui	a5,0x80000
20400a94:	78c7a783          	lw	a5,1932(a5) # 8000078c <metal_segment_heap_target_end+0xfffff30c>
20400a98:	853e                	mv	a0,a5
20400a9a:	1ca010ef          	jal	ra,20401c64 <metal_interrupt_init>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:86

    // display welcome banner
    display_banner();
20400a9e:	35cd                	jal	20400980 <display_banner>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:89
    
    // Setup Timer and its interrupt so we can toggle LEDs on 1s cadence
    tmr_intr = metal_cpu_timer_interrupt_controller(cpu);
20400aa0:	800007b7          	lui	a5,0x80000
20400aa4:	7887a783          	lw	a5,1928(a5) # 80000788 <metal_segment_heap_target_end+0xfffff308>
20400aa8:	853e                	mv	a0,a5
20400aaa:	0d2010ef          	jal	ra,20401b7c <metal_cpu_timer_interrupt_controller>
20400aae:	872a                	mv	a4,a0
20400ab0:	800007b7          	lui	a5,0x80000
20400ab4:	78e7a823          	sw	a4,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff310>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:90
    if (tmr_intr == NULL) {
20400ab8:	800007b7          	lui	a5,0x80000
20400abc:	7907a783          	lw	a5,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff310>
20400ac0:	eb81                	bnez	a5,20400ad0 <main+0xae>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:91
        printf("TIMER interrupt controller is  null.\n");
20400ac2:	204007b7          	lui	a5,0x20400
20400ac6:	47078513          	addi	a0,a5,1136 # 20400470 <__fini_array_end+0x188>
20400aca:	2515                	jal	204010ee <puts>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:92
        return 4;
20400acc:	4791                	li	a5,4
20400ace:	ae65                	j	20400e86 <main+0x464>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:94
    }
    metal_interrupt_init(tmr_intr);
20400ad0:	800007b7          	lui	a5,0x80000
20400ad4:	7907a783          	lw	a5,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff310>
20400ad8:	853e                	mv	a0,a5
20400ada:	18a010ef          	jal	ra,20401c64 <metal_interrupt_init>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:95
    tmr_id = metal_cpu_timer_get_interrupt_id(cpu);
20400ade:	800007b7          	lui	a5,0x80000
20400ae2:	7887a783          	lw	a5,1928(a5) # 80000788 <metal_segment_heap_target_end+0xfffff308>
20400ae6:	853e                	mv	a0,a5
20400ae8:	0ba010ef          	jal	ra,20401ba2 <metal_cpu_timer_get_interrupt_id>
20400aec:	872a                	mv	a4,a0
20400aee:	800007b7          	lui	a5,0x80000
20400af2:	78e7aa23          	sw	a4,1940(a5) # 80000794 <metal_segment_heap_target_end+0xfffff314>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:96
    rc = metal_interrupt_register_handler(tmr_intr, tmr_id, timer_isr, cpu);
20400af6:	800007b7          	lui	a5,0x80000
20400afa:	7907a703          	lw	a4,1936(a5) # 80000790 <metal_segment_heap_target_end+0xfffff310>
20400afe:	800007b7          	lui	a5,0x80000
20400b02:	7947a583          	lw	a1,1940(a5) # 80000794 <metal_segment_heap_target_end+0xfffff314>
20400b06:	800007b7          	lui	a5,0x80000
20400b0a:	7887a783          	lw	a5,1928(a5) # 80000788 <metal_segment_heap_target_end+0xfffff308>
20400b0e:	86be                	mv	a3,a5
20400b10:	204017b7          	lui	a5,0x20401
20400b14:	9e678613          	addi	a2,a5,-1562 # 204009e6 <timer_isr>
20400b18:	853a                	mv	a0,a4
20400b1a:	16e010ef          	jal	ra,20401c88 <metal_interrupt_register_handler>
20400b1e:	fca42c23          	sw	a0,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:97
    if (rc < 0) {
20400b22:	fd842783          	lw	a5,-40(s0)
20400b26:	0007dc63          	bgez	a5,20400b3e <main+0x11c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:98
        printf("TIMER interrupt handler registration failed\n");
20400b2a:	204007b7          	lui	a5,0x20400
20400b2e:	49878513          	addi	a0,a5,1176 # 20400498 <__fini_array_end+0x1b0>
20400b32:	2b75                	jal	204010ee <puts>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:99
        return (rc * -1);
20400b34:	fd842783          	lw	a5,-40(s0)
20400b38:	40f007b3          	neg	a5,a5
20400b3c:	a6a9                	j	20400e86 <main+0x464>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:103
    }

    // Lastly CPU interrupt
    if (metal_interrupt_enable(cpu_intr, 0) == -1) {
20400b3e:	800007b7          	lui	a5,0x80000
20400b42:	78c7a783          	lw	a5,1932(a5) # 8000078c <metal_segment_heap_target_end+0xfffff30c>
20400b46:	4581                	li	a1,0
20400b48:	853e                	mv	a0,a5
20400b4a:	17c010ef          	jal	ra,20401cc6 <metal_interrupt_enable>
20400b4e:	872a                	mv	a4,a0
20400b50:	57fd                	li	a5,-1
20400b52:	00f71963          	bne	a4,a5,20400b64 <main+0x142>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:104
        printf("CPU interrupt enable failed\n");
20400b56:	204007b7          	lui	a5,0x20400
20400b5a:	4c478513          	addi	a0,a5,1220 # 204004c4 <__fini_array_end+0x1dc>
20400b5e:	2b41                	jal	204010ee <puts>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:105
        return 6;
20400b60:	4799                	li	a5,6
20400b62:	a615                	j	20400e86 <main+0x464>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:108
    }
 
    struct metal_gpio *gpio_21 = metal_gpio_get_device(0);
20400b64:	4501                	li	a0,0
20400b66:	0d0010ef          	jal	ra,20401c36 <metal_gpio_get_device>
20400b6a:	87aa                	mv	a5,a0
20400b6c:	fcf42a23          	sw	a5,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:109
    if(gpio_21 == NULL)
20400b70:	fd442783          	lw	a5,-44(s0)
20400b74:	eb81                	bnez	a5,20400b84 <main+0x162>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:111
    {
        printf("GPIO NO WORK\n");
20400b76:	204007b7          	lui	a5,0x20400
20400b7a:	4e078513          	addi	a0,a5,1248 # 204004e0 <__fini_array_end+0x1f8>
20400b7e:	2b85                	jal	204010ee <puts>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:112
        return 3;
20400b80:	478d                	li	a5,3
20400b82:	a611                	j	20400e86 <main+0x464>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:114
    }
    struct metal_gpio *gpio_11 = metal_gpio_get_device(0);
20400b84:	4501                	li	a0,0
20400b86:	0b0010ef          	jal	ra,20401c36 <metal_gpio_get_device>
20400b8a:	87aa                	mv	a5,a0
20400b8c:	fcf42423          	sw	a5,-56(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:115
    struct metal_led *blue_led0 = &gpio_11;
20400b90:	fc840793          	addi	a5,s0,-56
20400b94:	fcf42823          	sw	a5,-48(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:117

    if(blue_led0 == NULL)
20400b98:	fd042783          	lw	a5,-48(s0)
20400b9c:	eb81                	bnez	a5,20400bac <main+0x18a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:119
    {
        printf("LED NO WORK\n");
20400b9e:	204007b7          	lui	a5,0x20400
20400ba2:	4f078513          	addi	a0,a5,1264 # 204004f0 <__fini_array_end+0x208>
20400ba6:	23a1                	jal	204010ee <puts>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:120
        return 1;
20400ba8:	4785                	li	a5,1
20400baa:	acf1                	j	20400e86 <main+0x464>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:127
    

    static char cmd[50] = "";
    static int frontPointer = 0;
    static int currentChar=-1;
    char monitor[] = "\r\nRISCV-IIT>";
20400bac:	204007b7          	lui	a5,0x20400
20400bb0:	53878793          	addi	a5,a5,1336 # 20400538 <__fini_array_end+0x250>
20400bb4:	4390                	lw	a2,0(a5)
20400bb6:	43d4                	lw	a3,4(a5)
20400bb8:	4798                	lw	a4,8(a5)
20400bba:	fac42c23          	sw	a2,-72(s0)
20400bbe:	fad42e23          	sw	a3,-68(s0)
20400bc2:	fce42023          	sw	a4,-64(s0)
20400bc6:	00c7c783          	lbu	a5,12(a5)
20400bca:	fcf40223          	sb	a5,-60(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:128
    char hello[] = "Hello, World!";
20400bce:	204007b7          	lui	a5,0x20400
20400bd2:	54878793          	addi	a5,a5,1352 # 20400548 <__fini_array_end+0x260>
20400bd6:	4390                	lw	a2,0(a5)
20400bd8:	43d4                	lw	a3,4(a5)
20400bda:	4798                	lw	a4,8(a5)
20400bdc:	fac42423          	sw	a2,-88(s0)
20400be0:	fad42623          	sw	a3,-84(s0)
20400be4:	fae42823          	sw	a4,-80(s0)
20400be8:	00c7d783          	lhu	a5,12(a5)
20400bec:	faf41a23          	sh	a5,-76(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:129
    char whoami[] = "I am an FPGA running RISCV";
20400bf0:	204007b7          	lui	a5,0x20400
20400bf4:	55878793          	addi	a5,a5,1368 # 20400558 <__fini_array_end+0x270>
20400bf8:	0007a803          	lw	a6,0(a5)
20400bfc:	43c8                	lw	a0,4(a5)
20400bfe:	478c                	lw	a1,8(a5)
20400c00:	47d0                	lw	a2,12(a5)
20400c02:	4b94                	lw	a3,16(a5)
20400c04:	4bd8                	lw	a4,20(a5)
20400c06:	f9042623          	sw	a6,-116(s0)
20400c0a:	f8a42823          	sw	a0,-112(s0)
20400c0e:	f8b42a23          	sw	a1,-108(s0)
20400c12:	f8c42c23          	sw	a2,-104(s0)
20400c16:	f8d42e23          	sw	a3,-100(s0)
20400c1a:	fae42023          	sw	a4,-96(s0)
20400c1e:	0187d703          	lhu	a4,24(a5)
20400c22:	fae41223          	sh	a4,-92(s0)
20400c26:	01a7c783          	lbu	a5,26(a5)
20400c2a:	faf40323          	sb	a5,-90(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:130
    char help[] = ("---RISCV MONITOR---\
20400c2e:	204007b7          	lui	a5,0x20400
20400c32:	57478713          	addi	a4,a5,1396 # 20400574 <__fini_array_end+0x28c>
20400c36:	ef040793          	addi	a5,s0,-272
20400c3a:	86ba                	mv	a3,a4
20400c3c:	09b00713          	li	a4,155
20400c40:	863a                	mv	a2,a4
20400c42:	85b6                	mv	a1,a3
20400c44:	853e                	mv	a0,a5
20400c46:	2c89                	jal	20400e98 <memcpy>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:138
    \r\nWHOAMI -        Show message to terminal");

    
    while(1)
    {
        if(frontPointer==0) {
20400c48:	800007b7          	lui	a5,0x80000
20400c4c:	79c7a783          	lw	a5,1948(a5) # 8000079c <metal_segment_heap_target_end+0xfffff31c>
20400c50:	eb85                	bnez	a5,20400c80 <main+0x25e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:140

            for(int i = 0; i<(sizeof(monitor)/sizeof(char)); i++) metal_tty_putc(monitor[i]);
20400c52:	fe042623          	sw	zero,-20(s0)
20400c56:	a005                	j	20400c76 <main+0x254>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:140 (discriminator 3)
20400c58:	fec42783          	lw	a5,-20(s0)
20400c5c:	ff040713          	addi	a4,s0,-16
20400c60:	97ba                	add	a5,a5,a4
20400c62:	fc87c783          	lbu	a5,-56(a5)
20400c66:	853e                	mv	a0,a5
20400c68:	0ba010ef          	jal	ra,20401d22 <metal_tty_putc>
20400c6c:	fec42783          	lw	a5,-20(s0)
20400c70:	0785                	addi	a5,a5,1
20400c72:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:140 (discriminator 1)
20400c76:	fec42703          	lw	a4,-20(s0)
20400c7a:	47b1                	li	a5,12
20400c7c:	fce7fee3          	bgeu	a5,a4,20400c58 <main+0x236>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:143
            
        }
        while(metal_tty_getc(&currentChar)==-1) { }
20400c80:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:143 (discriminator 1)
20400c82:	800007b7          	lui	a5,0x80000
20400c86:	76078513          	addi	a0,a5,1888 # 80000760 <metal_segment_heap_target_end+0xfffff2e0>
20400c8a:	0be010ef          	jal	ra,20401d48 <metal_tty_getc>
20400c8e:	872a                	mv	a4,a0
20400c90:	57fd                	li	a5,-1
20400c92:	fef708e3          	beq	a4,a5,20400c82 <main+0x260>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:146
        

        switch (currentChar) {
20400c96:	800007b7          	lui	a5,0x80000
20400c9a:	7607a783          	lw	a5,1888(a5) # 80000760 <metal_segment_heap_target_end+0xfffff2e0>
20400c9e:	4721                	li	a4,8
20400ca0:	1ee78163          	beq	a5,a4,20400e82 <main+0x460>
20400ca4:	4735                	li	a4,13
20400ca6:	18e79b63          	bne	a5,a4,20400e3c <main+0x41a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:148
        case ('\r'):
            printf("\r\n");
20400caa:	204007b7          	lui	a5,0x20400
20400cae:	4fc78513          	addi	a0,a5,1276 # 204004fc <__fini_array_end+0x214>
20400cb2:	2935                	jal	204010ee <puts>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:151
            //end of line, process command 

            if (strncmp(cmd,"HELLO",5)==0)
20400cb4:	4615                	li	a2,5
20400cb6:	204007b7          	lui	a5,0x20400
20400cba:	50078593          	addi	a1,a5,1280 # 20400500 <__fini_array_end+0x218>
20400cbe:	800007b7          	lui	a5,0x80000
20400cc2:	7b878513          	addi	a0,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xfffff338>
20400cc6:	2185                	jal	20401126 <strncmp>
20400cc8:	87aa                	mv	a5,a0
20400cca:	eb8d                	bnez	a5,20400cfc <main+0x2da>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:153
            {
                for(int i = 0; i<(sizeof(hello)/sizeof(char)); i++) metal_tty_putc(hello[i]);
20400ccc:	fe042423          	sw	zero,-24(s0)
20400cd0:	a005                	j	20400cf0 <main+0x2ce>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:153 (discriminator 3)
20400cd2:	fe842783          	lw	a5,-24(s0)
20400cd6:	ff040713          	addi	a4,s0,-16
20400cda:	97ba                	add	a5,a5,a4
20400cdc:	fb87c783          	lbu	a5,-72(a5)
20400ce0:	853e                	mv	a0,a5
20400ce2:	040010ef          	jal	ra,20401d22 <metal_tty_putc>
20400ce6:	fe842783          	lw	a5,-24(s0)
20400cea:	0785                	addi	a5,a5,1
20400cec:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:153 (discriminator 1)
20400cf0:	fe842703          	lw	a4,-24(s0)
20400cf4:	47b5                	li	a5,13
20400cf6:	fce7fee3          	bgeu	a5,a4,20400cd2 <main+0x2b0>
20400cfa:	aa19                	j	20400e10 <main+0x3ee>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:155
            }
            else if(strncmp(cmd, "WHOAMI",6)==0)
20400cfc:	4619                	li	a2,6
20400cfe:	204007b7          	lui	a5,0x20400
20400d02:	50878593          	addi	a1,a5,1288 # 20400508 <__fini_array_end+0x220>
20400d06:	800007b7          	lui	a5,0x80000
20400d0a:	7b878513          	addi	a0,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xfffff338>
20400d0e:	2921                	jal	20401126 <strncmp>
20400d10:	87aa                	mv	a5,a0
20400d12:	eb8d                	bnez	a5,20400d44 <main+0x322>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:157
            {
                for(int i = 0; i<(sizeof(whoami)/sizeof(char)); i++) metal_tty_putc(whoami[i]);
20400d14:	fe042223          	sw	zero,-28(s0)
20400d18:	a005                	j	20400d38 <main+0x316>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:157 (discriminator 3)
20400d1a:	fe442783          	lw	a5,-28(s0)
20400d1e:	ff040713          	addi	a4,s0,-16
20400d22:	97ba                	add	a5,a5,a4
20400d24:	f9c7c783          	lbu	a5,-100(a5)
20400d28:	853e                	mv	a0,a5
20400d2a:	7f9000ef          	jal	ra,20401d22 <metal_tty_putc>
20400d2e:	fe442783          	lw	a5,-28(s0)
20400d32:	0785                	addi	a5,a5,1
20400d34:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:157 (discriminator 1)
20400d38:	fe442703          	lw	a4,-28(s0)
20400d3c:	47e9                	li	a5,26
20400d3e:	fce7fee3          	bgeu	a5,a4,20400d1a <main+0x2f8>
20400d42:	a0f9                	j	20400e10 <main+0x3ee>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:160
            }
            
            else if(strncmp(cmd, "HELP",4)==0)
20400d44:	4611                	li	a2,4
20400d46:	204007b7          	lui	a5,0x20400
20400d4a:	51078593          	addi	a1,a5,1296 # 20400510 <__fini_array_end+0x228>
20400d4e:	800007b7          	lui	a5,0x80000
20400d52:	7b878513          	addi	a0,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xfffff338>
20400d56:	2ec1                	jal	20401126 <strncmp>
20400d58:	87aa                	mv	a5,a0
20400d5a:	eb95                	bnez	a5,20400d8e <main+0x36c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:162
            {
                for(int i = 0; i<(sizeof(help)/sizeof(char)); i++) metal_tty_putc(help[i]);
20400d5c:	fe042023          	sw	zero,-32(s0)
20400d60:	a005                	j	20400d80 <main+0x35e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:162 (discriminator 3)
20400d62:	fe042783          	lw	a5,-32(s0)
20400d66:	ff040713          	addi	a4,s0,-16
20400d6a:	97ba                	add	a5,a5,a4
20400d6c:	f007c783          	lbu	a5,-256(a5)
20400d70:	853e                	mv	a0,a5
20400d72:	7b1000ef          	jal	ra,20401d22 <metal_tty_putc>
20400d76:	fe042783          	lw	a5,-32(s0)
20400d7a:	0785                	addi	a5,a5,1
20400d7c:	fef42023          	sw	a5,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:162 (discriminator 1)
20400d80:	fe042703          	lw	a4,-32(s0)
20400d84:	09a00793          	li	a5,154
20400d88:	fce7fde3          	bgeu	a5,a4,20400d62 <main+0x340>
20400d8c:	a051                	j	20400e10 <main+0x3ee>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:164
            }
            else if(strncmp(cmd, "ECHO",4)==0)
20400d8e:	4611                	li	a2,4
20400d90:	204007b7          	lui	a5,0x20400
20400d94:	51878593          	addi	a1,a5,1304 # 20400518 <__fini_array_end+0x230>
20400d98:	800007b7          	lui	a5,0x80000
20400d9c:	7b878513          	addi	a0,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xfffff338>
20400da0:	2659                	jal	20401126 <strncmp>
20400da2:	87aa                	mv	a5,a0
20400da4:	e7b5                	bnez	a5,20400e10 <main+0x3ee>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:167
            {
                              
                char *tmpStr = strchr(cmd, ' ');
20400da6:	02000593          	li	a1,32
20400daa:	800007b7          	lui	a5,0x80000
20400dae:	7b878513          	addi	a0,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xfffff338>
20400db2:	26a1                	jal	204010fa <strchr>
20400db4:	fca42623          	sw	a0,-52(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:168
                if(tmpStr==NULL) {
20400db8:	fcc42783          	lw	a5,-52(s0)
20400dbc:	e799                	bnez	a5,20400dca <main+0x3a8>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:169
                    printf("nothing to echo\r\n");
20400dbe:	204007b7          	lui	a5,0x20400
20400dc2:	52078513          	addi	a0,a5,1312 # 20400520 <__fini_array_end+0x238>
20400dc6:	2625                	jal	204010ee <puts>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:170
                    break;
20400dc8:	a875                	j	20400e84 <main+0x462>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:172
                }
                int i = 1;
20400dca:	4785                	li	a5,1
20400dcc:	fcf42e23          	sw	a5,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:173
                while(i<50 && tmpStr[i] != '\n') {
20400dd0:	a005                	j	20400df0 <main+0x3ce>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:174
                    metal_tty_putc(tmpStr[i]);
20400dd2:	fdc42783          	lw	a5,-36(s0)
20400dd6:	fcc42703          	lw	a4,-52(s0)
20400dda:	97ba                	add	a5,a5,a4
20400ddc:	0007c783          	lbu	a5,0(a5)
20400de0:	853e                	mv	a0,a5
20400de2:	741000ef          	jal	ra,20401d22 <metal_tty_putc>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:175
                    i++;
20400de6:	fdc42783          	lw	a5,-36(s0)
20400dea:	0785                	addi	a5,a5,1
20400dec:	fcf42e23          	sw	a5,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:173
                while(i<50 && tmpStr[i] != '\n') {
20400df0:	fdc42703          	lw	a4,-36(s0)
20400df4:	03100793          	li	a5,49
20400df8:	00e7cc63          	blt	a5,a4,20400e10 <main+0x3ee>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:173 (discriminator 1)
20400dfc:	fdc42783          	lw	a5,-36(s0)
20400e00:	fcc42703          	lw	a4,-52(s0)
20400e04:	97ba                	add	a5,a5,a4
20400e06:	0007c703          	lbu	a4,0(a5)
20400e0a:	47a9                	li	a5,10
20400e0c:	fcf713e3          	bne	a4,a5,20400dd2 <main+0x3b0>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:181
                }

                
                
            }
            frontPointer = 0;
20400e10:	800007b7          	lui	a5,0x80000
20400e14:	7807ae23          	sw	zero,1948(a5) # 8000079c <metal_segment_heap_target_end+0xfffff31c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:182
            memset(cmd," ",strlen(cmd));
20400e18:	204007b7          	lui	a5,0x20400
20400e1c:	53478493          	addi	s1,a5,1332 # 20400534 <__fini_array_end+0x24c>
20400e20:	800007b7          	lui	a5,0x80000
20400e24:	7b878513          	addi	a0,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xfffff338>
20400e28:	24f5                	jal	20401114 <strlen>
20400e2a:	87aa                	mv	a5,a0
20400e2c:	863e                	mv	a2,a5
20400e2e:	85a6                	mv	a1,s1
20400e30:	800007b7          	lui	a5,0x80000
20400e34:	7b878513          	addi	a0,a5,1976 # 800007b8 <metal_segment_heap_target_end+0xfffff338>
20400e38:	2a15                	jal	20400f6c <memset>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:183
            break;
20400e3a:	a0a9                	j	20400e84 <main+0x462>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:187
        case('\b'):
            break;
        default:
            metal_tty_putc(currentChar);
20400e3c:	800007b7          	lui	a5,0x80000
20400e40:	7607a783          	lw	a5,1888(a5) # 80000760 <metal_segment_heap_target_end+0xfffff2e0>
20400e44:	853e                	mv	a0,a5
20400e46:	6dd000ef          	jal	ra,20401d22 <metal_tty_putc>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:188
            cmd[frontPointer]=(char)currentChar;
20400e4a:	800007b7          	lui	a5,0x80000
20400e4e:	7607a703          	lw	a4,1888(a5) # 80000760 <metal_segment_heap_target_end+0xfffff2e0>
20400e52:	800007b7          	lui	a5,0x80000
20400e56:	79c7a783          	lw	a5,1948(a5) # 8000079c <metal_segment_heap_target_end+0xfffff31c>
20400e5a:	0ff77713          	andi	a4,a4,255
20400e5e:	800006b7          	lui	a3,0x80000
20400e62:	7b868693          	addi	a3,a3,1976 # 800007b8 <metal_segment_heap_target_end+0xfffff338>
20400e66:	97b6                	add	a5,a5,a3
20400e68:	00e78023          	sb	a4,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:189
            frontPointer++;
20400e6c:	800007b7          	lui	a5,0x80000
20400e70:	79c7a783          	lw	a5,1948(a5) # 8000079c <metal_segment_heap_target_end+0xfffff31c>
20400e74:	00178713          	addi	a4,a5,1
20400e78:	800007b7          	lui	a5,0x80000
20400e7c:	78e7ae23          	sw	a4,1948(a5) # 8000079c <metal_segment_heap_target_end+0xfffff31c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:190
            break;
20400e80:	a011                	j	20400e84 <main+0x462>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:185
            break;
20400e82:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:138
        if(frontPointer==0) {
20400e84:	b3d1                	j	20400c48 <main+0x226>
/home/alex/Desktop/chipStuff/freedom-e-sdk/software/IIT_example/IIT_example.c:199 (discriminator 1)
    }
    

    
    return 0;
}
20400e86:	853e                	mv	a0,a5
20400e88:	10c12083          	lw	ra,268(sp)
20400e8c:	10812403          	lw	s0,264(sp)
20400e90:	10412483          	lw	s1,260(sp)
20400e94:	6151                	addi	sp,sp,272
20400e96:	8082                	ret

20400e98 <memcpy>:
memcpy():
20400e98:	00a5c7b3          	xor	a5,a1,a0
20400e9c:	8b8d                	andi	a5,a5,3
20400e9e:	00c506b3          	add	a3,a0,a2
20400ea2:	e781                	bnez	a5,20400eaa <memcpy+0x12>
20400ea4:	478d                	li	a5,3
20400ea6:	00c7ee63          	bltu	a5,a2,20400ec2 <memcpy+0x2a>
20400eaa:	87aa                	mv	a5,a0
20400eac:	0ad57863          	bgeu	a0,a3,20400f5c <memcpy+0xc4>
20400eb0:	0005c703          	lbu	a4,0(a1)
20400eb4:	0785                	addi	a5,a5,1
20400eb6:	0585                	addi	a1,a1,1
20400eb8:	fee78fa3          	sb	a4,-1(a5)
20400ebc:	fed7eae3          	bltu	a5,a3,20400eb0 <memcpy+0x18>
20400ec0:	8082                	ret
20400ec2:	00357713          	andi	a4,a0,3
20400ec6:	87aa                	mv	a5,a0
20400ec8:	cb11                	beqz	a4,20400edc <memcpy+0x44>
20400eca:	0005c703          	lbu	a4,0(a1)
20400ece:	0785                	addi	a5,a5,1
20400ed0:	0585                	addi	a1,a1,1
20400ed2:	fee78fa3          	sb	a4,-1(a5)
20400ed6:	0037f713          	andi	a4,a5,3
20400eda:	b7fd                	j	20400ec8 <memcpy+0x30>
20400edc:	ffc6f713          	andi	a4,a3,-4
20400ee0:	fe070613          	addi	a2,a4,-32 # 1fffe0 <__heap_size+0x1ff7e0>
20400ee4:	04c7fb63          	bgeu	a5,a2,20400f3a <memcpy+0xa2>
20400ee8:	0005a383          	lw	t2,0(a1)
20400eec:	0045a283          	lw	t0,4(a1)
20400ef0:	0085af83          	lw	t6,8(a1)
20400ef4:	00c5af03          	lw	t5,12(a1)
20400ef8:	0105ae83          	lw	t4,16(a1)
20400efc:	0145ae03          	lw	t3,20(a1)
20400f00:	0185a303          	lw	t1,24(a1)
20400f04:	01c5a883          	lw	a7,28(a1)
20400f08:	0077a023          	sw	t2,0(a5)
20400f0c:	0057a223          	sw	t0,4(a5)
20400f10:	0205a803          	lw	a6,32(a1)
20400f14:	01f7a423          	sw	t6,8(a5)
20400f18:	01e7a623          	sw	t5,12(a5)
20400f1c:	01d7a823          	sw	t4,16(a5)
20400f20:	01c7aa23          	sw	t3,20(a5)
20400f24:	0067ac23          	sw	t1,24(a5)
20400f28:	0117ae23          	sw	a7,28(a5)
20400f2c:	02458593          	addi	a1,a1,36
20400f30:	02478793          	addi	a5,a5,36
20400f34:	ff07ae23          	sw	a6,-4(a5)
20400f38:	b775                	j	20400ee4 <memcpy+0x4c>
20400f3a:	882e                	mv	a6,a1
20400f3c:	863e                	mv	a2,a5
20400f3e:	02e66063          	bltu	a2,a4,20400f5e <memcpy+0xc6>
20400f42:	ffd78813          	addi	a6,a5,-3
20400f46:	4601                	li	a2,0
20400f48:	01076663          	bltu	a4,a6,20400f54 <memcpy+0xbc>
20400f4c:	070d                	addi	a4,a4,3
20400f4e:	8f1d                	sub	a4,a4,a5
20400f50:	ffc77613          	andi	a2,a4,-4
20400f54:	97b2                	add	a5,a5,a2
20400f56:	95b2                	add	a1,a1,a2
20400f58:	f4d7ece3          	bltu	a5,a3,20400eb0 <memcpy+0x18>
20400f5c:	8082                	ret
20400f5e:	00082883          	lw	a7,0(a6)
20400f62:	0611                	addi	a2,a2,4
20400f64:	0811                	addi	a6,a6,4
20400f66:	ff162e23          	sw	a7,-4(a2)
20400f6a:	bfd1                	j	20400f3e <memcpy+0xa6>

20400f6c <memset>:
memset():
20400f6c:	433d                	li	t1,15
20400f6e:	872a                	mv	a4,a0
20400f70:	02c37363          	bgeu	t1,a2,20400f96 <memset+0x2a>
20400f74:	00f77793          	andi	a5,a4,15
20400f78:	efbd                	bnez	a5,20400ff6 <memset+0x8a>
20400f7a:	e5ad                	bnez	a1,20400fe4 <memset+0x78>
20400f7c:	ff067693          	andi	a3,a2,-16
20400f80:	8a3d                	andi	a2,a2,15
20400f82:	96ba                	add	a3,a3,a4
20400f84:	c30c                	sw	a1,0(a4)
20400f86:	c34c                	sw	a1,4(a4)
20400f88:	c70c                	sw	a1,8(a4)
20400f8a:	c74c                	sw	a1,12(a4)
20400f8c:	0741                	addi	a4,a4,16
20400f8e:	fed76be3          	bltu	a4,a3,20400f84 <memset+0x18>
20400f92:	e211                	bnez	a2,20400f96 <memset+0x2a>
20400f94:	8082                	ret
20400f96:	40c306b3          	sub	a3,t1,a2
20400f9a:	068a                	slli	a3,a3,0x2
20400f9c:	00000297          	auipc	t0,0x0
20400fa0:	9696                	add	a3,a3,t0
20400fa2:	00a68067          	jr	10(a3)
20400fa6:	00b70723          	sb	a1,14(a4)
20400faa:	00b706a3          	sb	a1,13(a4)
20400fae:	00b70623          	sb	a1,12(a4)
20400fb2:	00b705a3          	sb	a1,11(a4)
20400fb6:	00b70523          	sb	a1,10(a4)
20400fba:	00b704a3          	sb	a1,9(a4)
20400fbe:	00b70423          	sb	a1,8(a4)
20400fc2:	00b703a3          	sb	a1,7(a4)
20400fc6:	00b70323          	sb	a1,6(a4)
20400fca:	00b702a3          	sb	a1,5(a4)
20400fce:	00b70223          	sb	a1,4(a4)
20400fd2:	00b701a3          	sb	a1,3(a4)
20400fd6:	00b70123          	sb	a1,2(a4)
20400fda:	00b700a3          	sb	a1,1(a4)
20400fde:	00b70023          	sb	a1,0(a4)
20400fe2:	8082                	ret
20400fe4:	0ff5f593          	andi	a1,a1,255
20400fe8:	00859693          	slli	a3,a1,0x8
20400fec:	8dd5                	or	a1,a1,a3
20400fee:	01059693          	slli	a3,a1,0x10
20400ff2:	8dd5                	or	a1,a1,a3
20400ff4:	b761                	j	20400f7c <memset+0x10>
20400ff6:	00279693          	slli	a3,a5,0x2
20400ffa:	00000297          	auipc	t0,0x0
20400ffe:	9696                	add	a3,a3,t0
20401000:	8286                	mv	t0,ra
20401002:	fa8680e7          	jalr	-88(a3)
20401006:	8096                	mv	ra,t0
20401008:	17c1                	addi	a5,a5,-16
2040100a:	8f1d                	sub	a4,a4,a5
2040100c:	963e                	add	a2,a2,a5
2040100e:	f8c374e3          	bgeu	t1,a2,20400f96 <memset+0x2a>
20401012:	b7a5                	j	20400f7a <memset+0xe>

20401014 <_puts_r>:
_puts_r():
20401014:	1101                	addi	sp,sp,-32
20401016:	ca26                	sw	s1,20(sp)
20401018:	c84a                	sw	s2,16(sp)
2040101a:	ce06                	sw	ra,28(sp)
2040101c:	cc22                	sw	s0,24(sp)
2040101e:	c64e                	sw	s3,12(sp)
20401020:	c452                	sw	s4,8(sp)
20401022:	84aa                	mv	s1,a0
20401024:	892e                	mv	s2,a1
20401026:	c501                	beqz	a0,2040102e <_puts_r+0x1a>
20401028:	4d1c                	lw	a5,24(a0)
2040102a:	e391                	bnez	a5,2040102e <_puts_r+0x1a>
2040102c:	2b89                	jal	2040157e <__sinit>
2040102e:	4c9c                	lw	a5,24(s1)
20401030:	4480                	lw	s0,8(s1)
20401032:	e399                	bnez	a5,20401038 <_puts_r+0x24>
20401034:	8526                	mv	a0,s1
20401036:	23a1                	jal	2040157e <__sinit>
20401038:	fffff797          	auipc	a5,0xfffff
2040103c:	5f878793          	addi	a5,a5,1528 # 20400630 <__sf_fake_stdin>
20401040:	02f41c63          	bne	s0,a5,20401078 <_puts_r+0x64>
20401044:	40c0                	lw	s0,4(s1)
20401046:	00c45783          	lhu	a5,12(s0)
2040104a:	8ba1                	andi	a5,a5,8
2040104c:	c7b1                	beqz	a5,20401098 <_puts_r+0x84>
2040104e:	481c                	lw	a5,16(s0)
20401050:	c7a1                	beqz	a5,20401098 <_puts_r+0x84>
20401052:	59fd                	li	s3,-1
20401054:	4a29                	li	s4,10
20401056:	441c                	lw	a5,8(s0)
20401058:	00094583          	lbu	a1,0(s2)
2040105c:	17fd                	addi	a5,a5,-1
2040105e:	e9b1                	bnez	a1,204010b2 <_puts_r+0x9e>
20401060:	c41c                	sw	a5,8(s0)
20401062:	0607de63          	bgez	a5,204010de <_puts_r+0xca>
20401066:	8622                	mv	a2,s0
20401068:	45a9                	li	a1,10
2040106a:	8526                	mv	a0,s1
2040106c:	20e5                	jal	20401154 <__swbuf_r>
2040106e:	57fd                	li	a5,-1
20401070:	02f50863          	beq	a0,a5,204010a0 <_puts_r+0x8c>
20401074:	4529                	li	a0,10
20401076:	a035                	j	204010a2 <_puts_r+0x8e>
20401078:	fffff797          	auipc	a5,0xfffff
2040107c:	5d878793          	addi	a5,a5,1496 # 20400650 <__sf_fake_stdout>
20401080:	00f41463          	bne	s0,a5,20401088 <_puts_r+0x74>
20401084:	4480                	lw	s0,8(s1)
20401086:	b7c1                	j	20401046 <_puts_r+0x32>
20401088:	fffff797          	auipc	a5,0xfffff
2040108c:	58878793          	addi	a5,a5,1416 # 20400610 <__sf_fake_stderr>
20401090:	faf41be3          	bne	s0,a5,20401046 <_puts_r+0x32>
20401094:	44c0                	lw	s0,12(s1)
20401096:	bf45                	j	20401046 <_puts_r+0x32>
20401098:	85a2                	mv	a1,s0
2040109a:	8526                	mv	a0,s1
2040109c:	2aa5                	jal	20401214 <__swsetup_r>
2040109e:	d955                	beqz	a0,20401052 <_puts_r+0x3e>
204010a0:	557d                	li	a0,-1
204010a2:	40f2                	lw	ra,28(sp)
204010a4:	4462                	lw	s0,24(sp)
204010a6:	44d2                	lw	s1,20(sp)
204010a8:	4942                	lw	s2,16(sp)
204010aa:	49b2                	lw	s3,12(sp)
204010ac:	4a22                	lw	s4,8(sp)
204010ae:	6105                	addi	sp,sp,32
204010b0:	8082                	ret
204010b2:	c41c                	sw	a5,8(s0)
204010b4:	0905                	addi	s2,s2,1
204010b6:	0007d763          	bgez	a5,204010c4 <_puts_r+0xb0>
204010ba:	4c18                	lw	a4,24(s0)
204010bc:	00e7cb63          	blt	a5,a4,204010d2 <_puts_r+0xbe>
204010c0:	01458963          	beq	a1,s4,204010d2 <_puts_r+0xbe>
204010c4:	401c                	lw	a5,0(s0)
204010c6:	00178713          	addi	a4,a5,1
204010ca:	c018                	sw	a4,0(s0)
204010cc:	00b78023          	sb	a1,0(a5)
204010d0:	b759                	j	20401056 <_puts_r+0x42>
204010d2:	8622                	mv	a2,s0
204010d4:	8526                	mv	a0,s1
204010d6:	28bd                	jal	20401154 <__swbuf_r>
204010d8:	f7351fe3          	bne	a0,s3,20401056 <_puts_r+0x42>
204010dc:	b7d1                	j	204010a0 <_puts_r+0x8c>
204010de:	401c                	lw	a5,0(s0)
204010e0:	00178713          	addi	a4,a5,1
204010e4:	c018                	sw	a4,0(s0)
204010e6:	4729                	li	a4,10
204010e8:	00e78023          	sb	a4,0(a5)
204010ec:	b761                	j	20401074 <_puts_r+0x60>

204010ee <puts>:
puts():
204010ee:	85aa                	mv	a1,a0
204010f0:	5fbff517          	auipc	a0,0x5fbff
204010f4:	67452503          	lw	a0,1652(a0) # 80000764 <_impure_ptr>
204010f8:	bf31                	j	20401014 <_puts_r>

204010fa <strchr>:
strchr():
204010fa:	0ff5f593          	andi	a1,a1,255
204010fe:	00054783          	lbu	a5,0(a0)
20401102:	c791                	beqz	a5,2040110e <strchr+0x14>
20401104:	00b79363          	bne	a5,a1,2040110a <strchr+0x10>
20401108:	8082                	ret
2040110a:	0505                	addi	a0,a0,1
2040110c:	bfcd                	j	204010fe <strchr+0x4>
2040110e:	c191                	beqz	a1,20401112 <strchr+0x18>
20401110:	4501                	li	a0,0
20401112:	8082                	ret

20401114 <strlen>:
strlen():
20401114:	87aa                	mv	a5,a0
20401116:	0007c703          	lbu	a4,0(a5)
2040111a:	0785                	addi	a5,a5,1
2040111c:	ff6d                	bnez	a4,20401116 <strlen+0x2>
2040111e:	40a78533          	sub	a0,a5,a0
20401122:	157d                	addi	a0,a0,-1
20401124:	8082                	ret

20401126 <strncmp>:
strncmp():
20401126:	c60d                	beqz	a2,20401150 <strncmp+0x2a>
20401128:	167d                	addi	a2,a2,-1
2040112a:	4701                	li	a4,0
2040112c:	00e507b3          	add	a5,a0,a4
20401130:	00e586b3          	add	a3,a1,a4
20401134:	0007c783          	lbu	a5,0(a5)
20401138:	0006c683          	lbu	a3,0(a3)
2040113c:	00d79463          	bne	a5,a3,20401144 <strncmp+0x1e>
20401140:	00c71563          	bne	a4,a2,2040114a <strncmp+0x24>
20401144:	40d78533          	sub	a0,a5,a3
20401148:	8082                	ret
2040114a:	0705                	addi	a4,a4,1
2040114c:	f3e5                	bnez	a5,2040112c <strncmp+0x6>
2040114e:	bfdd                	j	20401144 <strncmp+0x1e>
20401150:	4501                	li	a0,0
20401152:	8082                	ret

20401154 <__swbuf_r>:
__swbuf_r():
20401154:	1101                	addi	sp,sp,-32
20401156:	cc22                	sw	s0,24(sp)
20401158:	ca26                	sw	s1,20(sp)
2040115a:	c84a                	sw	s2,16(sp)
2040115c:	ce06                	sw	ra,28(sp)
2040115e:	c64e                	sw	s3,12(sp)
20401160:	84aa                	mv	s1,a0
20401162:	892e                	mv	s2,a1
20401164:	8432                	mv	s0,a2
20401166:	c501                	beqz	a0,2040116e <__swbuf_r+0x1a>
20401168:	4d1c                	lw	a5,24(a0)
2040116a:	e391                	bnez	a5,2040116e <__swbuf_r+0x1a>
2040116c:	2909                	jal	2040157e <__sinit>
2040116e:	fffff797          	auipc	a5,0xfffff
20401172:	4c278793          	addi	a5,a5,1218 # 20400630 <__sf_fake_stdin>
20401176:	06f41963          	bne	s0,a5,204011e8 <__swbuf_r+0x94>
2040117a:	40c0                	lw	s0,4(s1)
2040117c:	4c1c                	lw	a5,24(s0)
2040117e:	c41c                	sw	a5,8(s0)
20401180:	00c45783          	lhu	a5,12(s0)
20401184:	8ba1                	andi	a5,a5,8
20401186:	c3c9                	beqz	a5,20401208 <__swbuf_r+0xb4>
20401188:	481c                	lw	a5,16(s0)
2040118a:	cfbd                	beqz	a5,20401208 <__swbuf_r+0xb4>
2040118c:	481c                	lw	a5,16(s0)
2040118e:	4008                	lw	a0,0(s0)
20401190:	0ff97993          	andi	s3,s2,255
20401194:	0ff97913          	andi	s2,s2,255
20401198:	8d1d                	sub	a0,a0,a5
2040119a:	485c                	lw	a5,20(s0)
2040119c:	00f54663          	blt	a0,a5,204011a8 <__swbuf_r+0x54>
204011a0:	85a2                	mv	a1,s0
204011a2:	8526                	mv	a0,s1
204011a4:	24c1                	jal	20401464 <_fflush_r>
204011a6:	e52d                	bnez	a0,20401210 <__swbuf_r+0xbc>
204011a8:	441c                	lw	a5,8(s0)
204011aa:	0505                	addi	a0,a0,1
204011ac:	17fd                	addi	a5,a5,-1
204011ae:	c41c                	sw	a5,8(s0)
204011b0:	401c                	lw	a5,0(s0)
204011b2:	00178713          	addi	a4,a5,1
204011b6:	c018                	sw	a4,0(s0)
204011b8:	01378023          	sb	s3,0(a5)
204011bc:	485c                	lw	a5,20(s0)
204011be:	00a78963          	beq	a5,a0,204011d0 <__swbuf_r+0x7c>
204011c2:	00c45783          	lhu	a5,12(s0)
204011c6:	8b85                	andi	a5,a5,1
204011c8:	cb81                	beqz	a5,204011d8 <__swbuf_r+0x84>
204011ca:	47a9                	li	a5,10
204011cc:	00f91663          	bne	s2,a5,204011d8 <__swbuf_r+0x84>
204011d0:	85a2                	mv	a1,s0
204011d2:	8526                	mv	a0,s1
204011d4:	2c41                	jal	20401464 <_fflush_r>
204011d6:	ed0d                	bnez	a0,20401210 <__swbuf_r+0xbc>
204011d8:	40f2                	lw	ra,28(sp)
204011da:	4462                	lw	s0,24(sp)
204011dc:	44d2                	lw	s1,20(sp)
204011de:	49b2                	lw	s3,12(sp)
204011e0:	854a                	mv	a0,s2
204011e2:	4942                	lw	s2,16(sp)
204011e4:	6105                	addi	sp,sp,32
204011e6:	8082                	ret
204011e8:	fffff797          	auipc	a5,0xfffff
204011ec:	46878793          	addi	a5,a5,1128 # 20400650 <__sf_fake_stdout>
204011f0:	00f41463          	bne	s0,a5,204011f8 <__swbuf_r+0xa4>
204011f4:	4480                	lw	s0,8(s1)
204011f6:	b759                	j	2040117c <__swbuf_r+0x28>
204011f8:	fffff797          	auipc	a5,0xfffff
204011fc:	41878793          	addi	a5,a5,1048 # 20400610 <__sf_fake_stderr>
20401200:	f6f41ee3          	bne	s0,a5,2040117c <__swbuf_r+0x28>
20401204:	44c0                	lw	s0,12(s1)
20401206:	bf9d                	j	2040117c <__swbuf_r+0x28>
20401208:	85a2                	mv	a1,s0
2040120a:	8526                	mv	a0,s1
2040120c:	2021                	jal	20401214 <__swsetup_r>
2040120e:	dd3d                	beqz	a0,2040118c <__swbuf_r+0x38>
20401210:	597d                	li	s2,-1
20401212:	b7d9                	j	204011d8 <__swbuf_r+0x84>

20401214 <__swsetup_r>:
__swsetup_r():
20401214:	1141                	addi	sp,sp,-16
20401216:	c422                	sw	s0,8(sp)
20401218:	c226                	sw	s1,4(sp)
2040121a:	c04a                	sw	s2,0(sp)
2040121c:	c606                	sw	ra,12(sp)
2040121e:	5fbff497          	auipc	s1,0x5fbff
20401222:	5464a483          	lw	s1,1350(s1) # 80000764 <_impure_ptr>
20401226:	892a                	mv	s2,a0
20401228:	842e                	mv	s0,a1
2040122a:	c489                	beqz	s1,20401234 <__swsetup_r+0x20>
2040122c:	4c9c                	lw	a5,24(s1)
2040122e:	e399                	bnez	a5,20401234 <__swsetup_r+0x20>
20401230:	8526                	mv	a0,s1
20401232:	26b1                	jal	2040157e <__sinit>
20401234:	fffff797          	auipc	a5,0xfffff
20401238:	3fc78793          	addi	a5,a5,1020 # 20400630 <__sf_fake_stdin>
2040123c:	02f41763          	bne	s0,a5,2040126a <__swsetup_r+0x56>
20401240:	40c0                	lw	s0,4(s1)
20401242:	00c41783          	lh	a5,12(s0)
20401246:	01079713          	slli	a4,a5,0x10
2040124a:	0087f693          	andi	a3,a5,8
2040124e:	8341                	srli	a4,a4,0x10
20401250:	eaad                	bnez	a3,204012c2 <__swsetup_r+0xae>
20401252:	01077693          	andi	a3,a4,16
20401256:	ea95                	bnez	a3,2040128a <__swsetup_r+0x76>
20401258:	4725                	li	a4,9
2040125a:	00e92023          	sw	a4,0(s2)
2040125e:	0407e793          	ori	a5,a5,64
20401262:	00f41623          	sh	a5,12(s0)
20401266:	557d                	li	a0,-1
20401268:	a871                	j	20401304 <__swsetup_r+0xf0>
2040126a:	fffff797          	auipc	a5,0xfffff
2040126e:	3e678793          	addi	a5,a5,998 # 20400650 <__sf_fake_stdout>
20401272:	00f41463          	bne	s0,a5,2040127a <__swsetup_r+0x66>
20401276:	4480                	lw	s0,8(s1)
20401278:	b7e9                	j	20401242 <__swsetup_r+0x2e>
2040127a:	fffff797          	auipc	a5,0xfffff
2040127e:	39678793          	addi	a5,a5,918 # 20400610 <__sf_fake_stderr>
20401282:	fcf410e3          	bne	s0,a5,20401242 <__swsetup_r+0x2e>
20401286:	44c0                	lw	s0,12(s1)
20401288:	bf6d                	j	20401242 <__swsetup_r+0x2e>
2040128a:	8b11                	andi	a4,a4,4
2040128c:	c70d                	beqz	a4,204012b6 <__swsetup_r+0xa2>
2040128e:	584c                	lw	a1,52(s0)
20401290:	c989                	beqz	a1,204012a2 <__swsetup_r+0x8e>
20401292:	04440793          	addi	a5,s0,68
20401296:	00f58463          	beq	a1,a5,2040129e <__swsetup_r+0x8a>
2040129a:	854a                	mv	a0,s2
2040129c:	23a9                	jal	204017e6 <_free_r>
2040129e:	02042a23          	sw	zero,52(s0)
204012a2:	00c45783          	lhu	a5,12(s0)
204012a6:	00042223          	sw	zero,4(s0)
204012aa:	fdb7f793          	andi	a5,a5,-37
204012ae:	00f41623          	sh	a5,12(s0)
204012b2:	481c                	lw	a5,16(s0)
204012b4:	c01c                	sw	a5,0(s0)
204012b6:	00c45783          	lhu	a5,12(s0)
204012ba:	0087e793          	ori	a5,a5,8
204012be:	00f41623          	sh	a5,12(s0)
204012c2:	481c                	lw	a5,16(s0)
204012c4:	ef81                	bnez	a5,204012dc <__swsetup_r+0xc8>
204012c6:	00c45783          	lhu	a5,12(s0)
204012ca:	20000713          	li	a4,512
204012ce:	2807f793          	andi	a5,a5,640
204012d2:	00e78563          	beq	a5,a4,204012dc <__swsetup_r+0xc8>
204012d6:	85a2                	mv	a1,s0
204012d8:	854a                	mv	a0,s2
204012da:	2985                	jal	2040174a <__smakebuf_r>
204012dc:	00c41783          	lh	a5,12(s0)
204012e0:	01079713          	slli	a4,a5,0x10
204012e4:	0017f693          	andi	a3,a5,1
204012e8:	8341                	srli	a4,a4,0x10
204012ea:	c29d                	beqz	a3,20401310 <__swsetup_r+0xfc>
204012ec:	4854                	lw	a3,20(s0)
204012ee:	00042423          	sw	zero,8(s0)
204012f2:	40d006b3          	neg	a3,a3
204012f6:	cc14                	sw	a3,24(s0)
204012f8:	4814                	lw	a3,16(s0)
204012fa:	4501                	li	a0,0
204012fc:	e681                	bnez	a3,20401304 <__swsetup_r+0xf0>
204012fe:	08077713          	andi	a4,a4,128
20401302:	ff31                	bnez	a4,2040125e <__swsetup_r+0x4a>
20401304:	40b2                	lw	ra,12(sp)
20401306:	4422                	lw	s0,8(sp)
20401308:	4492                	lw	s1,4(sp)
2040130a:	4902                	lw	s2,0(sp)
2040130c:	0141                	addi	sp,sp,16
2040130e:	8082                	ret
20401310:	00277693          	andi	a3,a4,2
20401314:	4601                	li	a2,0
20401316:	e291                	bnez	a3,2040131a <__swsetup_r+0x106>
20401318:	4850                	lw	a2,20(s0)
2040131a:	c410                	sw	a2,8(s0)
2040131c:	bff1                	j	204012f8 <__swsetup_r+0xe4>

2040131e <__sflush_r>:
__sflush_r():
2040131e:	00c5d783          	lhu	a5,12(a1)
20401322:	1101                	addi	sp,sp,-32
20401324:	cc22                	sw	s0,24(sp)
20401326:	ca26                	sw	s1,20(sp)
20401328:	ce06                	sw	ra,28(sp)
2040132a:	c84a                	sw	s2,16(sp)
2040132c:	c64e                	sw	s3,12(sp)
2040132e:	0087f713          	andi	a4,a5,8
20401332:	84aa                	mv	s1,a0
20401334:	842e                	mv	s0,a1
20401336:	e375                	bnez	a4,2040141a <__sflush_r+0xfc>
20401338:	41d8                	lw	a4,4(a1)
2040133a:	00e04763          	bgtz	a4,20401348 <__sflush_r+0x2a>
2040133e:	41b8                	lw	a4,64(a1)
20401340:	00e04463          	bgtz	a4,20401348 <__sflush_r+0x2a>
20401344:	4501                	li	a0,0
20401346:	a875                	j	20401402 <__sflush_r+0xe4>
20401348:	5458                	lw	a4,44(s0)
2040134a:	df6d                	beqz	a4,20401344 <__sflush_r+0x26>
2040134c:	6685                	lui	a3,0x1
2040134e:	0004a903          	lw	s2,0(s1)
20401352:	8ff5                	and	a5,a5,a3
20401354:	0004a023          	sw	zero,0(s1)
20401358:	cfa5                	beqz	a5,204013d0 <__sflush_r+0xb2>
2040135a:	4868                	lw	a0,84(s0)
2040135c:	00c45783          	lhu	a5,12(s0)
20401360:	8b91                	andi	a5,a5,4
20401362:	c799                	beqz	a5,20401370 <__sflush_r+0x52>
20401364:	405c                	lw	a5,4(s0)
20401366:	8d1d                	sub	a0,a0,a5
20401368:	585c                	lw	a5,52(s0)
2040136a:	c399                	beqz	a5,20401370 <__sflush_r+0x52>
2040136c:	403c                	lw	a5,64(s0)
2040136e:	8d1d                	sub	a0,a0,a5
20401370:	545c                	lw	a5,44(s0)
20401372:	500c                	lw	a1,32(s0)
20401374:	862a                	mv	a2,a0
20401376:	4681                	li	a3,0
20401378:	8526                	mv	a0,s1
2040137a:	9782                	jalr	a5
2040137c:	57fd                	li	a5,-1
2040137e:	00c45703          	lhu	a4,12(s0)
20401382:	00f51d63          	bne	a0,a5,2040139c <__sflush_r+0x7e>
20401386:	4094                	lw	a3,0(s1)
20401388:	47f5                	li	a5,29
2040138a:	08d7e363          	bltu	a5,a3,20401410 <__sflush_r+0xf2>
2040138e:	204007b7          	lui	a5,0x20400
20401392:	0785                	addi	a5,a5,1
20401394:	00d7d7b3          	srl	a5,a5,a3
20401398:	8b85                	andi	a5,a5,1
2040139a:	cbbd                	beqz	a5,20401410 <__sflush_r+0xf2>
2040139c:	481c                	lw	a5,16(s0)
2040139e:	00042223          	sw	zero,4(s0)
204013a2:	c01c                	sw	a5,0(s0)
204013a4:	6785                	lui	a5,0x1
204013a6:	8f7d                	and	a4,a4,a5
204013a8:	c719                	beqz	a4,204013b6 <__sflush_r+0x98>
204013aa:	57fd                	li	a5,-1
204013ac:	00f51463          	bne	a0,a5,204013b4 <__sflush_r+0x96>
204013b0:	409c                	lw	a5,0(s1)
204013b2:	e391                	bnez	a5,204013b6 <__sflush_r+0x98>
204013b4:	c868                	sw	a0,84(s0)
204013b6:	584c                	lw	a1,52(s0)
204013b8:	0124a023          	sw	s2,0(s1)
204013bc:	d5c1                	beqz	a1,20401344 <__sflush_r+0x26>
204013be:	04440793          	addi	a5,s0,68
204013c2:	00f58463          	beq	a1,a5,204013ca <__sflush_r+0xac>
204013c6:	8526                	mv	a0,s1
204013c8:	2939                	jal	204017e6 <_free_r>
204013ca:	02042a23          	sw	zero,52(s0)
204013ce:	bf9d                	j	20401344 <__sflush_r+0x26>
204013d0:	500c                	lw	a1,32(s0)
204013d2:	4685                	li	a3,1
204013d4:	4601                	li	a2,0
204013d6:	8526                	mv	a0,s1
204013d8:	9702                	jalr	a4
204013da:	57fd                	li	a5,-1
204013dc:	f8f510e3          	bne	a0,a5,2040135c <__sflush_r+0x3e>
204013e0:	409c                	lw	a5,0(s1)
204013e2:	dfad                	beqz	a5,2040135c <__sflush_r+0x3e>
204013e4:	4775                	li	a4,29
204013e6:	00e78563          	beq	a5,a4,204013f0 <__sflush_r+0xd2>
204013ea:	4759                	li	a4,22
204013ec:	00e79563          	bne	a5,a4,204013f6 <__sflush_r+0xd8>
204013f0:	0124a023          	sw	s2,0(s1)
204013f4:	bf81                	j	20401344 <__sflush_r+0x26>
204013f6:	00c45783          	lhu	a5,12(s0)
204013fa:	0407e793          	ori	a5,a5,64
204013fe:	00f41623          	sh	a5,12(s0)
20401402:	40f2                	lw	ra,28(sp)
20401404:	4462                	lw	s0,24(sp)
20401406:	44d2                	lw	s1,20(sp)
20401408:	4942                	lw	s2,16(sp)
2040140a:	49b2                	lw	s3,12(sp)
2040140c:	6105                	addi	sp,sp,32
2040140e:	8082                	ret
20401410:	04076713          	ori	a4,a4,64
20401414:	00e41623          	sh	a4,12(s0)
20401418:	b7ed                	j	20401402 <__sflush_r+0xe4>
2040141a:	0105a983          	lw	s3,16(a1)
2040141e:	f20983e3          	beqz	s3,20401344 <__sflush_r+0x26>
20401422:	0005a903          	lw	s2,0(a1)
20401426:	8b8d                	andi	a5,a5,3
20401428:	0135a023          	sw	s3,0(a1)
2040142c:	41390933          	sub	s2,s2,s3
20401430:	4701                	li	a4,0
20401432:	e391                	bnez	a5,20401436 <__sflush_r+0x118>
20401434:	49d8                	lw	a4,20(a1)
20401436:	c418                	sw	a4,8(s0)
20401438:	f12056e3          	blez	s2,20401344 <__sflush_r+0x26>
2040143c:	541c                	lw	a5,40(s0)
2040143e:	500c                	lw	a1,32(s0)
20401440:	86ca                	mv	a3,s2
20401442:	864e                	mv	a2,s3
20401444:	8526                	mv	a0,s1
20401446:	9782                	jalr	a5
20401448:	00a04a63          	bgtz	a0,2040145c <__sflush_r+0x13e>
2040144c:	00c45783          	lhu	a5,12(s0)
20401450:	557d                	li	a0,-1
20401452:	0407e793          	ori	a5,a5,64
20401456:	00f41623          	sh	a5,12(s0)
2040145a:	b765                	j	20401402 <__sflush_r+0xe4>
2040145c:	99aa                	add	s3,s3,a0
2040145e:	40a90933          	sub	s2,s2,a0
20401462:	bfd9                	j	20401438 <__sflush_r+0x11a>

20401464 <_fflush_r>:
_fflush_r():
20401464:	499c                	lw	a5,16(a1)
20401466:	cfb9                	beqz	a5,204014c4 <_fflush_r+0x60>
20401468:	1101                	addi	sp,sp,-32
2040146a:	cc22                	sw	s0,24(sp)
2040146c:	ce06                	sw	ra,28(sp)
2040146e:	842a                	mv	s0,a0
20401470:	c511                	beqz	a0,2040147c <_fflush_r+0x18>
20401472:	4d1c                	lw	a5,24(a0)
20401474:	e781                	bnez	a5,2040147c <_fflush_r+0x18>
20401476:	c62e                	sw	a1,12(sp)
20401478:	2219                	jal	2040157e <__sinit>
2040147a:	45b2                	lw	a1,12(sp)
2040147c:	fffff797          	auipc	a5,0xfffff
20401480:	1b478793          	addi	a5,a5,436 # 20400630 <__sf_fake_stdin>
20401484:	00f59b63          	bne	a1,a5,2040149a <_fflush_r+0x36>
20401488:	404c                	lw	a1,4(s0)
2040148a:	00c59783          	lh	a5,12(a1)
2040148e:	c795                	beqz	a5,204014ba <_fflush_r+0x56>
20401490:	8522                	mv	a0,s0
20401492:	4462                	lw	s0,24(sp)
20401494:	40f2                	lw	ra,28(sp)
20401496:	6105                	addi	sp,sp,32
20401498:	b559                	j	2040131e <__sflush_r>
2040149a:	fffff797          	auipc	a5,0xfffff
2040149e:	1b678793          	addi	a5,a5,438 # 20400650 <__sf_fake_stdout>
204014a2:	00f59463          	bne	a1,a5,204014aa <_fflush_r+0x46>
204014a6:	440c                	lw	a1,8(s0)
204014a8:	b7cd                	j	2040148a <_fflush_r+0x26>
204014aa:	fffff797          	auipc	a5,0xfffff
204014ae:	16678793          	addi	a5,a5,358 # 20400610 <__sf_fake_stderr>
204014b2:	fcf59ce3          	bne	a1,a5,2040148a <_fflush_r+0x26>
204014b6:	444c                	lw	a1,12(s0)
204014b8:	bfc9                	j	2040148a <_fflush_r+0x26>
204014ba:	40f2                	lw	ra,28(sp)
204014bc:	4462                	lw	s0,24(sp)
204014be:	4501                	li	a0,0
204014c0:	6105                	addi	sp,sp,32
204014c2:	8082                	ret
204014c4:	4501                	li	a0,0
204014c6:	8082                	ret

204014c8 <std>:
std():
204014c8:	1141                	addi	sp,sp,-16
204014ca:	c422                	sw	s0,8(sp)
204014cc:	c606                	sw	ra,12(sp)
204014ce:	842a                	mv	s0,a0
204014d0:	00b51623          	sh	a1,12(a0)
204014d4:	00c51723          	sh	a2,14(a0)
204014d8:	00052023          	sw	zero,0(a0)
204014dc:	00052223          	sw	zero,4(a0)
204014e0:	00052423          	sw	zero,8(a0)
204014e4:	06052223          	sw	zero,100(a0)
204014e8:	00052823          	sw	zero,16(a0)
204014ec:	00052a23          	sw	zero,20(a0)
204014f0:	00052c23          	sw	zero,24(a0)
204014f4:	4621                	li	a2,8
204014f6:	4581                	li	a1,0
204014f8:	05c50513          	addi	a0,a0,92
204014fc:	3c85                	jal	20400f6c <memset>
204014fe:	00000797          	auipc	a5,0x0
20401502:	49278793          	addi	a5,a5,1170 # 20401990 <__sread>
20401506:	d05c                	sw	a5,36(s0)
20401508:	00000797          	auipc	a5,0x0
2040150c:	4b878793          	addi	a5,a5,1208 # 204019c0 <__swrite>
20401510:	d41c                	sw	a5,40(s0)
20401512:	00000797          	auipc	a5,0x0
20401516:	4fc78793          	addi	a5,a5,1276 # 20401a0e <__sseek>
2040151a:	d45c                	sw	a5,44(s0)
2040151c:	00000797          	auipc	a5,0x0
20401520:	52878793          	addi	a5,a5,1320 # 20401a44 <__sclose>
20401524:	40b2                	lw	ra,12(sp)
20401526:	d000                	sw	s0,32(s0)
20401528:	d81c                	sw	a5,48(s0)
2040152a:	4422                	lw	s0,8(sp)
2040152c:	0141                	addi	sp,sp,16
2040152e:	8082                	ret

20401530 <_cleanup_r>:
_cleanup_r():
20401530:	00000597          	auipc	a1,0x0
20401534:	f3458593          	addi	a1,a1,-204 # 20401464 <_fflush_r>
20401538:	a2b9                	j	20401686 <_fwalk_reent>

2040153a <__sfmoreglue>:
__sfmoreglue():
2040153a:	1141                	addi	sp,sp,-16
2040153c:	c226                	sw	s1,4(sp)
2040153e:	06800613          	li	a2,104
20401542:	fff58493          	addi	s1,a1,-1
20401546:	02c484b3          	mul	s1,s1,a2
2040154a:	c04a                	sw	s2,0(sp)
2040154c:	892e                	mv	s2,a1
2040154e:	c422                	sw	s0,8(sp)
20401550:	c606                	sw	ra,12(sp)
20401552:	07448593          	addi	a1,s1,116
20401556:	2e0d                	jal	20401888 <_malloc_r>
20401558:	842a                	mv	s0,a0
2040155a:	c919                	beqz	a0,20401570 <__sfmoreglue+0x36>
2040155c:	00052023          	sw	zero,0(a0)
20401560:	01252223          	sw	s2,4(a0)
20401564:	0531                	addi	a0,a0,12
20401566:	c408                	sw	a0,8(s0)
20401568:	06848613          	addi	a2,s1,104
2040156c:	4581                	li	a1,0
2040156e:	3afd                	jal	20400f6c <memset>
20401570:	40b2                	lw	ra,12(sp)
20401572:	8522                	mv	a0,s0
20401574:	4422                	lw	s0,8(sp)
20401576:	4492                	lw	s1,4(sp)
20401578:	4902                	lw	s2,0(sp)
2040157a:	0141                	addi	sp,sp,16
2040157c:	8082                	ret

2040157e <__sinit>:
__sinit():
2040157e:	4d1c                	lw	a5,24(a0)
20401580:	e3bd                	bnez	a5,204015e6 <__sinit+0x68>
20401582:	1141                	addi	sp,sp,-16
20401584:	c422                	sw	s0,8(sp)
20401586:	c606                	sw	ra,12(sp)
20401588:	00000797          	auipc	a5,0x0
2040158c:	fa878793          	addi	a5,a5,-88 # 20401530 <_cleanup_r>
20401590:	d51c                	sw	a5,40(a0)
20401592:	04052423          	sw	zero,72(a0)
20401596:	04052623          	sw	zero,76(a0)
2040159a:	04052823          	sw	zero,80(a0)
2040159e:	fffff797          	auipc	a5,0xfffff
204015a2:	3927a783          	lw	a5,914(a5) # 20400930 <_global_impure_ptr>
204015a6:	842a                	mv	s0,a0
204015a8:	00f51463          	bne	a0,a5,204015b0 <__sinit+0x32>
204015ac:	4785                	li	a5,1
204015ae:	cd1c                	sw	a5,24(a0)
204015b0:	8522                	mv	a0,s0
204015b2:	281d                	jal	204015e8 <__sfp>
204015b4:	c048                	sw	a0,4(s0)
204015b6:	8522                	mv	a0,s0
204015b8:	2805                	jal	204015e8 <__sfp>
204015ba:	c408                	sw	a0,8(s0)
204015bc:	8522                	mv	a0,s0
204015be:	202d                	jal	204015e8 <__sfp>
204015c0:	c448                	sw	a0,12(s0)
204015c2:	4048                	lw	a0,4(s0)
204015c4:	4601                	li	a2,0
204015c6:	4591                	li	a1,4
204015c8:	3701                	jal	204014c8 <std>
204015ca:	4408                	lw	a0,8(s0)
204015cc:	4605                	li	a2,1
204015ce:	45a5                	li	a1,9
204015d0:	3de5                	jal	204014c8 <std>
204015d2:	4448                	lw	a0,12(s0)
204015d4:	4609                	li	a2,2
204015d6:	45c9                	li	a1,18
204015d8:	3dc5                	jal	204014c8 <std>
204015da:	4785                	li	a5,1
204015dc:	40b2                	lw	ra,12(sp)
204015de:	cc1c                	sw	a5,24(s0)
204015e0:	4422                	lw	s0,8(sp)
204015e2:	0141                	addi	sp,sp,16
204015e4:	8082                	ret
204015e6:	8082                	ret

204015e8 <__sfp>:
__sfp():
204015e8:	1141                	addi	sp,sp,-16
204015ea:	c226                	sw	s1,4(sp)
204015ec:	fffff497          	auipc	s1,0xfffff
204015f0:	3444a483          	lw	s1,836(s1) # 20400930 <_global_impure_ptr>
204015f4:	4c9c                	lw	a5,24(s1)
204015f6:	c04a                	sw	s2,0(sp)
204015f8:	c606                	sw	ra,12(sp)
204015fa:	c422                	sw	s0,8(sp)
204015fc:	892a                	mv	s2,a0
204015fe:	e399                	bnez	a5,20401604 <__sfp+0x1c>
20401600:	8526                	mv	a0,s1
20401602:	3fb5                	jal	2040157e <__sinit>
20401604:	04848493          	addi	s1,s1,72
20401608:	4480                	lw	s0,8(s1)
2040160a:	40dc                	lw	a5,4(s1)
2040160c:	17fd                	addi	a5,a5,-1
2040160e:	0007d663          	bgez	a5,2040161a <__sfp+0x32>
20401612:	409c                	lw	a5,0(s1)
20401614:	cfb9                	beqz	a5,20401672 <__sfp+0x8a>
20401616:	4084                	lw	s1,0(s1)
20401618:	bfc5                	j	20401608 <__sfp+0x20>
2040161a:	00c41703          	lh	a4,12(s0)
2040161e:	e739                	bnez	a4,2040166c <__sfp+0x84>
20401620:	77c1                	lui	a5,0xffff0
20401622:	0785                	addi	a5,a5,1
20401624:	06042223          	sw	zero,100(s0)
20401628:	00042023          	sw	zero,0(s0)
2040162c:	00042223          	sw	zero,4(s0)
20401630:	00042423          	sw	zero,8(s0)
20401634:	c45c                	sw	a5,12(s0)
20401636:	00042823          	sw	zero,16(s0)
2040163a:	00042a23          	sw	zero,20(s0)
2040163e:	00042c23          	sw	zero,24(s0)
20401642:	4621                	li	a2,8
20401644:	4581                	li	a1,0
20401646:	05c40513          	addi	a0,s0,92
2040164a:	923ff0ef          	jal	ra,20400f6c <memset>
2040164e:	02042a23          	sw	zero,52(s0)
20401652:	02042c23          	sw	zero,56(s0)
20401656:	04042423          	sw	zero,72(s0)
2040165a:	04042623          	sw	zero,76(s0)
2040165e:	40b2                	lw	ra,12(sp)
20401660:	8522                	mv	a0,s0
20401662:	4422                	lw	s0,8(sp)
20401664:	4492                	lw	s1,4(sp)
20401666:	4902                	lw	s2,0(sp)
20401668:	0141                	addi	sp,sp,16
2040166a:	8082                	ret
2040166c:	06840413          	addi	s0,s0,104
20401670:	bf71                	j	2040160c <__sfp+0x24>
20401672:	4591                	li	a1,4
20401674:	854a                	mv	a0,s2
20401676:	35d1                	jal	2040153a <__sfmoreglue>
20401678:	c088                	sw	a0,0(s1)
2040167a:	842a                	mv	s0,a0
2040167c:	fd49                	bnez	a0,20401616 <__sfp+0x2e>
2040167e:	47b1                	li	a5,12
20401680:	00f92023          	sw	a5,0(s2)
20401684:	bfe9                	j	2040165e <__sfp+0x76>

20401686 <_fwalk_reent>:
_fwalk_reent():
20401686:	7179                	addi	sp,sp,-48
20401688:	d422                	sw	s0,40(sp)
2040168a:	d04a                	sw	s2,32(sp)
2040168c:	ce4e                	sw	s3,28(sp)
2040168e:	cc52                	sw	s4,24(sp)
20401690:	c85a                	sw	s6,16(sp)
20401692:	c65e                	sw	s7,12(sp)
20401694:	d606                	sw	ra,44(sp)
20401696:	d226                	sw	s1,36(sp)
20401698:	ca56                	sw	s5,20(sp)
2040169a:	892a                	mv	s2,a0
2040169c:	8a2e                	mv	s4,a1
2040169e:	04850413          	addi	s0,a0,72
204016a2:	4981                	li	s3,0
204016a4:	4b05                	li	s6,1
204016a6:	5bfd                	li	s7,-1
204016a8:	4404                	lw	s1,8(s0)
204016aa:	00442a83          	lw	s5,4(s0)
204016ae:	1afd                	addi	s5,s5,-1
204016b0:	020ad063          	bgez	s5,204016d0 <_fwalk_reent+0x4a>
204016b4:	4000                	lw	s0,0(s0)
204016b6:	f86d                	bnez	s0,204016a8 <_fwalk_reent+0x22>
204016b8:	50b2                	lw	ra,44(sp)
204016ba:	5422                	lw	s0,40(sp)
204016bc:	5492                	lw	s1,36(sp)
204016be:	5902                	lw	s2,32(sp)
204016c0:	4a62                	lw	s4,24(sp)
204016c2:	4ad2                	lw	s5,20(sp)
204016c4:	4b42                	lw	s6,16(sp)
204016c6:	4bb2                	lw	s7,12(sp)
204016c8:	854e                	mv	a0,s3
204016ca:	49f2                	lw	s3,28(sp)
204016cc:	6145                	addi	sp,sp,48
204016ce:	8082                	ret
204016d0:	00c4d783          	lhu	a5,12(s1)
204016d4:	00fb7b63          	bgeu	s6,a5,204016ea <_fwalk_reent+0x64>
204016d8:	00e49783          	lh	a5,14(s1)
204016dc:	01778763          	beq	a5,s7,204016ea <_fwalk_reent+0x64>
204016e0:	85a6                	mv	a1,s1
204016e2:	854a                	mv	a0,s2
204016e4:	9a02                	jalr	s4
204016e6:	00a9e9b3          	or	s3,s3,a0
204016ea:	06848493          	addi	s1,s1,104
204016ee:	b7c1                	j	204016ae <_fwalk_reent+0x28>

204016f0 <__swhatbuf_r>:
__swhatbuf_r():
204016f0:	7159                	addi	sp,sp,-112
204016f2:	d0ca                	sw	s2,96(sp)
204016f4:	892e                	mv	s2,a1
204016f6:	00e59583          	lh	a1,14(a1)
204016fa:	d4a2                	sw	s0,104(sp)
204016fc:	d2a6                	sw	s1,100(sp)
204016fe:	d686                	sw	ra,108(sp)
20401700:	8432                	mv	s0,a2
20401702:	84b6                	mv	s1,a3
20401704:	0005dc63          	bgez	a1,2040171c <__swhatbuf_r+0x2c>
20401708:	00c91783          	lh	a5,12(s2)
2040170c:	0004a023          	sw	zero,0(s1)
20401710:	0807f793          	andi	a5,a5,128
20401714:	e38d                	bnez	a5,20401736 <__swhatbuf_r+0x46>
20401716:	40000793          	li	a5,1024
2040171a:	a005                	j	2040173a <__swhatbuf_r+0x4a>
2040171c:	0030                	addi	a2,sp,8
2040171e:	2e41                	jal	20401aae <_fstat_r>
20401720:	fe0544e3          	bltz	a0,20401708 <__swhatbuf_r+0x18>
20401724:	4732                	lw	a4,12(sp)
20401726:	67bd                	lui	a5,0xf
20401728:	8ff9                	and	a5,a5,a4
2040172a:	7779                	lui	a4,0xffffe
2040172c:	97ba                	add	a5,a5,a4
2040172e:	0017b793          	seqz	a5,a5
20401732:	c09c                	sw	a5,0(s1)
20401734:	b7cd                	j	20401716 <__swhatbuf_r+0x26>
20401736:	04000793          	li	a5,64
2040173a:	50b6                	lw	ra,108(sp)
2040173c:	c01c                	sw	a5,0(s0)
2040173e:	5426                	lw	s0,104(sp)
20401740:	5496                	lw	s1,100(sp)
20401742:	5906                	lw	s2,96(sp)
20401744:	4501                	li	a0,0
20401746:	6165                	addi	sp,sp,112
20401748:	8082                	ret

2040174a <__smakebuf_r>:
__smakebuf_r():
2040174a:	00c5d783          	lhu	a5,12(a1)
2040174e:	1101                	addi	sp,sp,-32
20401750:	cc22                	sw	s0,24(sp)
20401752:	ce06                	sw	ra,28(sp)
20401754:	ca26                	sw	s1,20(sp)
20401756:	c84a                	sw	s2,16(sp)
20401758:	8b89                	andi	a5,a5,2
2040175a:	842e                	mv	s0,a1
2040175c:	cf89                	beqz	a5,20401776 <__smakebuf_r+0x2c>
2040175e:	04740793          	addi	a5,s0,71
20401762:	c01c                	sw	a5,0(s0)
20401764:	c81c                	sw	a5,16(s0)
20401766:	4785                	li	a5,1
20401768:	c85c                	sw	a5,20(s0)
2040176a:	40f2                	lw	ra,28(sp)
2040176c:	4462                	lw	s0,24(sp)
2040176e:	44d2                	lw	s1,20(sp)
20401770:	4942                	lw	s2,16(sp)
20401772:	6105                	addi	sp,sp,32
20401774:	8082                	ret
20401776:	0074                	addi	a3,sp,12
20401778:	0030                	addi	a2,sp,8
2040177a:	892a                	mv	s2,a0
2040177c:	3f95                	jal	204016f0 <__swhatbuf_r>
2040177e:	45a2                	lw	a1,8(sp)
20401780:	84aa                	mv	s1,a0
20401782:	854a                	mv	a0,s2
20401784:	2211                	jal	20401888 <_malloc_r>
20401786:	ed01                	bnez	a0,2040179e <__smakebuf_r+0x54>
20401788:	00c41783          	lh	a5,12(s0)
2040178c:	2007f713          	andi	a4,a5,512
20401790:	ff69                	bnez	a4,2040176a <__smakebuf_r+0x20>
20401792:	9bf1                	andi	a5,a5,-4
20401794:	0027e793          	ori	a5,a5,2
20401798:	00f41623          	sh	a5,12(s0)
2040179c:	b7c9                	j	2040175e <__smakebuf_r+0x14>
2040179e:	00000797          	auipc	a5,0x0
204017a2:	d9278793          	addi	a5,a5,-622 # 20401530 <_cleanup_r>
204017a6:	02f92423          	sw	a5,40(s2)
204017aa:	00c45783          	lhu	a5,12(s0)
204017ae:	c008                	sw	a0,0(s0)
204017b0:	c808                	sw	a0,16(s0)
204017b2:	0807e793          	ori	a5,a5,128
204017b6:	00f41623          	sh	a5,12(s0)
204017ba:	47a2                	lw	a5,8(sp)
204017bc:	c85c                	sw	a5,20(s0)
204017be:	47b2                	lw	a5,12(sp)
204017c0:	cf89                	beqz	a5,204017da <__smakebuf_r+0x90>
204017c2:	00e41583          	lh	a1,14(s0)
204017c6:	854a                	mv	a0,s2
204017c8:	2e21                	jal	20401ae0 <_isatty_r>
204017ca:	c901                	beqz	a0,204017da <__smakebuf_r+0x90>
204017cc:	00c45783          	lhu	a5,12(s0)
204017d0:	9bf1                	andi	a5,a5,-4
204017d2:	0017e793          	ori	a5,a5,1
204017d6:	00f41623          	sh	a5,12(s0)
204017da:	00c45503          	lhu	a0,12(s0)
204017de:	8cc9                	or	s1,s1,a0
204017e0:	00941623          	sh	s1,12(s0)
204017e4:	b759                	j	2040176a <__smakebuf_r+0x20>

204017e6 <_free_r>:
_free_r():
204017e6:	c1c5                	beqz	a1,20401886 <_free_r+0xa0>
204017e8:	ffc5a783          	lw	a5,-4(a1)
204017ec:	1101                	addi	sp,sp,-32
204017ee:	cc22                	sw	s0,24(sp)
204017f0:	ce06                	sw	ra,28(sp)
204017f2:	ffc58413          	addi	s0,a1,-4
204017f6:	0007d363          	bgez	a5,204017fc <_free_r+0x16>
204017fa:	943e                	add	s0,s0,a5
204017fc:	c62a                	sw	a0,12(sp)
204017fe:	2699                	jal	20401b44 <__malloc_lock>
20401800:	5fbff717          	auipc	a4,0x5fbff
20401804:	fa070713          	addi	a4,a4,-96 # 800007a0 <__malloc_free_list>
20401808:	431c                	lw	a5,0(a4)
2040180a:	4532                	lw	a0,12(sp)
2040180c:	eb81                	bnez	a5,2040181c <_free_r+0x36>
2040180e:	00042223          	sw	zero,4(s0)
20401812:	c300                	sw	s0,0(a4)
20401814:	4462                	lw	s0,24(sp)
20401816:	40f2                	lw	ra,28(sp)
20401818:	6105                	addi	sp,sp,32
2040181a:	a635                	j	20401b46 <__malloc_unlock>
2040181c:	00f47d63          	bgeu	s0,a5,20401836 <_free_r+0x50>
20401820:	4010                	lw	a2,0(s0)
20401822:	00c406b3          	add	a3,s0,a2
20401826:	00d79663          	bne	a5,a3,20401832 <_free_r+0x4c>
2040182a:	4394                	lw	a3,0(a5)
2040182c:	43dc                	lw	a5,4(a5)
2040182e:	96b2                	add	a3,a3,a2
20401830:	c014                	sw	a3,0(s0)
20401832:	c05c                	sw	a5,4(s0)
20401834:	bff9                	j	20401812 <_free_r+0x2c>
20401836:	873e                	mv	a4,a5
20401838:	43dc                	lw	a5,4(a5)
2040183a:	c399                	beqz	a5,20401840 <_free_r+0x5a>
2040183c:	fef47de3          	bgeu	s0,a5,20401836 <_free_r+0x50>
20401840:	4314                	lw	a3,0(a4)
20401842:	00d70633          	add	a2,a4,a3
20401846:	00861f63          	bne	a2,s0,20401864 <_free_r+0x7e>
2040184a:	4010                	lw	a2,0(s0)
2040184c:	96b2                	add	a3,a3,a2
2040184e:	c314                	sw	a3,0(a4)
20401850:	00d70633          	add	a2,a4,a3
20401854:	fcc790e3          	bne	a5,a2,20401814 <_free_r+0x2e>
20401858:	4390                	lw	a2,0(a5)
2040185a:	43dc                	lw	a5,4(a5)
2040185c:	96b2                	add	a3,a3,a2
2040185e:	c314                	sw	a3,0(a4)
20401860:	c35c                	sw	a5,4(a4)
20401862:	bf4d                	j	20401814 <_free_r+0x2e>
20401864:	00c47563          	bgeu	s0,a2,2040186e <_free_r+0x88>
20401868:	47b1                	li	a5,12
2040186a:	c11c                	sw	a5,0(a0)
2040186c:	b765                	j	20401814 <_free_r+0x2e>
2040186e:	4010                	lw	a2,0(s0)
20401870:	00c406b3          	add	a3,s0,a2
20401874:	00d79663          	bne	a5,a3,20401880 <_free_r+0x9a>
20401878:	4394                	lw	a3,0(a5)
2040187a:	43dc                	lw	a5,4(a5)
2040187c:	96b2                	add	a3,a3,a2
2040187e:	c014                	sw	a3,0(s0)
20401880:	c05c                	sw	a5,4(s0)
20401882:	c340                	sw	s0,4(a4)
20401884:	bf41                	j	20401814 <_free_r+0x2e>
20401886:	8082                	ret

20401888 <_malloc_r>:
_malloc_r():
20401888:	1101                	addi	sp,sp,-32
2040188a:	ca26                	sw	s1,20(sp)
2040188c:	00358493          	addi	s1,a1,3
20401890:	98f1                	andi	s1,s1,-4
20401892:	c84a                	sw	s2,16(sp)
20401894:	ce06                	sw	ra,28(sp)
20401896:	cc22                	sw	s0,24(sp)
20401898:	c64e                	sw	s3,12(sp)
2040189a:	04a1                	addi	s1,s1,8
2040189c:	47b1                	li	a5,12
2040189e:	892a                	mv	s2,a0
204018a0:	04f4f463          	bgeu	s1,a5,204018e8 <_malloc_r+0x60>
204018a4:	44b1                	li	s1,12
204018a6:	04b4e363          	bltu	s1,a1,204018ec <_malloc_r+0x64>
204018aa:	854a                	mv	a0,s2
204018ac:	2c61                	jal	20401b44 <__malloc_lock>
204018ae:	5fbff697          	auipc	a3,0x5fbff
204018b2:	ef268693          	addi	a3,a3,-270 # 800007a0 <__malloc_free_list>
204018b6:	4298                	lw	a4,0(a3)
204018b8:	843a                	mv	s0,a4
204018ba:	e421                	bnez	s0,20401902 <_malloc_r+0x7a>
204018bc:	5fbff417          	auipc	s0,0x5fbff
204018c0:	ee840413          	addi	s0,s0,-280 # 800007a4 <__malloc_sbrk_start>
204018c4:	401c                	lw	a5,0(s0)
204018c6:	e789                	bnez	a5,204018d0 <_malloc_r+0x48>
204018c8:	4581                	li	a1,0
204018ca:	854a                	mv	a0,s2
204018cc:	2851                	jal	20401960 <_sbrk_r>
204018ce:	c008                	sw	a0,0(s0)
204018d0:	85a6                	mv	a1,s1
204018d2:	854a                	mv	a0,s2
204018d4:	2071                	jal	20401960 <_sbrk_r>
204018d6:	59fd                	li	s3,-1
204018d8:	07351863          	bne	a0,s3,20401948 <_malloc_r+0xc0>
204018dc:	47b1                	li	a5,12
204018de:	00f92023          	sw	a5,0(s2)
204018e2:	854a                	mv	a0,s2
204018e4:	248d                	jal	20401b46 <__malloc_unlock>
204018e6:	a031                	j	204018f2 <_malloc_r+0x6a>
204018e8:	fa04dfe3          	bgez	s1,204018a6 <_malloc_r+0x1e>
204018ec:	47b1                	li	a5,12
204018ee:	00f92023          	sw	a5,0(s2)
204018f2:	4501                	li	a0,0
204018f4:	40f2                	lw	ra,28(sp)
204018f6:	4462                	lw	s0,24(sp)
204018f8:	44d2                	lw	s1,20(sp)
204018fa:	4942                	lw	s2,16(sp)
204018fc:	49b2                	lw	s3,12(sp)
204018fe:	6105                	addi	sp,sp,32
20401900:	8082                	ret
20401902:	401c                	lw	a5,0(s0)
20401904:	8f85                	sub	a5,a5,s1
20401906:	0207ce63          	bltz	a5,20401942 <_malloc_r+0xba>
2040190a:	462d                	li	a2,11
2040190c:	00f67663          	bgeu	a2,a5,20401918 <_malloc_r+0x90>
20401910:	c01c                	sw	a5,0(s0)
20401912:	943e                	add	s0,s0,a5
20401914:	c004                	sw	s1,0(s0)
20401916:	a029                	j	20401920 <_malloc_r+0x98>
20401918:	405c                	lw	a5,4(s0)
2040191a:	02871263          	bne	a4,s0,2040193e <_malloc_r+0xb6>
2040191e:	c29c                	sw	a5,0(a3)
20401920:	854a                	mv	a0,s2
20401922:	2415                	jal	20401b46 <__malloc_unlock>
20401924:	00b40513          	addi	a0,s0,11
20401928:	00440793          	addi	a5,s0,4
2040192c:	9961                	andi	a0,a0,-8
2040192e:	40f50733          	sub	a4,a0,a5
20401932:	fcf501e3          	beq	a0,a5,204018f4 <_malloc_r+0x6c>
20401936:	943a                	add	s0,s0,a4
20401938:	8f89                	sub	a5,a5,a0
2040193a:	c01c                	sw	a5,0(s0)
2040193c:	bf65                	j	204018f4 <_malloc_r+0x6c>
2040193e:	c35c                	sw	a5,4(a4)
20401940:	b7c5                	j	20401920 <_malloc_r+0x98>
20401942:	8722                	mv	a4,s0
20401944:	4040                	lw	s0,4(s0)
20401946:	bf95                	j	204018ba <_malloc_r+0x32>
20401948:	00350413          	addi	s0,a0,3
2040194c:	9871                	andi	s0,s0,-4
2040194e:	fc8503e3          	beq	a0,s0,20401914 <_malloc_r+0x8c>
20401952:	40a405b3          	sub	a1,s0,a0
20401956:	854a                	mv	a0,s2
20401958:	2021                	jal	20401960 <_sbrk_r>
2040195a:	fb351de3          	bne	a0,s3,20401914 <_malloc_r+0x8c>
2040195e:	bfbd                	j	204018dc <_malloc_r+0x54>

20401960 <_sbrk_r>:
_sbrk_r():
20401960:	1141                	addi	sp,sp,-16
20401962:	c422                	sw	s0,8(sp)
20401964:	842a                	mv	s0,a0
20401966:	852e                	mv	a0,a1
20401968:	5fbff797          	auipc	a5,0x5fbff
2040196c:	e407a023          	sw	zero,-448(a5) # 800007a8 <errno>
20401970:	c606                	sw	ra,12(sp)
20401972:	0b8040ef          	jal	ra,20405a2a <_sbrk>
20401976:	57fd                	li	a5,-1
20401978:	00f51863          	bne	a0,a5,20401988 <_sbrk_r+0x28>
2040197c:	5fbff797          	auipc	a5,0x5fbff
20401980:	e2c7a783          	lw	a5,-468(a5) # 800007a8 <errno>
20401984:	c391                	beqz	a5,20401988 <_sbrk_r+0x28>
20401986:	c01c                	sw	a5,0(s0)
20401988:	40b2                	lw	ra,12(sp)
2040198a:	4422                	lw	s0,8(sp)
2040198c:	0141                	addi	sp,sp,16
2040198e:	8082                	ret

20401990 <__sread>:
__sread():
20401990:	1141                	addi	sp,sp,-16
20401992:	c422                	sw	s0,8(sp)
20401994:	842e                	mv	s0,a1
20401996:	00e59583          	lh	a1,14(a1)
2040199a:	c606                	sw	ra,12(sp)
2040199c:	2275                	jal	20401b48 <_read_r>
2040199e:	00054963          	bltz	a0,204019b0 <__sread+0x20>
204019a2:	487c                	lw	a5,84(s0)
204019a4:	97aa                	add	a5,a5,a0
204019a6:	c87c                	sw	a5,84(s0)
204019a8:	40b2                	lw	ra,12(sp)
204019aa:	4422                	lw	s0,8(sp)
204019ac:	0141                	addi	sp,sp,16
204019ae:	8082                	ret
204019b0:	00c45783          	lhu	a5,12(s0)
204019b4:	777d                	lui	a4,0xfffff
204019b6:	177d                	addi	a4,a4,-1
204019b8:	8ff9                	and	a5,a5,a4
204019ba:	00f41623          	sh	a5,12(s0)
204019be:	b7ed                	j	204019a8 <__sread+0x18>

204019c0 <__swrite>:
__swrite():
204019c0:	00c5d783          	lhu	a5,12(a1)
204019c4:	1101                	addi	sp,sp,-32
204019c6:	cc22                	sw	s0,24(sp)
204019c8:	ca26                	sw	s1,20(sp)
204019ca:	c84a                	sw	s2,16(sp)
204019cc:	c64e                	sw	s3,12(sp)
204019ce:	ce06                	sw	ra,28(sp)
204019d0:	1007f793          	andi	a5,a5,256
204019d4:	84aa                	mv	s1,a0
204019d6:	842e                	mv	s0,a1
204019d8:	8932                	mv	s2,a2
204019da:	89b6                	mv	s3,a3
204019dc:	c791                	beqz	a5,204019e8 <__swrite+0x28>
204019de:	00e59583          	lh	a1,14(a1)
204019e2:	4689                	li	a3,2
204019e4:	4601                	li	a2,0
204019e6:	222d                	jal	20401b10 <_lseek_r>
204019e8:	00c45783          	lhu	a5,12(s0)
204019ec:	777d                	lui	a4,0xfffff
204019ee:	177d                	addi	a4,a4,-1
204019f0:	8ff9                	and	a5,a5,a4
204019f2:	00e41583          	lh	a1,14(s0)
204019f6:	00f41623          	sh	a5,12(s0)
204019fa:	4462                	lw	s0,24(sp)
204019fc:	40f2                	lw	ra,28(sp)
204019fe:	86ce                	mv	a3,s3
20401a00:	864a                	mv	a2,s2
20401a02:	49b2                	lw	s3,12(sp)
20401a04:	4942                	lw	s2,16(sp)
20401a06:	8526                	mv	a0,s1
20401a08:	44d2                	lw	s1,20(sp)
20401a0a:	6105                	addi	sp,sp,32
20401a0c:	a83d                	j	20401a4a <_write_r>

20401a0e <__sseek>:
__sseek():
20401a0e:	1141                	addi	sp,sp,-16
20401a10:	c422                	sw	s0,8(sp)
20401a12:	842e                	mv	s0,a1
20401a14:	00e59583          	lh	a1,14(a1)
20401a18:	c606                	sw	ra,12(sp)
20401a1a:	28dd                	jal	20401b10 <_lseek_r>
20401a1c:	57fd                	li	a5,-1
20401a1e:	00c45703          	lhu	a4,12(s0)
20401a22:	00f51b63          	bne	a0,a5,20401a38 <__sseek+0x2a>
20401a26:	77fd                	lui	a5,0xfffff
20401a28:	17fd                	addi	a5,a5,-1
20401a2a:	8ff9                	and	a5,a5,a4
20401a2c:	00f41623          	sh	a5,12(s0)
20401a30:	40b2                	lw	ra,12(sp)
20401a32:	4422                	lw	s0,8(sp)
20401a34:	0141                	addi	sp,sp,16
20401a36:	8082                	ret
20401a38:	6785                	lui	a5,0x1
20401a3a:	8fd9                	or	a5,a5,a4
20401a3c:	00f41623          	sh	a5,12(s0)
20401a40:	c868                	sw	a0,84(s0)
20401a42:	b7fd                	j	20401a30 <__sseek+0x22>

20401a44 <__sclose>:
__sclose():
20401a44:	00e59583          	lh	a1,14(a1)
20401a48:	a81d                	j	20401a7e <_close_r>

20401a4a <_write_r>:
_write_r():
20401a4a:	1141                	addi	sp,sp,-16
20401a4c:	c422                	sw	s0,8(sp)
20401a4e:	842a                	mv	s0,a0
20401a50:	852e                	mv	a0,a1
20401a52:	85b2                	mv	a1,a2
20401a54:	8636                	mv	a2,a3
20401a56:	5fbff797          	auipc	a5,0x5fbff
20401a5a:	d407a923          	sw	zero,-686(a5) # 800007a8 <errno>
20401a5e:	c606                	sw	ra,12(sp)
20401a60:	034040ef          	jal	ra,20405a94 <_write>
20401a64:	57fd                	li	a5,-1
20401a66:	00f51863          	bne	a0,a5,20401a76 <_write_r+0x2c>
20401a6a:	5fbff797          	auipc	a5,0x5fbff
20401a6e:	d3e7a783          	lw	a5,-706(a5) # 800007a8 <errno>
20401a72:	c391                	beqz	a5,20401a76 <_write_r+0x2c>
20401a74:	c01c                	sw	a5,0(s0)
20401a76:	40b2                	lw	ra,12(sp)
20401a78:	4422                	lw	s0,8(sp)
20401a7a:	0141                	addi	sp,sp,16
20401a7c:	8082                	ret

20401a7e <_close_r>:
_close_r():
20401a7e:	1141                	addi	sp,sp,-16
20401a80:	c422                	sw	s0,8(sp)
20401a82:	842a                	mv	s0,a0
20401a84:	852e                	mv	a0,a1
20401a86:	5fbff797          	auipc	a5,0x5fbff
20401a8a:	d207a123          	sw	zero,-734(a5) # 800007a8 <errno>
20401a8e:	c606                	sw	ra,12(sp)
20401a90:	6df030ef          	jal	ra,2040596e <_close>
20401a94:	57fd                	li	a5,-1
20401a96:	00f51863          	bne	a0,a5,20401aa6 <_close_r+0x28>
20401a9a:	5fbff797          	auipc	a5,0x5fbff
20401a9e:	d0e7a783          	lw	a5,-754(a5) # 800007a8 <errno>
20401aa2:	c391                	beqz	a5,20401aa6 <_close_r+0x28>
20401aa4:	c01c                	sw	a5,0(s0)
20401aa6:	40b2                	lw	ra,12(sp)
20401aa8:	4422                	lw	s0,8(sp)
20401aaa:	0141                	addi	sp,sp,16
20401aac:	8082                	ret

20401aae <_fstat_r>:
_fstat_r():
20401aae:	1141                	addi	sp,sp,-16
20401ab0:	c422                	sw	s0,8(sp)
20401ab2:	842a                	mv	s0,a0
20401ab4:	852e                	mv	a0,a1
20401ab6:	85b2                	mv	a1,a2
20401ab8:	5fbff797          	auipc	a5,0x5fbff
20401abc:	ce07a823          	sw	zero,-784(a5) # 800007a8 <errno>
20401ac0:	c606                	sw	ra,12(sp)
20401ac2:	6cf030ef          	jal	ra,20405990 <_fstat>
20401ac6:	57fd                	li	a5,-1
20401ac8:	00f51863          	bne	a0,a5,20401ad8 <_fstat_r+0x2a>
20401acc:	5fbff797          	auipc	a5,0x5fbff
20401ad0:	cdc7a783          	lw	a5,-804(a5) # 800007a8 <errno>
20401ad4:	c391                	beqz	a5,20401ad8 <_fstat_r+0x2a>
20401ad6:	c01c                	sw	a5,0(s0)
20401ad8:	40b2                	lw	ra,12(sp)
20401ada:	4422                	lw	s0,8(sp)
20401adc:	0141                	addi	sp,sp,16
20401ade:	8082                	ret

20401ae0 <_isatty_r>:
_isatty_r():
20401ae0:	1141                	addi	sp,sp,-16
20401ae2:	c422                	sw	s0,8(sp)
20401ae4:	842a                	mv	s0,a0
20401ae6:	852e                	mv	a0,a1
20401ae8:	5fbff797          	auipc	a5,0x5fbff
20401aec:	cc07a023          	sw	zero,-832(a5) # 800007a8 <errno>
20401af0:	c606                	sw	ra,12(sp)
20401af2:	6c5030ef          	jal	ra,204059b6 <_isatty>
20401af6:	57fd                	li	a5,-1
20401af8:	00f51863          	bne	a0,a5,20401b08 <_isatty_r+0x28>
20401afc:	5fbff797          	auipc	a5,0x5fbff
20401b00:	cac7a783          	lw	a5,-852(a5) # 800007a8 <errno>
20401b04:	c391                	beqz	a5,20401b08 <_isatty_r+0x28>
20401b06:	c01c                	sw	a5,0(s0)
20401b08:	40b2                	lw	ra,12(sp)
20401b0a:	4422                	lw	s0,8(sp)
20401b0c:	0141                	addi	sp,sp,16
20401b0e:	8082                	ret

20401b10 <_lseek_r>:
_lseek_r():
20401b10:	1141                	addi	sp,sp,-16
20401b12:	c422                	sw	s0,8(sp)
20401b14:	842a                	mv	s0,a0
20401b16:	852e                	mv	a0,a1
20401b18:	85b2                	mv	a1,a2
20401b1a:	8636                	mv	a2,a3
20401b1c:	5fbff797          	auipc	a5,0x5fbff
20401b20:	c807a623          	sw	zero,-884(a5) # 800007a8 <errno>
20401b24:	c606                	sw	ra,12(sp)
20401b26:	6b1030ef          	jal	ra,204059d6 <_lseek>
20401b2a:	57fd                	li	a5,-1
20401b2c:	00f51863          	bne	a0,a5,20401b3c <_lseek_r+0x2c>
20401b30:	5fbff797          	auipc	a5,0x5fbff
20401b34:	c787a783          	lw	a5,-904(a5) # 800007a8 <errno>
20401b38:	c391                	beqz	a5,20401b3c <_lseek_r+0x2c>
20401b3a:	c01c                	sw	a5,0(s0)
20401b3c:	40b2                	lw	ra,12(sp)
20401b3e:	4422                	lw	s0,8(sp)
20401b40:	0141                	addi	sp,sp,16
20401b42:	8082                	ret

20401b44 <__malloc_lock>:
__malloc_lock():
20401b44:	8082                	ret

20401b46 <__malloc_unlock>:
__malloc_unlock():
20401b46:	8082                	ret

20401b48 <_read_r>:
_read_r():
20401b48:	1141                	addi	sp,sp,-16
20401b4a:	c422                	sw	s0,8(sp)
20401b4c:	842a                	mv	s0,a0
20401b4e:	852e                	mv	a0,a1
20401b50:	85b2                	mv	a1,a2
20401b52:	8636                	mv	a2,a3
20401b54:	5fbff797          	auipc	a5,0x5fbff
20401b58:	c407aa23          	sw	zero,-940(a5) # 800007a8 <errno>
20401b5c:	c606                	sw	ra,12(sp)
20401b5e:	6a3030ef          	jal	ra,20405a00 <_read>
20401b62:	57fd                	li	a5,-1
20401b64:	00f51863          	bne	a0,a5,20401b74 <_read_r+0x2c>
20401b68:	5fbff797          	auipc	a5,0x5fbff
20401b6c:	c407a783          	lw	a5,-960(a5) # 800007a8 <errno>
20401b70:	c391                	beqz	a5,20401b74 <_read_r+0x2c>
20401b72:	c01c                	sw	a5,0(s0)
20401b74:	40b2                	lw	ra,12(sp)
20401b76:	4422                	lw	s0,8(sp)
20401b78:	0141                	addi	sp,sp,16
20401b7a:	8082                	ret

20401b7c <metal_cpu_timer_interrupt_controller>:
metal_cpu_timer_interrupt_controller():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/cpu.h:126
 *
 * @param cpu The CPU device handle
 * @return A pointer to the timer interrupt handle
 */
__inline__ struct metal_interrupt *
metal_cpu_timer_interrupt_controller(struct metal_cpu *cpu) {
20401b7c:	1101                	addi	sp,sp,-32
20401b7e:	ce06                	sw	ra,28(sp)
20401b80:	cc22                	sw	s0,24(sp)
20401b82:	1000                	addi	s0,sp,32
20401b84:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/cpu.h:127
    return cpu->vtable->tmr_controller_interrupt(cpu);
20401b88:	fec42783          	lw	a5,-20(s0)
20401b8c:	439c                	lw	a5,0(a5)
20401b8e:	4b9c                	lw	a5,16(a5)
20401b90:	fec42503          	lw	a0,-20(s0)
20401b94:	9782                	jalr	a5
20401b96:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/cpu.h:128
}
20401b98:	853e                	mv	a0,a5
20401b9a:	40f2                	lw	ra,28(sp)
20401b9c:	4462                	lw	s0,24(sp)
20401b9e:	6105                	addi	sp,sp,32
20401ba0:	8082                	ret

20401ba2 <metal_cpu_timer_get_interrupt_id>:
metal_cpu_timer_get_interrupt_id():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/cpu.h:137
 * Get the interrupt ID of the real-time clock interrupt
 *
 * @param cpu The CPU device handle
 * @return The timer interrupt ID
 */
__inline__ int metal_cpu_timer_get_interrupt_id(struct metal_cpu *cpu) {
20401ba2:	1101                	addi	sp,sp,-32
20401ba4:	ce06                	sw	ra,28(sp)
20401ba6:	cc22                	sw	s0,24(sp)
20401ba8:	1000                	addi	s0,sp,32
20401baa:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/cpu.h:138
    return cpu->vtable->get_tmr_interrupt_id(cpu);
20401bae:	fec42783          	lw	a5,-20(s0)
20401bb2:	439c                	lw	a5,0(a5)
20401bb4:	4bdc                	lw	a5,20(a5)
20401bb6:	fec42503          	lw	a0,-20(s0)
20401bba:	9782                	jalr	a5
20401bbc:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/cpu.h:139
}
20401bbe:	853e                	mv	a0,a5
20401bc0:	40f2                	lw	ra,28(sp)
20401bc2:	4462                	lw	s0,24(sp)
20401bc4:	6105                	addi	sp,sp,32
20401bc6:	8082                	ret

20401bc8 <metal_cpu_interrupt_controller>:
metal_cpu_interrupt_controller():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/cpu.h:224
 *
 * @param cpu The CPU device handle
 * @return The handle for the CPU interrupt controller
 */
__inline__ struct metal_interrupt *
metal_cpu_interrupt_controller(struct metal_cpu *cpu) {
20401bc8:	1101                	addi	sp,sp,-32
20401bca:	ce06                	sw	ra,28(sp)
20401bcc:	cc22                	sw	s0,24(sp)
20401bce:	1000                	addi	s0,sp,32
20401bd0:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/cpu.h:225
    return cpu->vtable->controller_interrupt(cpu);
20401bd4:	fec42783          	lw	a5,-20(s0)
20401bd8:	439c                	lw	a5,0(a5)
20401bda:	57dc                	lw	a5,44(a5)
20401bdc:	fec42503          	lw	a0,-20(s0)
20401be0:	9782                	jalr	a5
20401be2:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/cpu.h:226
}
20401be4:	853e                	mv	a0,a5
20401be6:	40f2                	lw	ra,28(sp)
20401be8:	4462                	lw	s0,24(sp)
20401bea:	6105                	addi	sp,sp,32
20401bec:	8082                	ret

20401bee <metal_cpu_get>:
metal_cpu_get():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/cpu.c:7
/* SPDX-License-Identifier: Apache-2.0 */

#include <metal/cpu.h>
#include <metal/machine.h>

struct metal_cpu *metal_cpu_get(unsigned int hartid) {
20401bee:	1101                	addi	sp,sp,-32
20401bf0:	ce22                	sw	s0,28(sp)
20401bf2:	1000                	addi	s0,sp,32
20401bf4:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/cpu.c:8
    if (hartid < __METAL_DT_MAX_HARTS) {
20401bf8:	fec42783          	lw	a5,-20(s0)
20401bfc:	eb99                	bnez	a5,20401c12 <metal_cpu_get+0x24>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/cpu.c:9
        return (struct metal_cpu *)__metal_cpu_table[hartid];
20401bfe:	800007b7          	lui	a5,0x80000
20401c02:	fec42703          	lw	a4,-20(s0)
20401c06:	070a                	slli	a4,a4,0x2
20401c08:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20401c0c:	97ba                	add	a5,a5,a4
20401c0e:	439c                	lw	a5,0(a5)
20401c10:	a011                	j	20401c14 <metal_cpu_get+0x26>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/cpu.c:11
    }
    return NULL;
20401c12:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/cpu.c:12
}
20401c14:	853e                	mv	a0,a5
20401c16:	4472                	lw	s0,28(sp)
20401c18:	6105                	addi	sp,sp,32
20401c1a:	8082                	ret

20401c1c <metal_cpu_get_current_hartid>:
metal_cpu_get_current_hartid():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/cpu.c:14

int metal_cpu_get_current_hartid() {
20401c1c:	1101                	addi	sp,sp,-32
20401c1e:	ce22                	sw	s0,28(sp)
20401c20:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/cpu.c:17
#ifdef __riscv
    int mhartid;
    __asm__ volatile("csrr %0, mhartid" : "=r"(mhartid));
20401c22:	f14027f3          	csrr	a5,mhartid
20401c26:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/cpu.c:18
    return mhartid;
20401c2a:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/cpu.c:20
#endif
}
20401c2e:	853e                	mv	a0,a5
20401c30:	4472                	lw	s0,28(sp)
20401c32:	6105                	addi	sp,sp,32
20401c34:	8082                	ret

20401c36 <metal_gpio_get_device>:
metal_gpio_get_device():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/gpio.c:34
extern __inline__ int metal_gpio_config_interrupt(struct metal_gpio *gpio,
                                                  int pin, int intr_type);
extern __inline__ int metal_gpio_clear_interrupt(struct metal_gpio *gpio,
                                                 int pin, int intr_type);

struct metal_gpio *metal_gpio_get_device(unsigned int device_num) {
20401c36:	1101                	addi	sp,sp,-32
20401c38:	ce22                	sw	s0,28(sp)
20401c3a:	1000                	addi	s0,sp,32
20401c3c:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/gpio.c:35
    if (device_num > __MEE_DT_MAX_GPIOS) {
20401c40:	fec42703          	lw	a4,-20(s0)
20401c44:	4785                	li	a5,1
20401c46:	00e7f463          	bgeu	a5,a4,20401c4e <metal_gpio_get_device+0x18>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/gpio.c:36
        return NULL;
20401c4a:	4781                	li	a5,0
20401c4c:	a801                	j	20401c5c <metal_gpio_get_device+0x26>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/gpio.c:39
    }

    return (struct metal_gpio *)__metal_gpio_table[device_num];
20401c4e:	fec42703          	lw	a4,-20(s0)
20401c52:	070a                	slli	a4,a4,0x2
20401c54:	80c18793          	addi	a5,gp,-2036 # 8000076c <__metal_gpio_table>
20401c58:	97ba                	add	a5,a5,a4
20401c5a:	439c                	lw	a5,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/gpio.c:40
}
20401c5c:	853e                	mv	a0,a5
20401c5e:	4472                	lw	s0,28(sp)
20401c60:	6105                	addi	sp,sp,32
20401c62:	8082                	ret

20401c64 <metal_interrupt_init>:
metal_interrupt_init():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:130
 * before any interrupts are registered or enabled with the handler. It
 * is invalid to initialize an interrupt controller more than once.
 *
 * @param controller The handle for the interrupt controller
 */
__inline__ void metal_interrupt_init(struct metal_interrupt *controller) {
20401c64:	1101                	addi	sp,sp,-32
20401c66:	ce06                	sw	ra,28(sp)
20401c68:	cc22                	sw	s0,24(sp)
20401c6a:	1000                	addi	s0,sp,32
20401c6c:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:131
    controller->vtable->interrupt_init(controller);
20401c70:	fec42783          	lw	a5,-20(s0)
20401c74:	439c                	lw	a5,0(a5)
20401c76:	439c                	lw	a5,0(a5)
20401c78:	fec42503          	lw	a0,-20(s0)
20401c7c:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:132
}
20401c7e:	0001                	nop
20401c80:	40f2                	lw	ra,28(sp)
20401c82:	4462                	lw	s0,24(sp)
20401c84:	6105                	addi	sp,sp,32
20401c86:	8082                	ret

20401c88 <metal_interrupt_register_handler>:
metal_interrupt_register_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:240
 * @return 0 upon success
 */
__inline__ int
metal_interrupt_register_handler(struct metal_interrupt *controller, int id,
                                 metal_interrupt_handler_t handler,
                                 void *priv_data) {
20401c88:	1101                	addi	sp,sp,-32
20401c8a:	ce06                	sw	ra,28(sp)
20401c8c:	cc22                	sw	s0,24(sp)
20401c8e:	1000                	addi	s0,sp,32
20401c90:	fea42623          	sw	a0,-20(s0)
20401c94:	feb42423          	sw	a1,-24(s0)
20401c98:	fec42223          	sw	a2,-28(s0)
20401c9c:	fed42023          	sw	a3,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:241
    return controller->vtable->interrupt_register(controller, id, handler,
20401ca0:	fec42783          	lw	a5,-20(s0)
20401ca4:	439c                	lw	a5,0(a5)
20401ca6:	4fdc                	lw	a5,28(a5)
20401ca8:	fe042683          	lw	a3,-32(s0)
20401cac:	fe442603          	lw	a2,-28(s0)
20401cb0:	fe842583          	lw	a1,-24(s0)
20401cb4:	fec42503          	lw	a0,-20(s0)
20401cb8:	9782                	jalr	a5
20401cba:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:243
                                                  priv_data);
}
20401cbc:	853e                	mv	a0,a5
20401cbe:	40f2                	lw	ra,28(sp)
20401cc0:	4462                	lw	s0,24(sp)
20401cc2:	6105                	addi	sp,sp,32
20401cc4:	8082                	ret

20401cc6 <metal_interrupt_enable>:
metal_interrupt_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:267
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to enable
 * @return 0 upon success
 */
__inline__ int metal_interrupt_enable(struct metal_interrupt *controller,
                                      int id) {
20401cc6:	1101                	addi	sp,sp,-32
20401cc8:	ce06                	sw	ra,28(sp)
20401cca:	cc22                	sw	s0,24(sp)
20401ccc:	1000                	addi	s0,sp,32
20401cce:	fea42623          	sw	a0,-20(s0)
20401cd2:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:268
    return controller->vtable->interrupt_enable(controller, id);
20401cd6:	fec42783          	lw	a5,-20(s0)
20401cda:	439c                	lw	a5,0(a5)
20401cdc:	53dc                	lw	a5,36(a5)
20401cde:	fe842583          	lw	a1,-24(s0)
20401ce2:	fec42503          	lw	a0,-20(s0)
20401ce6:	9782                	jalr	a5
20401ce8:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:269
}
20401cea:	853e                	mv	a0,a5
20401cec:	40f2                	lw	ra,28(sp)
20401cee:	4462                	lw	s0,24(sp)
20401cf0:	6105                	addi	sp,sp,32
20401cf2:	8082                	ret

20401cf4 <metal_interrupt_disable>:
metal_interrupt_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:278
 * @param controller The handle for the interrupt controller
 * @param id The interrupt ID to disable
 * @return 0 upon success
 */
__inline__ int metal_interrupt_disable(struct metal_interrupt *controller,
                                       int id) {
20401cf4:	1101                	addi	sp,sp,-32
20401cf6:	ce06                	sw	ra,28(sp)
20401cf8:	cc22                	sw	s0,24(sp)
20401cfa:	1000                	addi	s0,sp,32
20401cfc:	fea42623          	sw	a0,-20(s0)
20401d00:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:279
    return controller->vtable->interrupt_disable(controller, id);
20401d04:	fec42783          	lw	a5,-20(s0)
20401d08:	439c                	lw	a5,0(a5)
20401d0a:	579c                	lw	a5,40(a5)
20401d0c:	fe842583          	lw	a1,-24(s0)
20401d10:	fec42503          	lw	a0,-20(s0)
20401d14:	9782                	jalr	a5
20401d16:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/interrupt.h:280
}
20401d18:	853e                	mv	a0,a5
20401d1a:	40f2                	lw	ra,28(sp)
20401d1c:	4462                	lw	s0,24(sp)
20401d1e:	6105                	addi	sp,sp,32
20401d20:	8082                	ret

20401d22 <metal_tty_putc>:
metal_tty_putc():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/tty.c:12
int metal_tty_putc(int c) {
20401d22:	1101                	addi	sp,sp,-32
20401d24:	ce06                	sw	ra,28(sp)
20401d26:	cc22                	sw	s0,24(sp)
20401d28:	1000                	addi	s0,sp,32
20401d2a:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/tty.c:13
    return metal_uart_putc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401d2e:	fec42583          	lw	a1,-20(s0)
20401d32:	800007b7          	lui	a5,0x80000
20401d36:	74078513          	addi	a0,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2c0>
20401d3a:	20b5                	jal	20401da6 <metal_uart_putc>
20401d3c:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/tty.c:14
}
20401d3e:	853e                	mv	a0,a5
20401d40:	40f2                	lw	ra,28(sp)
20401d42:	4462                	lw	s0,24(sp)
20401d44:	6105                	addi	sp,sp,32
20401d46:	8082                	ret

20401d48 <metal_tty_getc>:
metal_tty_getc():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/tty.c:16
int metal_tty_getc(int *c) {
20401d48:	1101                	addi	sp,sp,-32
20401d4a:	ce06                	sw	ra,28(sp)
20401d4c:	cc22                	sw	s0,24(sp)
20401d4e:	1000                	addi	s0,sp,32
20401d50:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/tty.c:18 (discriminator 1)
        metal_uart_getc(__METAL_DT_STDOUT_UART_HANDLE, c);
20401d54:	fec42583          	lw	a1,-20(s0)
20401d58:	800007b7          	lui	a5,0x80000
20401d5c:	74078513          	addi	a0,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2c0>
20401d60:	2895                	jal	20401dd4 <metal_uart_getc>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/tty.c:20 (discriminator 1)
    } while (-1 == *c);
20401d62:	fec42783          	lw	a5,-20(s0)
20401d66:	4398                	lw	a4,0(a5)
20401d68:	57fd                	li	a5,-1
20401d6a:	fef705e3          	beq	a4,a5,20401d54 <metal_tty_getc+0xc>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/tty.c:21
    return 0;
20401d6e:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/tty.c:22
}
20401d70:	853e                	mv	a0,a5
20401d72:	40f2                	lw	ra,28(sp)
20401d74:	4462                	lw	s0,24(sp)
20401d76:	6105                	addi	sp,sp,32
20401d78:	8082                	ret

20401d7a <metal_uart_init>:
metal_uart_init():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:59
 more than once.
 *
 * @param uart The UART device handle
 * @param baud_rate the baud rate to set the UART to
 */
__inline__ void metal_uart_init(struct metal_uart *uart, int baud_rate) {
20401d7a:	1101                	addi	sp,sp,-32
20401d7c:	ce06                	sw	ra,28(sp)
20401d7e:	cc22                	sw	s0,24(sp)
20401d80:	1000                	addi	s0,sp,32
20401d82:	fea42623          	sw	a0,-20(s0)
20401d86:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:60
    uart->vtable->init(uart, baud_rate);
20401d8a:	fec42783          	lw	a5,-20(s0)
20401d8e:	439c                	lw	a5,0(a5)
20401d90:	439c                	lw	a5,0(a5)
20401d92:	fe842583          	lw	a1,-24(s0)
20401d96:	fec42503          	lw	a0,-20(s0)
20401d9a:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:61
}
20401d9c:	0001                	nop
20401d9e:	40f2                	lw	ra,28(sp)
20401da0:	4462                	lw	s0,24(sp)
20401da2:	6105                	addi	sp,sp,32
20401da4:	8082                	ret

20401da6 <metal_uart_putc>:
metal_uart_putc():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:69
 * @brief Output a character over the UART
 * @param uart The UART device handle
 * @param c The character to send over the UART
 * @return 0 upon success
 */
__inline__ int metal_uart_putc(struct metal_uart *uart, int c) {
20401da6:	1101                	addi	sp,sp,-32
20401da8:	ce06                	sw	ra,28(sp)
20401daa:	cc22                	sw	s0,24(sp)
20401dac:	1000                	addi	s0,sp,32
20401dae:	fea42623          	sw	a0,-20(s0)
20401db2:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:70
    return uart->vtable->putc(uart, c);
20401db6:	fec42783          	lw	a5,-20(s0)
20401dba:	439c                	lw	a5,0(a5)
20401dbc:	43dc                	lw	a5,4(a5)
20401dbe:	fe842583          	lw	a1,-24(s0)
20401dc2:	fec42503          	lw	a0,-20(s0)
20401dc6:	9782                	jalr	a5
20401dc8:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:71
}
20401dca:	853e                	mv	a0,a5
20401dcc:	40f2                	lw	ra,28(sp)
20401dce:	4462                	lw	s0,24(sp)
20401dd0:	6105                	addi	sp,sp,32
20401dd2:	8082                	ret

20401dd4 <metal_uart_getc>:
metal_uart_getc():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:91
 * @return 0 upon success
 *
 * If "c == -1" no char was ready.
 * If "c != -1" then C == byte value (0x00 to 0xff)
 */
__inline__ int metal_uart_getc(struct metal_uart *uart, int *c) {
20401dd4:	1101                	addi	sp,sp,-32
20401dd6:	ce06                	sw	ra,28(sp)
20401dd8:	cc22                	sw	s0,24(sp)
20401dda:	1000                	addi	s0,sp,32
20401ddc:	fea42623          	sw	a0,-20(s0)
20401de0:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:92
    return uart->vtable->getc(uart, c);
20401de4:	fec42783          	lw	a5,-20(s0)
20401de8:	439c                	lw	a5,0(a5)
20401dea:	47dc                	lw	a5,12(a5)
20401dec:	fe842583          	lw	a1,-24(s0)
20401df0:	fec42503          	lw	a0,-20(s0)
20401df4:	9782                	jalr	a5
20401df6:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:93
}
20401df8:	853e                	mv	a0,a5
20401dfa:	40f2                	lw	ra,28(sp)
20401dfc:	4462                	lw	s0,24(sp)
20401dfe:	6105                	addi	sp,sp,32
20401e00:	8082                	ret

20401e02 <metal_uart_set_baud_rate>:
metal_uart_set_baud_rate():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:111
 * @param uart The UART device handle
 * @param baud_rate The baud rate to configure
 * @return the new baud rate of the UART
 */
__inline__ int metal_uart_set_baud_rate(struct metal_uart *uart,
                                        int baud_rate) {
20401e02:	1101                	addi	sp,sp,-32
20401e04:	ce06                	sw	ra,28(sp)
20401e06:	cc22                	sw	s0,24(sp)
20401e08:	1000                	addi	s0,sp,32
20401e0a:	fea42623          	sw	a0,-20(s0)
20401e0e:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:112
    return uart->vtable->set_baud_rate(uart, baud_rate);
20401e12:	fec42783          	lw	a5,-20(s0)
20401e16:	439c                	lw	a5,0(a5)
20401e18:	4bdc                	lw	a5,20(a5)
20401e1a:	fe842583          	lw	a1,-24(s0)
20401e1e:	fec42503          	lw	a0,-20(s0)
20401e22:	9782                	jalr	a5
20401e24:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/uart.h:113
}
20401e26:	853e                	mv	a0,a5
20401e28:	40f2                	lw	ra,28(sp)
20401e2a:	4462                	lw	s0,24(sp)
20401e2c:	6105                	addi	sp,sp,32
20401e2e:	8082                	ret

20401e30 <__metal_driver_sifive_clint0_control_base>:
__metal_driver_sifive_clint0_control_base():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:150
/* --------------------- fixed_factor_clock ------------ */


/* --------------------- sifive_clint0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_clint0_control_base(struct metal_interrupt *controller)
{
20401e30:	1101                	addi	sp,sp,-32
20401e32:	ce22                	sw	s0,28(sp)
20401e34:	1000                	addi	s0,sp,32
20401e36:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:151
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401e3a:	fec42703          	lw	a4,-20(s0)
20401e3e:	81018793          	addi	a5,gp,-2032 # 80000770 <__metal_dt_clint_2000000>
20401e42:	00f71563          	bne	a4,a5,20401e4c <__metal_driver_sifive_clint0_control_base+0x1c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:152
		return METAL_RISCV_CLINT0_2000000_BASE_ADDRESS;
20401e46:	020007b7          	lui	a5,0x2000
20401e4a:	a011                	j	20401e4e <__metal_driver_sifive_clint0_control_base+0x1e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:155
	}
	else {
		return 0;
20401e4c:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:157
	}
}
20401e4e:	853e                	mv	a0,a5
20401e50:	4472                	lw	s0,28(sp)
20401e52:	6105                	addi	sp,sp,32
20401e54:	8082                	ret

20401e56 <__metal_driver_sifive_clint0_num_interrupts>:
__metal_driver_sifive_clint0_num_interrupts():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:170
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_clint0_num_interrupts(struct metal_interrupt *controller)
{
20401e56:	1101                	addi	sp,sp,-32
20401e58:	ce22                	sw	s0,28(sp)
20401e5a:	1000                	addi	s0,sp,32
20401e5c:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:171
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_clint_2000000) {
20401e60:	fec42703          	lw	a4,-20(s0)
20401e64:	81018793          	addi	a5,gp,-2032 # 80000770 <__metal_dt_clint_2000000>
20401e68:	00f71463          	bne	a4,a5,20401e70 <__metal_driver_sifive_clint0_num_interrupts+0x1a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:172
		return METAL_MAX_CLINT_INTERRUPTS;
20401e6c:	4789                	li	a5,2
20401e6e:	a011                	j	20401e72 <__metal_driver_sifive_clint0_num_interrupts+0x1c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:175
	}
	else {
		return 0;
20401e70:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:177
	}
}
20401e72:	853e                	mv	a0,a5
20401e74:	4472                	lw	s0,28(sp)
20401e76:	6105                	addi	sp,sp,32
20401e78:	8082                	ret

20401e7a <__metal_driver_sifive_clint0_interrupt_parents>:
__metal_driver_sifive_clint0_interrupt_parents():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:180

static __inline__ struct metal_interrupt * __metal_driver_sifive_clint0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20401e7a:	1101                	addi	sp,sp,-32
20401e7c:	ce22                	sw	s0,28(sp)
20401e7e:	1000                	addi	s0,sp,32
20401e80:	fea42623          	sw	a0,-20(s0)
20401e84:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:181
	if (idx == 0) {
20401e88:	fe842783          	lw	a5,-24(s0)
20401e8c:	e791                	bnez	a5,20401e98 <__metal_driver_sifive_clint0_interrupt_parents+0x1e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:182
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401e8e:	800007b7          	lui	a5,0x80000
20401e92:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffebf0>
20401e96:	a821                	j	20401eae <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:184
	}
	else if (idx == 1) {
20401e98:	fe842703          	lw	a4,-24(s0)
20401e9c:	4785                	li	a5,1
20401e9e:	00f71763          	bne	a4,a5,20401eac <__metal_driver_sifive_clint0_interrupt_parents+0x32>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:185
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20401ea2:	800007b7          	lui	a5,0x80000
20401ea6:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffebf0>
20401eaa:	a011                	j	20401eae <__metal_driver_sifive_clint0_interrupt_parents+0x34>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:188
	}
	else {
		return NULL;
20401eac:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:190
	}
}
20401eae:	853e                	mv	a0,a5
20401eb0:	4472                	lw	s0,28(sp)
20401eb2:	6105                	addi	sp,sp,32
20401eb4:	8082                	ret

20401eb6 <__metal_driver_sifive_clint0_interrupt_lines>:
__metal_driver_sifive_clint0_interrupt_lines():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:193

static __inline__ int __metal_driver_sifive_clint0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
20401eb6:	1101                	addi	sp,sp,-32
20401eb8:	ce22                	sw	s0,28(sp)
20401eba:	1000                	addi	s0,sp,32
20401ebc:	fea42623          	sw	a0,-20(s0)
20401ec0:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:194
	if (idx == 0) {
20401ec4:	fe842783          	lw	a5,-24(s0)
20401ec8:	e399                	bnez	a5,20401ece <__metal_driver_sifive_clint0_interrupt_lines+0x18>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:195
		return 3;
20401eca:	478d                	li	a5,3
20401ecc:	a809                	j	20401ede <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:197
	}
	else if (idx == 1) {
20401ece:	fe842703          	lw	a4,-24(s0)
20401ed2:	4785                	li	a5,1
20401ed4:	00f71463          	bne	a4,a5,20401edc <__metal_driver_sifive_clint0_interrupt_lines+0x26>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:198
		return 7;
20401ed8:	479d                	li	a5,7
20401eda:	a011                	j	20401ede <__metal_driver_sifive_clint0_interrupt_lines+0x28>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:201
	}
	else {
		return 0;
20401edc:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:203
	}
}
20401ede:	853e                	mv	a0,a5
20401ee0:	4472                	lw	s0,28(sp)
20401ee2:	6105                	addi	sp,sp,32
20401ee4:	8082                	ret

20401ee6 <__metal_clint0_mtime_get>:
__metal_clint0_mtime_get():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:14
#include <metal/drivers/riscv_clint0.h>
#include <metal/io.h>
#include <metal/machine.h>

unsigned long long
__metal_clint0_mtime_get(struct __metal_driver_riscv_clint0 *clint) {
20401ee6:	715d                	addi	sp,sp,-80
20401ee8:	c686                	sw	ra,76(sp)
20401eea:	c4a2                	sw	s0,72(sp)
20401eec:	c2ca                	sw	s2,68(sp)
20401eee:	c0ce                	sw	s3,64(sp)
20401ef0:	de52                	sw	s4,60(sp)
20401ef2:	dc56                	sw	s5,56(sp)
20401ef4:	da5a                	sw	s6,52(sp)
20401ef6:	d85e                	sw	s7,48(sp)
20401ef8:	d662                	sw	s8,44(sp)
20401efa:	d466                	sw	s9,40(sp)
20401efc:	0880                	addi	s0,sp,80
20401efe:	faa42e23          	sw	a0,-68(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:17
    __metal_io_u32 lo, hi;
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
20401f02:	fbc42783          	lw	a5,-68(s0)
20401f06:	853e                	mv	a0,a5
20401f08:	3725                	jal	20401e30 <__metal_driver_sifive_clint0_control_base>
20401f0a:	fca42623          	sw	a0,-52(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:21 (discriminator 1)

    /* Guard against rollover when reading */
    do {
        hi = __METAL_ACCESS_ONCE(
20401f0e:	fcc42703          	lw	a4,-52(s0)
20401f12:	67b1                	lui	a5,0xc
20401f14:	17f1                	addi	a5,a5,-4
20401f16:	97ba                	add	a5,a5,a4
20401f18:	439c                	lw	a5,0(a5)
20401f1a:	fcf42423          	sw	a5,-56(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:23 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME + 4));
        lo = __METAL_ACCESS_ONCE(
20401f1e:	fcc42703          	lw	a4,-52(s0)
20401f22:	67b1                	lui	a5,0xc
20401f24:	17e1                	addi	a5,a5,-8
20401f26:	97ba                	add	a5,a5,a4
20401f28:	439c                	lw	a5,0(a5)
20401f2a:	fcf42223          	sw	a5,-60(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:25 (discriminator 1)
            (__metal_io_u32 *)(control_base + METAL_RISCV_CLINT0_MTIME));
    } while (__METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base +
20401f2e:	fcc42703          	lw	a4,-52(s0)
20401f32:	67b1                	lui	a5,0xc
20401f34:	17f1                	addi	a5,a5,-4
20401f36:	97ba                	add	a5,a5,a4
20401f38:	439c                	lw	a5,0(a5)
20401f3a:	fc842703          	lw	a4,-56(s0)
20401f3e:	fcf718e3          	bne	a4,a5,20401f0e <__metal_clint0_mtime_get+0x28>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:29
                                                    METAL_RISCV_CLINT0_MTIME +
                                                    4)) != hi);

    return (((unsigned long long)hi) << 32) | lo;
20401f42:	fc842783          	lw	a5,-56(s0)
20401f46:	8c3e                	mv	s8,a5
20401f48:	4c81                	li	s9,0
20401f4a:	000c1993          	slli	s3,s8,0x0
20401f4e:	4901                	li	s2,0
20401f50:	fc442783          	lw	a5,-60(s0)
20401f54:	8a3e                	mv	s4,a5
20401f56:	4a81                	li	s5,0
20401f58:	01496b33          	or	s6,s2,s4
20401f5c:	0159ebb3          	or	s7,s3,s5
20401f60:	875a                	mv	a4,s6
20401f62:	87de                	mv	a5,s7
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:30
}
20401f64:	853a                	mv	a0,a4
20401f66:	85be                	mv	a1,a5
20401f68:	40b6                	lw	ra,76(sp)
20401f6a:	4426                	lw	s0,72(sp)
20401f6c:	4916                	lw	s2,68(sp)
20401f6e:	4986                	lw	s3,64(sp)
20401f70:	5a72                	lw	s4,60(sp)
20401f72:	5ae2                	lw	s5,56(sp)
20401f74:	5b52                	lw	s6,52(sp)
20401f76:	5bc2                	lw	s7,48(sp)
20401f78:	5c32                	lw	s8,44(sp)
20401f7a:	5ca2                	lw	s9,40(sp)
20401f7c:	6161                	addi	sp,sp,80
20401f7e:	8082                	ret

20401f80 <__metal_driver_riscv_clint0_mtimecmp_set>:
__metal_driver_riscv_clint0_mtimecmp_set():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:34

int __metal_driver_riscv_clint0_mtimecmp_set(struct metal_interrupt *controller,
                                             int hartid,
                                             unsigned long long time) {
20401f80:	7179                	addi	sp,sp,-48
20401f82:	d606                	sw	ra,44(sp)
20401f84:	d422                	sw	s0,40(sp)
20401f86:	d24a                	sw	s2,36(sp)
20401f88:	d04e                	sw	s3,32(sp)
20401f8a:	1800                	addi	s0,sp,48
20401f8c:	fca42e23          	sw	a0,-36(s0)
20401f90:	fcb42c23          	sw	a1,-40(s0)
20401f94:	fcc42823          	sw	a2,-48(s0)
20401f98:	fcd42a23          	sw	a3,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:35
    struct __metal_driver_riscv_clint0 *clint =
20401f9c:	fdc42783          	lw	a5,-36(s0)
20401fa0:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:38
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(&clint->controller);
20401fa4:	fec42783          	lw	a5,-20(s0)
20401fa8:	853e                	mv	a0,a5
20401faa:	3559                	jal	20401e30 <__metal_driver_sifive_clint0_control_base>
20401fac:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:45
     * and are NOT internally latched for multiword transfers.
     * Need to be careful about sequencing to avoid triggering
     * spurious interrupts: For that set the high word to a max
     * value first.
     */
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
20401fb0:	fd842783          	lw	a5,-40(s0)
20401fb4:	078e                	slli	a5,a5,0x3
20401fb6:	873e                	mv	a4,a5
20401fb8:	fe842783          	lw	a5,-24(s0)
20401fbc:	973e                	add	a4,a4,a5
20401fbe:	6791                	lui	a5,0x4
20401fc0:	0791                	addi	a5,a5,4
20401fc2:	97ba                	add	a5,a5,a4
20401fc4:	873e                	mv	a4,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:47
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = 0xFFFFFFFF;
20401fc6:	57fd                	li	a5,-1
20401fc8:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:48
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
20401fca:	fd842783          	lw	a5,-40(s0)
20401fce:	078e                	slli	a5,a5,0x3
20401fd0:	873e                	mv	a4,a5
20401fd2:	fe842783          	lw	a5,-24(s0)
20401fd6:	973e                	add	a4,a4,a5
20401fd8:	6791                	lui	a5,0x4
20401fda:	97ba                	add	a5,a5,a4
20401fdc:	873e                	mv	a4,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:50
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
        (__metal_io_u32)time;
20401fde:	fd042783          	lw	a5,-48(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:49
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE)) =
20401fe2:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:53
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
                                           METAL_RISCV_CLINT0_MTIMECMP_BASE +
                                           4)) = (__metal_io_u32)(time >> 32);
20401fe4:	fd442783          	lw	a5,-44(s0)
20401fe8:	0007d913          	srli	s2,a5,0x0
20401fec:	4981                	li	s3,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:51
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(control_base + (8 * hartid) +
20401fee:	fd842783          	lw	a5,-40(s0)
20401ff2:	078e                	slli	a5,a5,0x3
20401ff4:	873e                	mv	a4,a5
20401ff6:	fe842783          	lw	a5,-24(s0)
20401ffa:	973e                	add	a4,a4,a5
20401ffc:	6791                	lui	a5,0x4
20401ffe:	0791                	addi	a5,a5,4
20402000:	97ba                	add	a5,a5,a4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:53
                                           4)) = (__metal_io_u32)(time >> 32);
20402002:	874a                	mv	a4,s2
20402004:	c398                	sw	a4,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:54
    return 0;
20402006:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:55
}
20402008:	853e                	mv	a0,a5
2040200a:	50b2                	lw	ra,44(sp)
2040200c:	5422                	lw	s0,40(sp)
2040200e:	5912                	lw	s2,36(sp)
20402010:	5982                	lw	s3,32(sp)
20402012:	6145                	addi	sp,sp,48
20402014:	8082                	ret

20402016 <_get_cpu_intc>:
_get_cpu_intc():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:57

static struct metal_interrupt *_get_cpu_intc() {
20402016:	1101                	addi	sp,sp,-32
20402018:	ce06                	sw	ra,28(sp)
2040201a:	cc22                	sw	s0,24(sp)
2040201c:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:58
    int hartid = 0;
2040201e:	fe042623          	sw	zero,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:59
    __asm__ volatile("csrr %[hartid], mhartid"
20402022:	f14027f3          	csrr	a5,mhartid
20402026:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:62
                     : [hartid] "=r"(hartid)::"memory");

    struct metal_cpu *cpu = metal_cpu_get(hartid);
2040202a:	fec42783          	lw	a5,-20(s0)
2040202e:	853e                	mv	a0,a5
20402030:	3e7d                	jal	20401bee <metal_cpu_get>
20402032:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:64

    return metal_cpu_interrupt_controller(cpu);
20402036:	fe842503          	lw	a0,-24(s0)
2040203a:	3679                	jal	20401bc8 <metal_cpu_interrupt_controller>
2040203c:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:65
}
2040203e:	853e                	mv	a0,a5
20402040:	40f2                	lw	ra,28(sp)
20402042:	4462                	lw	s0,24(sp)
20402044:	6105                	addi	sp,sp,32
20402046:	8082                	ret

20402048 <__metal_driver_riscv_clint0_init>:
__metal_driver_riscv_clint0_init():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:67

void __metal_driver_riscv_clint0_init(struct metal_interrupt *controller) {
20402048:	7139                	addi	sp,sp,-64
2040204a:	de06                	sw	ra,60(sp)
2040204c:	dc22                	sw	s0,56(sp)
2040204e:	0080                	addi	s0,sp,64
20402050:	fca42623          	sw	a0,-52(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:69
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
20402054:	fcc42503          	lw	a0,-52(s0)
20402058:	3bfd                	jal	20401e56 <__metal_driver_sifive_clint0_num_interrupts>
2040205a:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:70
    struct __metal_driver_riscv_clint0 *clint =
2040205e:	fcc42783          	lw	a5,-52(s0)
20402062:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:73
        (struct __metal_driver_riscv_clint0 *)(controller);

    if (!clint->init_done) {
20402066:	fe442783          	lw	a5,-28(s0)
2040206a:	43dc                	lw	a5,4(a5)
2040206c:	efa9                	bnez	a5,204020c6 <__metal_driver_riscv_clint0_init+0x7e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:76
        /* Register its interrupts with with parent controller, aka sw and
         * timerto its default isr */
        for (int i = 0; i < num_interrupts; i++) {
2040206e:	fe042623          	sw	zero,-20(s0)
20402072:	a081                	j	204020b2 <__metal_driver_riscv_clint0_init+0x6a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:78 (discriminator 3)
            struct metal_interrupt *intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402074:	fec42583          	lw	a1,-20(s0)
20402078:	fcc42503          	lw	a0,-52(s0)
2040207c:	3bfd                	jal	20401e7a <__metal_driver_sifive_clint0_interrupt_parents>
2040207e:	fea42023          	sw	a0,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:80 (discriminator 3)
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402082:	fec42583          	lw	a1,-20(s0)
20402086:	fcc42503          	lw	a0,-52(s0)
2040208a:	3535                	jal	20401eb6 <__metal_driver_sifive_clint0_interrupt_lines>
2040208c:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:81 (discriminator 3)
            intc->vtable->interrupt_register(intc, line, NULL, controller);
20402090:	fe042783          	lw	a5,-32(s0)
20402094:	439c                	lw	a5,0(a5)
20402096:	4fdc                	lw	a5,28(a5)
20402098:	fcc42683          	lw	a3,-52(s0)
2040209c:	4601                	li	a2,0
2040209e:	fdc42583          	lw	a1,-36(s0)
204020a2:	fe042503          	lw	a0,-32(s0)
204020a6:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:76 (discriminator 3)
        for (int i = 0; i < num_interrupts; i++) {
204020a8:	fec42783          	lw	a5,-20(s0)
204020ac:	0785                	addi	a5,a5,1
204020ae:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:76 (discriminator 1)
204020b2:	fec42703          	lw	a4,-20(s0)
204020b6:	fe842783          	lw	a5,-24(s0)
204020ba:	faf74de3          	blt	a4,a5,20402074 <__metal_driver_riscv_clint0_init+0x2c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:83
        }
        clint->init_done = 1;
204020be:	fe442783          	lw	a5,-28(s0)
204020c2:	4705                	li	a4,1
204020c4:	c3d8                	sw	a4,4(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:85
    }
}
204020c6:	0001                	nop
204020c8:	50f2                	lw	ra,60(sp)
204020ca:	5462                	lw	s0,56(sp)
204020cc:	6121                	addi	sp,sp,64
204020ce:	8082                	ret

204020d0 <__metal_driver_riscv_clint0_register>:
__metal_driver_riscv_clint0_register():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:89

int __metal_driver_riscv_clint0_register(struct metal_interrupt *controller,
                                         int id, metal_interrupt_handler_t isr,
                                         void *priv) {
204020d0:	7139                	addi	sp,sp,-64
204020d2:	de06                	sw	ra,60(sp)
204020d4:	dc22                	sw	s0,56(sp)
204020d6:	0080                	addi	s0,sp,64
204020d8:	fca42623          	sw	a0,-52(s0)
204020dc:	fcb42423          	sw	a1,-56(s0)
204020e0:	fcc42223          	sw	a2,-60(s0)
204020e4:	fcd42023          	sw	a3,-64(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:90
    int rc = -1;
204020e8:	57fd                	li	a5,-1
204020ea:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:91
    metal_vector_mode mode = __metal_controller_interrupt_vector_mode();
204020ee:	46c010ef          	jal	ra,2040355a <__metal_controller_interrupt_vector_mode>
204020f2:	fea42023          	sw	a0,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:92
    struct metal_interrupt *intc = NULL;
204020f6:	fe042423          	sw	zero,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:93
    struct metal_interrupt *cpu_intc = _get_cpu_intc();
204020fa:	3f31                	jal	20402016 <_get_cpu_intc>
204020fc:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:95
    int num_interrupts =
        __metal_driver_sifive_clint0_num_interrupts(controller);
20402100:	fcc42503          	lw	a0,-52(s0)
20402104:	3b89                	jal	20401e56 <__metal_driver_sifive_clint0_num_interrupts>
20402106:	fca42c23          	sw	a0,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:97

    if ((mode != METAL_VECTOR_MODE) && (mode != METAL_DIRECT_MODE)) {
2040210a:	fe042703          	lw	a4,-32(s0)
2040210e:	4785                	li	a5,1
20402110:	00f70863          	beq	a4,a5,20402120 <__metal_driver_riscv_clint0_register+0x50>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:97 (discriminator 1)
20402114:	fe042783          	lw	a5,-32(s0)
20402118:	c781                	beqz	a5,20402120 <__metal_driver_riscv_clint0_register+0x50>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:98
        return rc;
2040211a:	fec42783          	lw	a5,-20(s0)
2040211e:	a049                	j	204021a0 <__metal_driver_riscv_clint0_register+0xd0>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101
    }

    for (int i = 0; i < num_interrupts; i++) {
20402120:	fe042223          	sw	zero,-28(s0)
20402124:	a091                	j	20402168 <__metal_driver_riscv_clint0_register+0x98>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:102
        int line = __metal_driver_sifive_clint0_interrupt_lines(controller, i);
20402126:	fe442583          	lw	a1,-28(s0)
2040212a:	fcc42503          	lw	a0,-52(s0)
2040212e:	3361                	jal	20401eb6 <__metal_driver_sifive_clint0_interrupt_lines>
20402130:	fca42a23          	sw	a0,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:103
        intc = __metal_driver_sifive_clint0_interrupt_parents(controller, i);
20402134:	fe442583          	lw	a1,-28(s0)
20402138:	fcc42503          	lw	a0,-52(s0)
2040213c:	3b3d                	jal	20401e7a <__metal_driver_sifive_clint0_interrupt_parents>
2040213e:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:104
        if (cpu_intc == intc && id == line) {
20402142:	fdc42703          	lw	a4,-36(s0)
20402146:	fe842783          	lw	a5,-24(s0)
2040214a:	00f71863          	bne	a4,a5,2040215a <__metal_driver_riscv_clint0_register+0x8a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:104 (discriminator 1)
2040214e:	fc842703          	lw	a4,-56(s0)
20402152:	fd442783          	lw	a5,-44(s0)
20402156:	02f70063          	beq	a4,a5,20402176 <__metal_driver_riscv_clint0_register+0xa6>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:107 (discriminator 2)
            break;
        }
        intc = NULL;
2040215a:	fe042423          	sw	zero,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 2)
    for (int i = 0; i < num_interrupts; i++) {
2040215e:	fe442783          	lw	a5,-28(s0)
20402162:	0785                	addi	a5,a5,1
20402164:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:101 (discriminator 1)
20402168:	fe442703          	lw	a4,-28(s0)
2040216c:	fd842783          	lw	a5,-40(s0)
20402170:	faf74be3          	blt	a4,a5,20402126 <__metal_driver_riscv_clint0_register+0x56>
20402174:	a011                	j	20402178 <__metal_driver_riscv_clint0_register+0xa8>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:105
            break;
20402176:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:111
    }

    /* Register its interrupts with parent controller */
    if (intc) {
20402178:	fe842783          	lw	a5,-24(s0)
2040217c:	c385                	beqz	a5,2040219c <__metal_driver_riscv_clint0_register+0xcc>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:112
        rc = intc->vtable->interrupt_register(intc, id, isr, priv);
2040217e:	fe842783          	lw	a5,-24(s0)
20402182:	439c                	lw	a5,0(a5)
20402184:	4fdc                	lw	a5,28(a5)
20402186:	fc042683          	lw	a3,-64(s0)
2040218a:	fc442603          	lw	a2,-60(s0)
2040218e:	fc842583          	lw	a1,-56(s0)
20402192:	fe842503          	lw	a0,-24(s0)
20402196:	9782                	jalr	a5
20402198:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:114
    }
    return rc;
2040219c:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:115
}
204021a0:	853e                	mv	a0,a5
204021a2:	50f2                	lw	ra,60(sp)
204021a4:	5462                	lw	s0,56(sp)
204021a6:	6121                	addi	sp,sp,64
204021a8:	8082                	ret

204021aa <__metal_driver_riscv_clint0_vector_register>:
__metal_driver_riscv_clint0_vector_register():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:119

int __metal_driver_riscv_clint0_vector_register(
    struct metal_interrupt *controller, int id,
    metal_interrupt_vector_handler_t isr, void *priv) {
204021aa:	7179                	addi	sp,sp,-48
204021ac:	d622                	sw	s0,44(sp)
204021ae:	1800                	addi	s0,sp,48
204021b0:	fca42e23          	sw	a0,-36(s0)
204021b4:	fcb42c23          	sw	a1,-40(s0)
204021b8:	fcc42a23          	sw	a2,-44(s0)
204021bc:	fcd42823          	sw	a3,-48(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:121
    /* Not supported. User can override the 'weak' handler with their own */
    int rc = -1;
204021c0:	57fd                	li	a5,-1
204021c2:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:122
    return rc;
204021c6:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:123
}
204021ca:	853e                	mv	a0,a5
204021cc:	5432                	lw	s0,44(sp)
204021ce:	6145                	addi	sp,sp,48
204021d0:	8082                	ret

204021d2 <__metal_driver_riscv_clint0_get_vector_mode>:
__metal_driver_riscv_clint0_get_vector_mode():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:126

metal_vector_mode __metal_driver_riscv_clint0_get_vector_mode(
    struct metal_interrupt *controller) {
204021d2:	1101                	addi	sp,sp,-32
204021d4:	ce06                	sw	ra,28(sp)
204021d6:	cc22                	sw	s0,24(sp)
204021d8:	1000                	addi	s0,sp,32
204021da:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:127
    return __metal_controller_interrupt_vector_mode();
204021de:	37c010ef          	jal	ra,2040355a <__metal_controller_interrupt_vector_mode>
204021e2:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:128
}
204021e4:	853e                	mv	a0,a5
204021e6:	40f2                	lw	ra,28(sp)
204021e8:	4462                	lw	s0,24(sp)
204021ea:	6105                	addi	sp,sp,32
204021ec:	8082                	ret

204021ee <__metal_driver_riscv_clint0_set_vector_mode>:
__metal_driver_riscv_clint0_set_vector_mode():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:131

int __metal_driver_riscv_clint0_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
204021ee:	7179                	addi	sp,sp,-48
204021f0:	d606                	sw	ra,44(sp)
204021f2:	d422                	sw	s0,40(sp)
204021f4:	1800                	addi	s0,sp,48
204021f6:	fca42e23          	sw	a0,-36(s0)
204021fa:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:132
    int rc = -1;
204021fe:	57fd                	li	a5,-1
20402200:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:133
    struct metal_interrupt *intc = _get_cpu_intc();
20402204:	3d09                	jal	20402016 <_get_cpu_intc>
20402206:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:135

    if (intc) {
2040220a:	fe842783          	lw	a5,-24(s0)
2040220e:	c395                	beqz	a5,20402232 <__metal_driver_riscv_clint0_set_vector_mode+0x44>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:138
        /* Valid vector modes are VECTOR and DIRECT, anything else is invalid
         * (-1) */
        switch (mode) {
20402210:	fd842703          	lw	a4,-40(s0)
20402214:	4785                	li	a5,1
20402216:	02e7e063          	bltu	a5,a4,20402236 <__metal_driver_riscv_clint0_set_vector_mode+0x48>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:141
        case METAL_VECTOR_MODE:
        case METAL_DIRECT_MODE:
            rc = intc->vtable->interrupt_set_vector_mode(intc, mode);
2040221a:	fe842783          	lw	a5,-24(s0)
2040221e:	439c                	lw	a5,0(a5)
20402220:	43dc                	lw	a5,4(a5)
20402222:	fd842583          	lw	a1,-40(s0)
20402226:	fe842503          	lw	a0,-24(s0)
2040222a:	9782                	jalr	a5
2040222c:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:142
            break;
20402230:	a021                	j	20402238 <__metal_driver_riscv_clint0_set_vector_mode+0x4a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:146
        default:
            break;
        }
    }
20402232:	0001                	nop
20402234:	a011                	j	20402238 <__metal_driver_riscv_clint0_set_vector_mode+0x4a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:144
            break;
20402236:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:147
    return rc;
20402238:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:148
}
2040223c:	853e                	mv	a0,a5
2040223e:	50b2                	lw	ra,44(sp)
20402240:	5422                	lw	s0,40(sp)
20402242:	6145                	addi	sp,sp,48
20402244:	8082                	ret

20402246 <__metal_driver_riscv_clint0_enable>:
__metal_driver_riscv_clint0_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:151

int __metal_driver_riscv_clint0_enable(struct metal_interrupt *controller,
                                       int id) {
20402246:	7139                	addi	sp,sp,-64
20402248:	de06                	sw	ra,60(sp)
2040224a:	dc22                	sw	s0,56(sp)
2040224c:	0080                	addi	s0,sp,64
2040224e:	fca42623          	sw	a0,-52(s0)
20402252:	fcb42423          	sw	a1,-56(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:152
    int rc = -1;
20402256:	57fd                	li	a5,-1
20402258:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:154

    if (id) {
2040225c:	fc842783          	lw	a5,-56(s0)
20402260:	c7c9                	beqz	a5,204022ea <__metal_driver_riscv_clint0_enable+0xa4>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:155
        struct metal_interrupt *intc = NULL;
20402262:	fe042423          	sw	zero,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:156
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402266:	3b45                	jal	20402016 <_get_cpu_intc>
20402268:	fea42023          	sw	a0,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:158
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
2040226c:	fcc42503          	lw	a0,-52(s0)
20402270:	36dd                	jal	20401e56 <__metal_driver_sifive_clint0_num_interrupts>
20402272:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160

        for (int i = 0; i < num_interrupts; i++) {
20402276:	fe042223          	sw	zero,-28(s0)
2040227a:	a091                	j	204022be <__metal_driver_riscv_clint0_enable+0x78>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:162
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040227c:	fe442583          	lw	a1,-28(s0)
20402280:	fcc42503          	lw	a0,-52(s0)
20402284:	390d                	jal	20401eb6 <__metal_driver_sifive_clint0_interrupt_lines>
20402286:	fca42c23          	sw	a0,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:164
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040228a:	fe442583          	lw	a1,-28(s0)
2040228e:	fcc42503          	lw	a0,-52(s0)
20402292:	36e5                	jal	20401e7a <__metal_driver_sifive_clint0_interrupt_parents>
20402294:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:165
            if (cpu_intc == intc && id == line) {
20402298:	fe042703          	lw	a4,-32(s0)
2040229c:	fe842783          	lw	a5,-24(s0)
204022a0:	00f71863          	bne	a4,a5,204022b0 <__metal_driver_riscv_clint0_enable+0x6a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:165 (discriminator 1)
204022a4:	fc842703          	lw	a4,-56(s0)
204022a8:	fd842783          	lw	a5,-40(s0)
204022ac:	02f70063          	beq	a4,a5,204022cc <__metal_driver_riscv_clint0_enable+0x86>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:168 (discriminator 2)
                break;
            }
            intc = NULL;
204022b0:	fe042423          	sw	zero,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
204022b4:	fe442783          	lw	a5,-28(s0)
204022b8:	0785                	addi	a5,a5,1
204022ba:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:160 (discriminator 1)
204022be:	fe442703          	lw	a4,-28(s0)
204022c2:	fdc42783          	lw	a5,-36(s0)
204022c6:	faf74be3          	blt	a4,a5,2040227c <__metal_driver_riscv_clint0_enable+0x36>
204022ca:	a011                	j	204022ce <__metal_driver_riscv_clint0_enable+0x88>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:166
                break;
204022cc:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:172
        }

        /* Enable its interrupts with parent controller */
        if (intc) {
204022ce:	fe842783          	lw	a5,-24(s0)
204022d2:	cf81                	beqz	a5,204022ea <__metal_driver_riscv_clint0_enable+0xa4>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:173
            rc = intc->vtable->interrupt_enable(intc, id);
204022d4:	fe842783          	lw	a5,-24(s0)
204022d8:	439c                	lw	a5,0(a5)
204022da:	53dc                	lw	a5,36(a5)
204022dc:	fc842583          	lw	a1,-56(s0)
204022e0:	fe842503          	lw	a0,-24(s0)
204022e4:	9782                	jalr	a5
204022e6:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:177
        }
    }

    return rc;
204022ea:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:178
}
204022ee:	853e                	mv	a0,a5
204022f0:	50f2                	lw	ra,60(sp)
204022f2:	5462                	lw	s0,56(sp)
204022f4:	6121                	addi	sp,sp,64
204022f6:	8082                	ret

204022f8 <__metal_driver_riscv_clint0_disable>:
__metal_driver_riscv_clint0_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:181

int __metal_driver_riscv_clint0_disable(struct metal_interrupt *controller,
                                        int id) {
204022f8:	7139                	addi	sp,sp,-64
204022fa:	de06                	sw	ra,60(sp)
204022fc:	dc22                	sw	s0,56(sp)
204022fe:	0080                	addi	s0,sp,64
20402300:	fca42623          	sw	a0,-52(s0)
20402304:	fcb42423          	sw	a1,-56(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:182
    int rc = -1;
20402308:	57fd                	li	a5,-1
2040230a:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:184

    if (id) {
2040230e:	fc842783          	lw	a5,-56(s0)
20402312:	c7c9                	beqz	a5,2040239c <__metal_driver_riscv_clint0_disable+0xa4>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:185
        struct metal_interrupt *intc = NULL;
20402314:	fe042423          	sw	zero,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:186
        struct metal_interrupt *cpu_intc = _get_cpu_intc();
20402318:	39fd                	jal	20402016 <_get_cpu_intc>
2040231a:	fea42023          	sw	a0,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:188
        int num_interrupts =
            __metal_driver_sifive_clint0_num_interrupts(controller);
2040231e:	fcc42503          	lw	a0,-52(s0)
20402322:	3e15                	jal	20401e56 <__metal_driver_sifive_clint0_num_interrupts>
20402324:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:190

        for (int i = 0; i < num_interrupts; i++) {
20402328:	fe042223          	sw	zero,-28(s0)
2040232c:	a091                	j	20402370 <__metal_driver_riscv_clint0_disable+0x78>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:192
            int line =
                __metal_driver_sifive_clint0_interrupt_lines(controller, i);
2040232e:	fe442583          	lw	a1,-28(s0)
20402332:	fcc42503          	lw	a0,-52(s0)
20402336:	3641                	jal	20401eb6 <__metal_driver_sifive_clint0_interrupt_lines>
20402338:	fca42c23          	sw	a0,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:194
            intc =
                __metal_driver_sifive_clint0_interrupt_parents(controller, i);
2040233c:	fe442583          	lw	a1,-28(s0)
20402340:	fcc42503          	lw	a0,-52(s0)
20402344:	3e1d                	jal	20401e7a <__metal_driver_sifive_clint0_interrupt_parents>
20402346:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:195
            if (cpu_intc == intc && id == line) {
2040234a:	fe042703          	lw	a4,-32(s0)
2040234e:	fe842783          	lw	a5,-24(s0)
20402352:	00f71863          	bne	a4,a5,20402362 <__metal_driver_riscv_clint0_disable+0x6a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:195 (discriminator 1)
20402356:	fc842703          	lw	a4,-56(s0)
2040235a:	fd842783          	lw	a5,-40(s0)
2040235e:	02f70063          	beq	a4,a5,2040237e <__metal_driver_riscv_clint0_disable+0x86>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:198 (discriminator 2)
                break;
            }
            intc = NULL;
20402362:	fe042423          	sw	zero,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 2)
        for (int i = 0; i < num_interrupts; i++) {
20402366:	fe442783          	lw	a5,-28(s0)
2040236a:	0785                	addi	a5,a5,1
2040236c:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:190 (discriminator 1)
20402370:	fe442703          	lw	a4,-28(s0)
20402374:	fdc42783          	lw	a5,-36(s0)
20402378:	faf74be3          	blt	a4,a5,2040232e <__metal_driver_riscv_clint0_disable+0x36>
2040237c:	a011                	j	20402380 <__metal_driver_riscv_clint0_disable+0x88>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:196
                break;
2040237e:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:202
        }

        /* Disable its interrupts with parent controller */
        if (intc) {
20402380:	fe842783          	lw	a5,-24(s0)
20402384:	cf81                	beqz	a5,2040239c <__metal_driver_riscv_clint0_disable+0xa4>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:203
            rc = intc->vtable->interrupt_disable(intc, id);
20402386:	fe842783          	lw	a5,-24(s0)
2040238a:	439c                	lw	a5,0(a5)
2040238c:	579c                	lw	a5,40(a5)
2040238e:	fc842583          	lw	a1,-56(s0)
20402392:	fe842503          	lw	a0,-24(s0)
20402396:	9782                	jalr	a5
20402398:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:207
        }
    }

    return rc;
2040239c:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:208
}
204023a0:	853e                	mv	a0,a5
204023a2:	50f2                	lw	ra,60(sp)
204023a4:	5462                	lw	s0,56(sp)
204023a6:	6121                	addi	sp,sp,64
204023a8:	8082                	ret

204023aa <__metal_driver_riscv_clint0_command_request>:
__metal_driver_riscv_clint0_command_request():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:211

int __metal_driver_riscv_clint0_command_request(
    struct metal_interrupt *controller, int command, void *data) {
204023aa:	7179                	addi	sp,sp,-48
204023ac:	d606                	sw	ra,44(sp)
204023ae:	d422                	sw	s0,40(sp)
204023b0:	1800                	addi	s0,sp,48
204023b2:	fca42e23          	sw	a0,-36(s0)
204023b6:	fcb42c23          	sw	a1,-40(s0)
204023ba:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:213
    int hartid;
    int rc = -1;
204023be:	57fd                	li	a5,-1
204023c0:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:214
    struct __metal_driver_riscv_clint0 *clint =
204023c4:	fdc42783          	lw	a5,-36(s0)
204023c8:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:217
        (struct __metal_driver_riscv_clint0 *)(controller);
    unsigned long control_base =
        __metal_driver_sifive_clint0_control_base(controller);
204023cc:	fdc42503          	lw	a0,-36(s0)
204023d0:	a61ff0ef          	jal	ra,20401e30 <__metal_driver_sifive_clint0_control_base>
204023d4:	fea42223          	sw	a0,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:219

    switch (command) {
204023d8:	fd842703          	lw	a4,-40(s0)
204023dc:	4791                	li	a5,4
204023de:	0cf70163          	beq	a4,a5,204024a0 <__metal_driver_riscv_clint0_command_request+0xf6>
204023e2:	fd842703          	lw	a4,-40(s0)
204023e6:	4791                	li	a5,4
204023e8:	0ee7c163          	blt	a5,a4,204024ca <__metal_driver_riscv_clint0_command_request+0x120>
204023ec:	fd842703          	lw	a4,-40(s0)
204023f0:	478d                	li	a5,3
204023f2:	06f70663          	beq	a4,a5,2040245e <__metal_driver_riscv_clint0_command_request+0xb4>
204023f6:	fd842703          	lw	a4,-40(s0)
204023fa:	478d                	li	a5,3
204023fc:	0ce7c763          	blt	a5,a4,204024ca <__metal_driver_riscv_clint0_command_request+0x120>
20402400:	fd842703          	lw	a4,-40(s0)
20402404:	4785                	li	a5,1
20402406:	00f70863          	beq	a4,a5,20402416 <__metal_driver_riscv_clint0_command_request+0x6c>
2040240a:	fd842703          	lw	a4,-40(s0)
2040240e:	4789                	li	a5,2
20402410:	02f70363          	beq	a4,a5,20402436 <__metal_driver_riscv_clint0_command_request+0x8c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:263
            rc = __METAL_ACCESS_ONCE(
                (__metal_io_u32 *)(control_base + (hartid * 4)));
        }
        break;
    default:
        break;
20402414:	a85d                	j	204024ca <__metal_driver_riscv_clint0_command_request+0x120>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:221
        if (data) {
20402416:	fd442783          	lw	a5,-44(s0)
2040241a:	cbd5                	beqz	a5,204024ce <__metal_driver_riscv_clint0_command_request+0x124>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:222
            *(unsigned long long *)data = __metal_clint0_mtime_get(clint);
2040241c:	fe842503          	lw	a0,-24(s0)
20402420:	ac7ff0ef          	jal	ra,20401ee6 <__metal_clint0_mtime_get>
20402424:	872a                	mv	a4,a0
20402426:	87ae                	mv	a5,a1
20402428:	fd442683          	lw	a3,-44(s0)
2040242c:	c298                	sw	a4,0(a3)
2040242e:	c2dc                	sw	a5,4(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:223
            rc = 0;
20402430:	fe042623          	sw	zero,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:225
        break;
20402434:	a869                	j	204024ce <__metal_driver_riscv_clint0_command_request+0x124>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:227
        if (data) {
20402436:	fd442783          	lw	a5,-44(s0)
2040243a:	cfc1                	beqz	a5,204024d2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:228
            hartid = *(int *)data;
2040243c:	fd442783          	lw	a5,-44(s0)
20402440:	439c                	lw	a5,0(a5)
20402442:	fef42023          	sw	a5,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:229
            __METAL_ACCESS_ONCE((
20402446:	fe042783          	lw	a5,-32(s0)
2040244a:	078a                	slli	a5,a5,0x2
2040244c:	873e                	mv	a4,a5
2040244e:	fe442783          	lw	a5,-28(s0)
20402452:	97ba                	add	a5,a5,a4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:230
                __metal_io_u32 *)(control_base + (hartid * 4))) = METAL_DISABLE;
20402454:	0007a023          	sw	zero,0(a5) # 4000 <__heap_size+0x3800>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:231
            rc = 0;
20402458:	fe042623          	sw	zero,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:233
        break;
2040245c:	a89d                	j	204024d2 <__metal_driver_riscv_clint0_command_request+0x128>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:235
        if (data) {
2040245e:	fd442783          	lw	a5,-44(s0)
20402462:	cbb5                	beqz	a5,204024d6 <__metal_driver_riscv_clint0_command_request+0x12c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:236
            hartid = *(int *)data;
20402464:	fd442783          	lw	a5,-44(s0)
20402468:	439c                	lw	a5,0(a5)
2040246a:	fef42023          	sw	a5,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:237
            __METAL_ACCESS_ONCE(
2040246e:	fe042783          	lw	a5,-32(s0)
20402472:	078a                	slli	a5,a5,0x2
20402474:	873e                	mv	a4,a5
20402476:	fe442783          	lw	a5,-28(s0)
2040247a:	97ba                	add	a5,a5,a4
2040247c:	873e                	mv	a4,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:238
                (__metal_io_u32 *)(control_base + (hartid * 4))) = METAL_ENABLE;
2040247e:	4785                	li	a5,1
20402480:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:248
            __METAL_IO_FENCE(o, i);
20402482:	0480000f          	fence	o,i
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:249
            rc = __METAL_ACCESS_ONCE(
20402486:	fe042783          	lw	a5,-32(s0)
2040248a:	078a                	slli	a5,a5,0x2
2040248c:	873e                	mv	a4,a5
2040248e:	fe442783          	lw	a5,-28(s0)
20402492:	97ba                	add	a5,a5,a4
20402494:	439c                	lw	a5,0(a5)
20402496:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:251
            rc = 0;
2040249a:	fe042623          	sw	zero,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
        break;
2040249e:	a825                	j	204024d6 <__metal_driver_riscv_clint0_command_request+0x12c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:255
        rc = 0;
204024a0:	fe042623          	sw	zero,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:256
        if (data) {
204024a4:	fd442783          	lw	a5,-44(s0)
204024a8:	cb8d                	beqz	a5,204024da <__metal_driver_riscv_clint0_command_request+0x130>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:257
            hartid = *(int *)data;
204024aa:	fd442783          	lw	a5,-44(s0)
204024ae:	439c                	lw	a5,0(a5)
204024b0:	fef42023          	sw	a5,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:258
            rc = __METAL_ACCESS_ONCE(
204024b4:	fe042783          	lw	a5,-32(s0)
204024b8:	078a                	slli	a5,a5,0x2
204024ba:	873e                	mv	a4,a5
204024bc:	fe442783          	lw	a5,-28(s0)
204024c0:	97ba                	add	a5,a5,a4
204024c2:	439c                	lw	a5,0(a5)
204024c4:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:261
        break;
204024c8:	a809                	j	204024da <__metal_driver_riscv_clint0_command_request+0x130>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:263
        break;
204024ca:	0001                	nop
204024cc:	a801                	j	204024dc <__metal_driver_riscv_clint0_command_request+0x132>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:225
        break;
204024ce:	0001                	nop
204024d0:	a031                	j	204024dc <__metal_driver_riscv_clint0_command_request+0x132>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:233
        break;
204024d2:	0001                	nop
204024d4:	a021                	j	204024dc <__metal_driver_riscv_clint0_command_request+0x132>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:253
        break;
204024d6:	0001                	nop
204024d8:	a011                	j	204024dc <__metal_driver_riscv_clint0_command_request+0x132>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:261
        break;
204024da:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:266
    }

    return rc;
204024dc:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:267
}
204024e0:	853e                	mv	a0,a5
204024e2:	50b2                	lw	ra,44(sp)
204024e4:	5422                	lw	s0,40(sp)
204024e6:	6145                	addi	sp,sp,48
204024e8:	8082                	ret

204024ea <__metal_driver_riscv_clint0_clear_interrupt>:
__metal_driver_riscv_clint0_clear_interrupt():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:270

int __metal_driver_riscv_clint0_clear_interrupt(
    struct metal_interrupt *controller, int id) {
204024ea:	7179                	addi	sp,sp,-48
204024ec:	d606                	sw	ra,44(sp)
204024ee:	d422                	sw	s0,40(sp)
204024f0:	1800                	addi	s0,sp,48
204024f2:	fca42e23          	sw	a0,-36(s0)
204024f6:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:271
    int hartid = metal_cpu_get_current_hartid();
204024fa:	f22ff0ef          	jal	ra,20401c1c <metal_cpu_get_current_hartid>
204024fe:	87aa                	mv	a5,a0
20402500:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:272
    return __metal_driver_riscv_clint0_command_request(
20402504:	fec40793          	addi	a5,s0,-20
20402508:	863e                	mv	a2,a5
2040250a:	4589                	li	a1,2
2040250c:	fdc42503          	lw	a0,-36(s0)
20402510:	3d69                	jal	204023aa <__metal_driver_riscv_clint0_command_request>
20402512:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:274
        controller, METAL_SOFTWARE_IPI_CLEAR, &hartid);
}
20402514:	853e                	mv	a0,a5
20402516:	50b2                	lw	ra,44(sp)
20402518:	5422                	lw	s0,40(sp)
2040251a:	6145                	addi	sp,sp,48
2040251c:	8082                	ret

2040251e <__metal_driver_riscv_clint0_set_interrupt>:
__metal_driver_riscv_clint0_set_interrupt():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:277

int __metal_driver_riscv_clint0_set_interrupt(
    struct metal_interrupt *controller, int id) {
2040251e:	7179                	addi	sp,sp,-48
20402520:	d606                	sw	ra,44(sp)
20402522:	d422                	sw	s0,40(sp)
20402524:	1800                	addi	s0,sp,48
20402526:	fca42e23          	sw	a0,-36(s0)
2040252a:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:278
    int hartid = metal_cpu_get_current_hartid();
2040252e:	eeeff0ef          	jal	ra,20401c1c <metal_cpu_get_current_hartid>
20402532:	87aa                	mv	a5,a0
20402534:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:279
    return __metal_driver_riscv_clint0_command_request(
20402538:	fec40793          	addi	a5,s0,-20
2040253c:	863e                	mv	a2,a5
2040253e:	458d                	li	a1,3
20402540:	fdc42503          	lw	a0,-36(s0)
20402544:	359d                	jal	204023aa <__metal_driver_riscv_clint0_command_request>
20402546:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_clint0.c:281
        controller, METAL_SOFTWARE_IPI_SET, &hartid);
}
20402548:	853e                	mv	a0,a5
2040254a:	50b2                	lw	ra,44(sp)
2040254c:	5422                	lw	s0,40(sp)
2040254e:	6145                	addi	sp,sp,48
20402550:	8082                	ret

20402552 <__metal_driver_cpu_hartid>:
__metal_driver_cpu_hartid():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:209



/* --------------------- cpu ------------ */
static __inline__ int __metal_driver_cpu_hartid(struct metal_cpu *cpu)
{
20402552:	1101                	addi	sp,sp,-32
20402554:	ce22                	sw	s0,28(sp)
20402556:	1000                	addi	s0,sp,32
20402558:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:210
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
2040255c:	fec42703          	lw	a4,-20(s0)
20402560:	81818793          	addi	a5,gp,-2024 # 80000778 <__metal_dt_cpu_0>
20402564:	00f71463          	bne	a4,a5,2040256c <__metal_driver_cpu_hartid+0x1a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:211
		return 0;
20402568:	4781                	li	a5,0
2040256a:	a011                	j	2040256e <__metal_driver_cpu_hartid+0x1c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:214
	}
	else {
		return -1;
2040256c:	57fd                	li	a5,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:216
	}
}
2040256e:	853e                	mv	a0,a5
20402570:	4472                	lw	s0,28(sp)
20402572:	6105                	addi	sp,sp,32
20402574:	8082                	ret

20402576 <__metal_driver_cpu_timebase>:
__metal_driver_cpu_timebase():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:219

static __inline__ int __metal_driver_cpu_timebase(struct metal_cpu *cpu)
{
20402576:	1101                	addi	sp,sp,-32
20402578:	ce22                	sw	s0,28(sp)
2040257a:	1000                	addi	s0,sp,32
2040257c:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:220
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
20402580:	fec42703          	lw	a4,-20(s0)
20402584:	81818793          	addi	a5,gp,-2024 # 80000778 <__metal_dt_cpu_0>
20402588:	00f71763          	bne	a4,a5,20402596 <__metal_driver_cpu_timebase+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:221
		return 1000000;
2040258c:	000f47b7          	lui	a5,0xf4
20402590:	24078793          	addi	a5,a5,576 # f4240 <__heap_size+0xf3a40>
20402594:	a011                	j	20402598 <__metal_driver_cpu_timebase+0x22>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:224
	}
	else {
		return 0;
20402596:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:226
	}
}
20402598:	853e                	mv	a0,a5
2040259a:	4472                	lw	s0,28(sp)
2040259c:	6105                	addi	sp,sp,32
2040259e:	8082                	ret

204025a0 <__metal_driver_cpu_interrupt_controller>:
__metal_driver_cpu_interrupt_controller():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:229

static __inline__ struct metal_interrupt * __metal_driver_cpu_interrupt_controller(struct metal_cpu *cpu)
{
204025a0:	1101                	addi	sp,sp,-32
204025a2:	ce22                	sw	s0,28(sp)
204025a4:	1000                	addi	s0,sp,32
204025a6:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:230
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204025aa:	fec42703          	lw	a4,-20(s0)
204025ae:	81818793          	addi	a5,gp,-2024 # 80000778 <__metal_dt_cpu_0>
204025b2:	00f71763          	bne	a4,a5,204025c0 <__metal_driver_cpu_interrupt_controller+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:231
		return &__metal_dt_cpu_0_interrupt_controller.controller;
204025b6:	800007b7          	lui	a5,0x80000
204025ba:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffebf0>
204025be:	a011                	j	204025c2 <__metal_driver_cpu_interrupt_controller+0x22>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:234
	}
	else {
		return NULL;
204025c0:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:236
	}
}
204025c2:	853e                	mv	a0,a5
204025c4:	4472                	lw	s0,28(sp)
204025c6:	6105                	addi	sp,sp,32
204025c8:	8082                	ret

204025ca <__metal_driver_cpu_buserror>:
__metal_driver_cpu_buserror():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:249
		return 0;
	}
}

static __inline__ struct metal_buserror * __metal_driver_cpu_buserror(struct metal_cpu *cpu)
{
204025ca:	1101                	addi	sp,sp,-32
204025cc:	ce22                	sw	s0,28(sp)
204025ce:	1000                	addi	s0,sp,32
204025d0:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:250
	if ((uintptr_t)cpu == (uintptr_t)&__metal_dt_cpu_0) {
204025d4:	fec42703          	lw	a4,-20(s0)
204025d8:	81818793          	addi	a5,gp,-2024 # 80000778 <__metal_dt_cpu_0>
204025dc:	00f71463          	bne	a4,a5,204025e4 <__metal_driver_cpu_buserror+0x1a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:251
		return NULL;
204025e0:	4781                	li	a5,0
204025e2:	a011                	j	204025e6 <__metal_driver_cpu_buserror+0x1c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:254
	}
	else {
		return NULL;
204025e4:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:256
	}
}
204025e6:	853e                	mv	a0,a5
204025e8:	4472                	lw	s0,28(sp)
204025ea:	6105                	addi	sp,sp,32
204025ec:	8082                	ret

204025ee <__metal_driver_cpu_get>:
__metal_driver_cpu_get():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:25
extern void __metal_vector_table();
unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu);
int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time);

struct metal_cpu *__metal_driver_cpu_get(int hartid) {
204025ee:	1101                	addi	sp,sp,-32
204025f0:	ce22                	sw	s0,28(sp)
204025f2:	1000                	addi	s0,sp,32
204025f4:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:26
    if (hartid < __METAL_DT_MAX_HARTS) {
204025f8:	fec42783          	lw	a5,-20(s0)
204025fc:	00f04c63          	bgtz	a5,20402614 <__metal_driver_cpu_get+0x26>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:27
        return &(__metal_cpu_table[hartid]->cpu);
20402600:	800007b7          	lui	a5,0x80000
20402604:	fec42703          	lw	a4,-20(s0)
20402608:	070a                	slli	a4,a4,0x2
2040260a:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
2040260e:	97ba                	add	a5,a5,a4
20402610:	439c                	lw	a5,0(a5)
20402612:	a011                	j	20402616 <__metal_driver_cpu_get+0x28>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:29
    }
    return (struct metal_cpu *)NULL;
20402614:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:30
}
20402616:	853e                	mv	a0,a5
20402618:	4472                	lw	s0,28(sp)
2040261a:	6105                	addi	sp,sp,32
2040261c:	8082                	ret

2040261e <__metal_myhart_id>:
__metal_myhart_id():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:32

uintptr_t __metal_myhart_id(void) {
2040261e:	1101                	addi	sp,sp,-32
20402620:	ce22                	sw	s0,28(sp)
20402622:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:34
    uintptr_t myhart;
    __asm__ volatile("csrr %0, mhartid" : "=r"(myhart));
20402624:	f14027f3          	csrr	a5,mhartid
20402628:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:35
    return myhart;
2040262c:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:36
}
20402630:	853e                	mv	a0,a5
20402632:	4472                	lw	s0,28(sp)
20402634:	6105                	addi	sp,sp,32
20402636:	8082                	ret

20402638 <__metal_interrupt_global_enable>:
__metal_interrupt_global_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:45
    for (ptr = base; ptr < (base + size); ptr++) {
        *ptr = 0;
    }
}

void __metal_interrupt_global_enable(void) {
20402638:	1101                	addi	sp,sp,-32
2040263a:	ce22                	sw	s0,28(sp)
2040263c:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:47
    uintptr_t m;
    __asm__ volatile("csrrs %0, mstatus, %1"
2040263e:	47a1                	li	a5,8
20402640:	3007a7f3          	csrrs	a5,mstatus,a5
20402644:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:50
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
20402648:	0001                	nop
2040264a:	4472                	lw	s0,28(sp)
2040264c:	6105                	addi	sp,sp,32
2040264e:	8082                	ret

20402650 <__metal_interrupt_global_disable>:
__metal_interrupt_global_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:52

void __metal_interrupt_global_disable(void) {
20402650:	1101                	addi	sp,sp,-32
20402652:	ce22                	sw	s0,28(sp)
20402654:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:54
    uintptr_t m;
    __asm__ volatile("csrrc %0, mstatus, %1"
20402656:	47a1                	li	a5,8
20402658:	3007b7f3          	csrrc	a5,mstatus,a5
2040265c:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:57
                     : "=r"(m)
                     : "r"(METAL_MIE_INTERRUPT));
}
20402660:	0001                	nop
20402662:	4472                	lw	s0,28(sp)
20402664:	6105                	addi	sp,sp,32
20402666:	8082                	ret

20402668 <__metal_interrupt_software_enable>:
__metal_interrupt_software_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:59

void __metal_interrupt_software_enable(void) {
20402668:	1101                	addi	sp,sp,-32
2040266a:	ce22                	sw	s0,28(sp)
2040266c:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:61
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
2040266e:	47a1                	li	a5,8
20402670:	3047a7f3          	csrrs	a5,mie,a5
20402674:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:64
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
20402678:	0001                	nop
2040267a:	4472                	lw	s0,28(sp)
2040267c:	6105                	addi	sp,sp,32
2040267e:	8082                	ret

20402680 <__metal_interrupt_software_disable>:
__metal_interrupt_software_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:66

void __metal_interrupt_software_disable(void) {
20402680:	1101                	addi	sp,sp,-32
20402682:	ce22                	sw	s0,28(sp)
20402684:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:68
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
20402686:	47a1                	li	a5,8
20402688:	3047b7f3          	csrrc	a5,mie,a5
2040268c:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:71
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_SW));
}
20402690:	0001                	nop
20402692:	4472                	lw	s0,28(sp)
20402694:	6105                	addi	sp,sp,32
20402696:	8082                	ret

20402698 <__metal_interrupt_timer_enable>:
__metal_interrupt_timer_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:73

void __metal_interrupt_timer_enable(void) {
20402698:	1101                	addi	sp,sp,-32
2040269a:	ce22                	sw	s0,28(sp)
2040269c:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:75
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
2040269e:	08000793          	li	a5,128
204026a2:	3047a7f3          	csrrs	a5,mie,a5
204026a6:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:78
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
204026aa:	0001                	nop
204026ac:	4472                	lw	s0,28(sp)
204026ae:	6105                	addi	sp,sp,32
204026b0:	8082                	ret

204026b2 <__metal_interrupt_timer_disable>:
__metal_interrupt_timer_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:80

void __metal_interrupt_timer_disable(void) {
204026b2:	1101                	addi	sp,sp,-32
204026b4:	ce22                	sw	s0,28(sp)
204026b6:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:82
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1"
204026b8:	08000793          	li	a5,128
204026bc:	3047b7f3          	csrrc	a5,mie,a5
204026c0:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:85
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_TMR));
}
204026c4:	0001                	nop
204026c6:	4472                	lw	s0,28(sp)
204026c8:	6105                	addi	sp,sp,32
204026ca:	8082                	ret

204026cc <__metal_interrupt_external_enable>:
__metal_interrupt_external_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:87

void __metal_interrupt_external_enable(void) {
204026cc:	1101                	addi	sp,sp,-32
204026ce:	ce22                	sw	s0,28(sp)
204026d0:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:89
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1"
204026d2:	6785                	lui	a5,0x1
204026d4:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204026d8:	3047a7f3          	csrrs	a5,mie,a5
204026dc:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:92
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
204026e0:	0001                	nop
204026e2:	4472                	lw	s0,28(sp)
204026e4:	6105                	addi	sp,sp,32
204026e6:	8082                	ret

204026e8 <__metal_interrupt_external_disable>:
__metal_interrupt_external_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:94

void __metal_interrupt_external_disable(void) {
204026e8:	1101                	addi	sp,sp,-32
204026ea:	ce22                	sw	s0,28(sp)
204026ec:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:96
    unsigned long m;
    __asm__ volatile("csrrc %0, mie, %1"
204026ee:	6785                	lui	a5,0x1
204026f0:	80078793          	addi	a5,a5,-2048 # 800 <__heap_size>
204026f4:	3047b7f3          	csrrc	a5,mie,a5
204026f8:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:99
                     : "=r"(m)
                     : "r"(METAL_LOCAL_INTERRUPT_EXT));
}
204026fc:	0001                	nop
204026fe:	4472                	lw	s0,28(sp)
20402700:	6105                	addi	sp,sp,32
20402702:	8082                	ret

20402704 <__metal_interrupt_local_enable>:
__metal_interrupt_local_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:101

void __metal_interrupt_local_enable(int id) {
20402704:	7179                	addi	sp,sp,-48
20402706:	d622                	sw	s0,44(sp)
20402708:	1800                	addi	s0,sp,48
2040270a:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:102
    uintptr_t b = 1 << id;
2040270e:	fdc42783          	lw	a5,-36(s0)
20402712:	4705                	li	a4,1
20402714:	00f717b3          	sll	a5,a4,a5
20402718:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:104
    uintptr_t m;
    __asm__ volatile("csrrs %0, mie, %1" : "=r"(m) : "r"(b));
2040271c:	fec42783          	lw	a5,-20(s0)
20402720:	3047a7f3          	csrrs	a5,mie,a5
20402724:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:105
}
20402728:	0001                	nop
2040272a:	5432                	lw	s0,44(sp)
2040272c:	6145                	addi	sp,sp,48
2040272e:	8082                	ret

20402730 <__metal_interrupt_local_disable>:
__metal_interrupt_local_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:107

void __metal_interrupt_local_disable(int id) {
20402730:	7179                	addi	sp,sp,-48
20402732:	d622                	sw	s0,44(sp)
20402734:	1800                	addi	s0,sp,48
20402736:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:108
    uintptr_t b = 1 << id;
2040273a:	fdc42783          	lw	a5,-36(s0)
2040273e:	4705                	li	a4,1
20402740:	00f717b3          	sll	a5,a4,a5
20402744:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:110
    uintptr_t m;
    __asm__ volatile("csrrc %0, mie, %1" : "=r"(m) : "r"(b));
20402748:	fec42783          	lw	a5,-20(s0)
2040274c:	3047b7f3          	csrrc	a5,mie,a5
20402750:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:111
}
20402754:	0001                	nop
20402756:	5432                	lw	s0,44(sp)
20402758:	6145                	addi	sp,sp,48
2040275a:	8082                	ret

2040275c <__metal_default_exception_handler>:
__metal_default_exception_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:113

void __metal_default_exception_handler(struct metal_cpu *cpu, int ecode) {
2040275c:	1101                	addi	sp,sp,-32
2040275e:	ce06                	sw	ra,28(sp)
20402760:	cc22                	sw	s0,24(sp)
20402762:	1000                	addi	s0,sp,32
20402764:	fea42623          	sw	a0,-20(s0)
20402768:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:114
    metal_shutdown(100);
2040276c:	06400513          	li	a0,100
20402770:	0b4030ef          	jal	ra,20405824 <metal_shutdown>

20402774 <__metal_default_interrupt_handler>:
__metal_default_interrupt_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:117
}

void __metal_default_interrupt_handler(int id, void *priv) {
20402774:	1101                	addi	sp,sp,-32
20402776:	ce06                	sw	ra,28(sp)
20402778:	cc22                	sw	s0,24(sp)
2040277a:	1000                	addi	s0,sp,32
2040277c:	fea42623          	sw	a0,-20(s0)
20402780:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:118
    metal_shutdown(200);
20402784:	0c800513          	li	a0,200
20402788:	09c030ef          	jal	ra,20405824 <metal_shutdown>

2040278c <metal_interrupt_vector_handler>:
metal_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:122
}

/* The metal_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_interrupt_vector_handler(void) {
2040278c:	715d                	addi	sp,sp,-80
2040278e:	c686                	sw	ra,76(sp)
20402790:	c496                	sw	t0,72(sp)
20402792:	c29a                	sw	t1,68(sp)
20402794:	c09e                	sw	t2,64(sp)
20402796:	de22                	sw	s0,60(sp)
20402798:	dc2a                	sw	a0,56(sp)
2040279a:	da2e                	sw	a1,52(sp)
2040279c:	d832                	sw	a2,48(sp)
2040279e:	d636                	sw	a3,44(sp)
204027a0:	d43a                	sw	a4,40(sp)
204027a2:	d23e                	sw	a5,36(sp)
204027a4:	d042                	sw	a6,32(sp)
204027a6:	ce46                	sw	a7,28(sp)
204027a8:	cc72                	sw	t3,24(sp)
204027aa:	ca76                	sw	t4,20(sp)
204027ac:	c87a                	sw	t5,16(sp)
204027ae:	c67e                	sw	t6,12(sp)
204027b0:	0880                	addi	s0,sp,80
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:123
    metal_shutdown(300);
204027b2:	12c00513          	li	a0,300
204027b6:	06e030ef          	jal	ra,20405824 <metal_shutdown>

204027ba <metal_software_interrupt_vector_handler>:
metal_software_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:128
}

/* The metal_software_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_software_interrupt_vector_handler(void) {
204027ba:	711d                	addi	sp,sp,-96
204027bc:	ce86                	sw	ra,92(sp)
204027be:	cc96                	sw	t0,88(sp)
204027c0:	ca9a                	sw	t1,84(sp)
204027c2:	c89e                	sw	t2,80(sp)
204027c4:	c6a2                	sw	s0,76(sp)
204027c6:	c4aa                	sw	a0,72(sp)
204027c8:	c2ae                	sw	a1,68(sp)
204027ca:	c0b2                	sw	a2,64(sp)
204027cc:	de36                	sw	a3,60(sp)
204027ce:	dc3a                	sw	a4,56(sp)
204027d0:	da3e                	sw	a5,52(sp)
204027d2:	d842                	sw	a6,48(sp)
204027d4:	d646                	sw	a7,44(sp)
204027d6:	d472                	sw	t3,40(sp)
204027d8:	d276                	sw	t4,36(sp)
204027da:	d07a                	sw	t5,32(sp)
204027dc:	ce7e                	sw	t6,28(sp)
204027de:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_SW);
204027e0:	3d3d                	jal	2040261e <__metal_myhart_id>
204027e2:	872a                	mv	a4,a0
204027e4:	800007b7          	lui	a5,0x80000
204027e8:	070a                	slli	a4,a4,0x2
204027ea:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
204027ee:	97ba                	add	a5,a5,a4
204027f0:	439c                	lw	a5,0(a5)
204027f2:	faf42623          	sw	a5,-84(s0)
204027f6:	fac42783          	lw	a5,-84(s0)
204027fa:	c785                	beqz	a5,20402822 <metal_software_interrupt_vector_handler+0x68>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:129 (discriminator 1)
204027fc:	fac42503          	lw	a0,-84(s0)
20402800:	3345                	jal	204025a0 <__metal_driver_cpu_interrupt_controller>
20402802:	faa42423          	sw	a0,-88(s0)
20402806:	fa842783          	lw	a5,-88(s0)
2040280a:	0e07a783          	lw	a5,224(a5)
2040280e:	faf42223          	sw	a5,-92(s0)
20402812:	fa842783          	lw	a5,-88(s0)
20402816:	0d87a783          	lw	a5,216(a5)
2040281a:	fa442583          	lw	a1,-92(s0)
2040281e:	450d                	li	a0,3
20402820:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:130
}
20402822:	0001                	nop
20402824:	40f6                	lw	ra,92(sp)
20402826:	42e6                	lw	t0,88(sp)
20402828:	4356                	lw	t1,84(sp)
2040282a:	43c6                	lw	t2,80(sp)
2040282c:	4436                	lw	s0,76(sp)
2040282e:	4526                	lw	a0,72(sp)
20402830:	4596                	lw	a1,68(sp)
20402832:	4606                	lw	a2,64(sp)
20402834:	56f2                	lw	a3,60(sp)
20402836:	5762                	lw	a4,56(sp)
20402838:	57d2                	lw	a5,52(sp)
2040283a:	5842                	lw	a6,48(sp)
2040283c:	58b2                	lw	a7,44(sp)
2040283e:	5e22                	lw	t3,40(sp)
20402840:	5e92                	lw	t4,36(sp)
20402842:	5f02                	lw	t5,32(sp)
20402844:	4ff2                	lw	t6,28(sp)
20402846:	6125                	addi	sp,sp,96
20402848:	30200073          	mret

2040284c <__metal_default_sw_handler>:
__metal_default_sw_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:132

void __metal_default_sw_handler(int id, void *priv) {
2040284c:	7179                	addi	sp,sp,-48
2040284e:	d606                	sw	ra,44(sp)
20402850:	d422                	sw	s0,40(sp)
20402852:	1800                	addi	s0,sp,48
20402854:	fca42e23          	sw	a0,-36(s0)
20402858:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:135
    uintptr_t mcause;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
2040285c:	33c9                	jal	2040261e <__metal_myhart_id>
2040285e:	872a                	mv	a4,a0
20402860:	800007b7          	lui	a5,0x80000
20402864:	070a                	slli	a4,a4,0x2
20402866:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
2040286a:	97ba                	add	a5,a5,a4
2040286c:	439c                	lw	a5,0(a5)
2040286e:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:137

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
20402872:	342027f3          	csrr	a5,mcause
20402876:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:138
    if (cpu) {
2040287a:	fec42783          	lw	a5,-20(s0)
2040287e:	c795                	beqz	a5,204028aa <__metal_default_sw_handler+0x5e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:140
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402880:	fec42503          	lw	a0,-20(s0)
20402884:	3b31                	jal	204025a0 <__metal_driver_cpu_interrupt_controller>
20402886:	fea42223          	sw	a0,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:141
        intc->metal_exception_table[mcause & METAL_MCAUSE_CAUSE](
2040288a:	fe842783          	lw	a5,-24(s0)
2040288e:	3ff7f793          	andi	a5,a5,1023
20402892:	fe442703          	lw	a4,-28(s0)
20402896:	0e878793          	addi	a5,a5,232
2040289a:	078a                	slli	a5,a5,0x2
2040289c:	97ba                	add	a5,a5,a4
2040289e:	439c                	lw	a5,0(a5)
204028a0:	fdc42583          	lw	a1,-36(s0)
204028a4:	fec42503          	lw	a0,-20(s0)
204028a8:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:144
            (struct metal_cpu *)cpu, id);
    }
}
204028aa:	0001                	nop
204028ac:	50b2                	lw	ra,44(sp)
204028ae:	5422                	lw	s0,40(sp)
204028b0:	6145                	addi	sp,sp,48
204028b2:	8082                	ret

204028b4 <metal_timer_interrupt_vector_handler>:
metal_timer_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:148

/* The metal_timer_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_timer_interrupt_vector_handler(void) {
204028b4:	711d                	addi	sp,sp,-96
204028b6:	ce86                	sw	ra,92(sp)
204028b8:	cc96                	sw	t0,88(sp)
204028ba:	ca9a                	sw	t1,84(sp)
204028bc:	c89e                	sw	t2,80(sp)
204028be:	c6a2                	sw	s0,76(sp)
204028c0:	c4aa                	sw	a0,72(sp)
204028c2:	c2ae                	sw	a1,68(sp)
204028c4:	c0b2                	sw	a2,64(sp)
204028c6:	de36                	sw	a3,60(sp)
204028c8:	dc3a                	sw	a4,56(sp)
204028ca:	da3e                	sw	a5,52(sp)
204028cc:	d842                	sw	a6,48(sp)
204028ce:	d646                	sw	a7,44(sp)
204028d0:	d472                	sw	t3,40(sp)
204028d2:	d276                	sw	t4,36(sp)
204028d4:	d07a                	sw	t5,32(sp)
204028d6:	ce7e                	sw	t6,28(sp)
204028d8:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:149
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_TMR);
204028da:	3391                	jal	2040261e <__metal_myhart_id>
204028dc:	872a                	mv	a4,a0
204028de:	800007b7          	lui	a5,0x80000
204028e2:	070a                	slli	a4,a4,0x2
204028e4:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
204028e8:	97ba                	add	a5,a5,a4
204028ea:	439c                	lw	a5,0(a5)
204028ec:	faf42623          	sw	a5,-84(s0)
204028f0:	fac42783          	lw	a5,-84(s0)
204028f4:	c785                	beqz	a5,2040291c <metal_timer_interrupt_vector_handler+0x68>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:149 (discriminator 1)
204028f6:	fac42503          	lw	a0,-84(s0)
204028fa:	315d                	jal	204025a0 <__metal_driver_cpu_interrupt_controller>
204028fc:	faa42423          	sw	a0,-88(s0)
20402900:	fa842783          	lw	a5,-88(s0)
20402904:	1407a783          	lw	a5,320(a5)
20402908:	faf42223          	sw	a5,-92(s0)
2040290c:	fa842783          	lw	a5,-88(s0)
20402910:	1387a783          	lw	a5,312(a5)
20402914:	fa442583          	lw	a1,-92(s0)
20402918:	451d                	li	a0,7
2040291a:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:150
}
2040291c:	0001                	nop
2040291e:	40f6                	lw	ra,92(sp)
20402920:	42e6                	lw	t0,88(sp)
20402922:	4356                	lw	t1,84(sp)
20402924:	43c6                	lw	t2,80(sp)
20402926:	4436                	lw	s0,76(sp)
20402928:	4526                	lw	a0,72(sp)
2040292a:	4596                	lw	a1,68(sp)
2040292c:	4606                	lw	a2,64(sp)
2040292e:	56f2                	lw	a3,60(sp)
20402930:	5762                	lw	a4,56(sp)
20402932:	57d2                	lw	a5,52(sp)
20402934:	5842                	lw	a6,48(sp)
20402936:	58b2                	lw	a7,44(sp)
20402938:	5e22                	lw	t3,40(sp)
2040293a:	5e92                	lw	t4,36(sp)
2040293c:	5f02                	lw	t5,32(sp)
2040293e:	4ff2                	lw	t6,28(sp)
20402940:	6125                	addi	sp,sp,96
20402942:	30200073          	mret

20402946 <__metal_default_beu_handler>:
__metal_default_beu_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:152

void __metal_default_beu_handler(int id, void *priv) {}
20402946:	1101                	addi	sp,sp,-32
20402948:	ce22                	sw	s0,28(sp)
2040294a:	1000                	addi	s0,sp,32
2040294c:	fea42623          	sw	a0,-20(s0)
20402950:	feb42423          	sw	a1,-24(s0)
20402954:	0001                	nop
20402956:	4472                	lw	s0,28(sp)
20402958:	6105                	addi	sp,sp,32
2040295a:	8082                	ret

2040295c <__metal_default_timer_handler>:
__metal_default_timer_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:154

void __metal_default_timer_handler(int id, void *priv) {
2040295c:	7179                	addi	sp,sp,-48
2040295e:	d606                	sw	ra,44(sp)
20402960:	d422                	sw	s0,40(sp)
20402962:	1800                	addi	s0,sp,48
20402964:	fca42e23          	sw	a0,-36(s0)
20402968:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:155
    struct metal_cpu *cpu = __metal_driver_cpu_get(__metal_myhart_id());
2040296c:	394d                	jal	2040261e <__metal_myhart_id>
2040296e:	87aa                	mv	a5,a0
20402970:	853e                	mv	a0,a5
20402972:	39b5                	jal	204025ee <__metal_driver_cpu_get>
20402974:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:156
    unsigned long long time = __metal_driver_cpu_mtime_get(cpu);
20402978:	fec42503          	lw	a0,-20(s0)
2040297c:	2a6010ef          	jal	ra,20403c22 <__metal_driver_cpu_mtime_get>
20402980:	fea42023          	sw	a0,-32(s0)
20402984:	feb42223          	sw	a1,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:159

    /* Set a 10 cycle timer */
    __metal_driver_cpu_mtimecmp_set(cpu, time + 10);
20402988:	fe042703          	lw	a4,-32(s0)
2040298c:	fe442783          	lw	a5,-28(s0)
20402990:	4529                	li	a0,10
20402992:	4581                	li	a1,0
20402994:	00a70633          	add	a2,a4,a0
20402998:	8832                	mv	a6,a2
2040299a:	00e83833          	sltu	a6,a6,a4
2040299e:	00b786b3          	add	a3,a5,a1
204029a2:	00d807b3          	add	a5,a6,a3
204029a6:	86be                	mv	a3,a5
204029a8:	8732                	mv	a4,a2
204029aa:	87b6                	mv	a5,a3
204029ac:	85ba                	mv	a1,a4
204029ae:	863e                	mv	a2,a5
204029b0:	fec42503          	lw	a0,-20(s0)
204029b4:	2d4010ef          	jal	ra,20403c88 <__metal_driver_cpu_mtimecmp_set>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:160
}
204029b8:	0001                	nop
204029ba:	50b2                	lw	ra,44(sp)
204029bc:	5422                	lw	s0,40(sp)
204029be:	6145                	addi	sp,sp,48
204029c0:	8082                	ret
	...

20402a00 <__metal_exception_handler>:
__metal_exception_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:169
metal_external_interrupt_vector_handler(void) {
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_EXT);
}

void __metal_exception_handler(void) __attribute__((interrupt, aligned(128)));
void __metal_exception_handler(void) {
20402a00:	7119                	addi	sp,sp,-128
20402a02:	de86                	sw	ra,124(sp)
20402a04:	dc96                	sw	t0,120(sp)
20402a06:	da9a                	sw	t1,116(sp)
20402a08:	d89e                	sw	t2,112(sp)
20402a0a:	d6a2                	sw	s0,108(sp)
20402a0c:	d4aa                	sw	a0,104(sp)
20402a0e:	d2ae                	sw	a1,100(sp)
20402a10:	d0b2                	sw	a2,96(sp)
20402a12:	ceb6                	sw	a3,92(sp)
20402a14:	ccba                	sw	a4,88(sp)
20402a16:	cabe                	sw	a5,84(sp)
20402a18:	c8c2                	sw	a6,80(sp)
20402a1a:	c6c6                	sw	a7,76(sp)
20402a1c:	c4f2                	sw	t3,72(sp)
20402a1e:	c2f6                	sw	t4,68(sp)
20402a20:	c0fa                	sw	t5,64(sp)
20402a22:	de7e                	sw	t6,60(sp)
20402a24:	0100                	addi	s0,sp,128
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:174
    int id;
    void *priv;
    uintptr_t mcause, mepc, mtval, mtvec;
    struct __metal_driver_riscv_cpu_intc *intc;
    struct __metal_driver_cpu *cpu = __metal_cpu_table[__metal_myhart_id()];
20402a26:	bf9ff0ef          	jal	ra,2040261e <__metal_myhart_id>
20402a2a:	872a                	mv	a4,a0
20402a2c:	800007b7          	lui	a5,0x80000
20402a30:	070a                	slli	a4,a4,0x2
20402a32:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20402a36:	97ba                	add	a5,a5,a4
20402a38:	439c                	lw	a5,0(a5)
20402a3a:	faf42623          	sw	a5,-84(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:176

    __asm__ volatile("csrr %0, mcause" : "=r"(mcause));
20402a3e:	342027f3          	csrr	a5,mcause
20402a42:	faf42423          	sw	a5,-88(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:177
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
20402a46:	341027f3          	csrr	a5,mepc
20402a4a:	faf42223          	sw	a5,-92(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:178
    __asm__ volatile("csrr %0, mtval" : "=r"(mtval));
20402a4e:	343027f3          	csrr	a5,mtval
20402a52:	faf42023          	sw	a5,-96(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:179
    __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
20402a56:	305027f3          	csrr	a5,mtvec
20402a5a:	f8f42e23          	sw	a5,-100(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:181

    if (cpu) {
20402a5e:	fac42783          	lw	a5,-84(s0)
20402a62:	cbfd                	beqz	a5,20402b58 <__metal_exception_handler+0x158>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:183
        intc = (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller((struct metal_cpu *)cpu);
20402a64:	fac42503          	lw	a0,-84(s0)
20402a68:	b39ff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20402a6c:	f8a42c23          	sw	a0,-104(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:184
        id = mcause & METAL_MCAUSE_CAUSE;
20402a70:	fa842783          	lw	a5,-88(s0)
20402a74:	3ff7f793          	andi	a5,a5,1023
20402a78:	f8f42a23          	sw	a5,-108(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:185
        if (mcause & METAL_MCAUSE_INTR) {
20402a7c:	fa842783          	lw	a5,-88(s0)
20402a80:	0a07de63          	bgez	a5,20402b3c <__metal_exception_handler+0x13c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:186
            if (id == METAL_INTERRUPT_ID_BEU) {
20402a84:	f9442703          	lw	a4,-108(s0)
20402a88:	08000793          	li	a5,128
20402a8c:	02f71263          	bne	a4,a5,20402ab0 <__metal_exception_handler+0xb0>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:187
                priv = intc->metal_int_beu.exint_data;
20402a90:	f9842783          	lw	a5,-104(s0)
20402a94:	3987a783          	lw	a5,920(a5)
20402a98:	f8f42623          	sw	a5,-116(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:188
                intc->metal_int_beu.handler(id, priv);
20402a9c:	f9842783          	lw	a5,-104(s0)
20402aa0:	3907a783          	lw	a5,912(a5)
20402aa4:	f8c42583          	lw	a1,-116(s0)
20402aa8:	f9442503          	lw	a0,-108(s0)
20402aac:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:189
                return;
20402aae:	a06d                	j	20402b58 <__metal_exception_handler+0x158>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:191
            }
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402ab0:	f9442703          	lw	a4,-108(s0)
20402ab4:	47ad                	li	a5,11
20402ab6:	00e7d763          	bge	a5,a4,20402ac4 <__metal_exception_handler+0xc4>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:192 (discriminator 1)
                ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_DIRECT)) {
20402aba:	f9c42783          	lw	a5,-100(s0)
20402abe:	03f7f793          	andi	a5,a5,63
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:191 (discriminator 1)
            if ((id < METAL_INTERRUPT_ID_CSW) ||
20402ac2:	ef9d                	bnez	a5,20402b00 <__metal_exception_handler+0x100>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:193
                priv = intc->metal_int_table[id].exint_data;
20402ac4:	f9842683          	lw	a3,-104(s0)
20402ac8:	f9442703          	lw	a4,-108(s0)
20402acc:	87ba                	mv	a5,a4
20402ace:	0786                	slli	a5,a5,0x1
20402ad0:	97ba                	add	a5,a5,a4
20402ad2:	078e                	slli	a5,a5,0x3
20402ad4:	97b6                	add	a5,a5,a3
20402ad6:	0987a783          	lw	a5,152(a5)
20402ada:	f8f42623          	sw	a5,-116(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:194
                intc->metal_int_table[id].handler(id, priv);
20402ade:	f9842683          	lw	a3,-104(s0)
20402ae2:	f9442703          	lw	a4,-108(s0)
20402ae6:	87ba                	mv	a5,a4
20402ae8:	0786                	slli	a5,a5,0x1
20402aea:	97ba                	add	a5,a5,a4
20402aec:	078e                	slli	a5,a5,0x3
20402aee:	97b6                	add	a5,a5,a3
20402af0:	0907a783          	lw	a5,144(a5)
20402af4:	f8c42583          	lw	a1,-116(s0)
20402af8:	f9442503          	lw	a0,-108(s0)
20402afc:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:195
                return;
20402afe:	a8a9                	j	20402b58 <__metal_exception_handler+0x158>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:197
            }
            if ((mtvec & METAL_MTVEC_MASK) == METAL_MTVEC_CLIC) {
20402b00:	f9c42783          	lw	a5,-100(s0)
20402b04:	03f7f713          	andi	a4,a5,63
20402b08:	4789                	li	a5,2
20402b0a:	04f71763          	bne	a4,a5,20402b58 <__metal_exception_handler+0x158>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:201
                uintptr_t mtvt;
                metal_interrupt_handler_t mtvt_handler;

                __asm__ volatile("csrr %0, 0x307" : "=r"(mtvt));
20402b0e:	307027f3          	csrr	a5,mtvt
20402b12:	f8f42823          	sw	a5,-112(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:202
                priv = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20402b16:	f9842783          	lw	a5,-104(s0)
20402b1a:	0dc7a783          	lw	a5,220(a5)
20402b1e:	f8f42623          	sw	a5,-116(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:203
                mtvt_handler = (metal_interrupt_handler_t) * (uintptr_t *)mtvt;
20402b22:	f9042783          	lw	a5,-112(s0)
20402b26:	439c                	lw	a5,0(a5)
20402b28:	f8f42423          	sw	a5,-120(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:204
                mtvt_handler(id, priv);
20402b2c:	f8842783          	lw	a5,-120(s0)
20402b30:	f8c42583          	lw	a1,-116(s0)
20402b34:	f9442503          	lw	a0,-108(s0)
20402b38:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:205
                return;
20402b3a:	a839                	j	20402b58 <__metal_exception_handler+0x158>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:208
            }
        } else {
            intc->metal_exception_table[id]((struct metal_cpu *)cpu, id);
20402b3c:	f9842703          	lw	a4,-104(s0)
20402b40:	f9442783          	lw	a5,-108(s0)
20402b44:	0e878793          	addi	a5,a5,232
20402b48:	078a                	slli	a5,a5,0x2
20402b4a:	97ba                	add	a5,a5,a4
20402b4c:	439c                	lw	a5,0(a5)
20402b4e:	f9442583          	lw	a1,-108(s0)
20402b52:	fac42503          	lw	a0,-84(s0)
20402b56:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:211
        }
    }
}
20402b58:	50f6                	lw	ra,124(sp)
20402b5a:	52e6                	lw	t0,120(sp)
20402b5c:	5356                	lw	t1,116(sp)
20402b5e:	53c6                	lw	t2,112(sp)
20402b60:	5436                	lw	s0,108(sp)
20402b62:	5526                	lw	a0,104(sp)
20402b64:	5596                	lw	a1,100(sp)
20402b66:	5606                	lw	a2,96(sp)
20402b68:	46f6                	lw	a3,92(sp)
20402b6a:	4766                	lw	a4,88(sp)
20402b6c:	47d6                	lw	a5,84(sp)
20402b6e:	4846                	lw	a6,80(sp)
20402b70:	48b6                	lw	a7,76(sp)
20402b72:	4e26                	lw	t3,72(sp)
20402b74:	4e96                	lw	t4,68(sp)
20402b76:	4f06                	lw	t5,64(sp)
20402b78:	5ff2                	lw	t6,60(sp)
20402b7a:	6109                	addi	sp,sp,128
20402b7c:	30200073          	mret
	...

20402bfa <metal_lc0_interrupt_vector_handler>:
metal_lc0_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:214

/* The metal_lc0_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc0_interrupt_vector_handler(void) {
20402bfa:	711d                	addi	sp,sp,-96
20402bfc:	ce86                	sw	ra,92(sp)
20402bfe:	cc96                	sw	t0,88(sp)
20402c00:	ca9a                	sw	t1,84(sp)
20402c02:	c89e                	sw	t2,80(sp)
20402c04:	c6a2                	sw	s0,76(sp)
20402c06:	c4aa                	sw	a0,72(sp)
20402c08:	c2ae                	sw	a1,68(sp)
20402c0a:	c0b2                	sw	a2,64(sp)
20402c0c:	de36                	sw	a3,60(sp)
20402c0e:	dc3a                	sw	a4,56(sp)
20402c10:	da3e                	sw	a5,52(sp)
20402c12:	d842                	sw	a6,48(sp)
20402c14:	d646                	sw	a7,44(sp)
20402c16:	d472                	sw	t3,40(sp)
20402c18:	d276                	sw	t4,36(sp)
20402c1a:	d07a                	sw	t5,32(sp)
20402c1c:	ce7e                	sw	t6,28(sp)
20402c1e:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:215
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC0);
20402c20:	9ffff0ef          	jal	ra,2040261e <__metal_myhart_id>
20402c24:	872a                	mv	a4,a0
20402c26:	800007b7          	lui	a5,0x80000
20402c2a:	070a                	slli	a4,a4,0x2
20402c2c:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20402c30:	97ba                	add	a5,a5,a4
20402c32:	439c                	lw	a5,0(a5)
20402c34:	faf42623          	sw	a5,-84(s0)
20402c38:	fac42783          	lw	a5,-84(s0)
20402c3c:	c78d                	beqz	a5,20402c66 <metal_lc0_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:215 (discriminator 1)
20402c3e:	fac42503          	lw	a0,-84(s0)
20402c42:	95fff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20402c46:	faa42423          	sw	a0,-88(s0)
20402c4a:	fa842783          	lw	a5,-88(s0)
20402c4e:	2187a783          	lw	a5,536(a5)
20402c52:	faf42223          	sw	a5,-92(s0)
20402c56:	fa842783          	lw	a5,-88(s0)
20402c5a:	2107a783          	lw	a5,528(a5)
20402c5e:	fa442583          	lw	a1,-92(s0)
20402c62:	4541                	li	a0,16
20402c64:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:216
}
20402c66:	0001                	nop
20402c68:	40f6                	lw	ra,92(sp)
20402c6a:	42e6                	lw	t0,88(sp)
20402c6c:	4356                	lw	t1,84(sp)
20402c6e:	43c6                	lw	t2,80(sp)
20402c70:	4436                	lw	s0,76(sp)
20402c72:	4526                	lw	a0,72(sp)
20402c74:	4596                	lw	a1,68(sp)
20402c76:	4606                	lw	a2,64(sp)
20402c78:	56f2                	lw	a3,60(sp)
20402c7a:	5762                	lw	a4,56(sp)
20402c7c:	57d2                	lw	a5,52(sp)
20402c7e:	5842                	lw	a6,48(sp)
20402c80:	58b2                	lw	a7,44(sp)
20402c82:	5e22                	lw	t3,40(sp)
20402c84:	5e92                	lw	t4,36(sp)
20402c86:	5f02                	lw	t5,32(sp)
20402c88:	4ff2                	lw	t6,28(sp)
20402c8a:	6125                	addi	sp,sp,96
20402c8c:	30200073          	mret

20402c90 <metal_lc1_interrupt_vector_handler>:
metal_lc1_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:219

/* The metal_lc1_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc1_interrupt_vector_handler(void) {
20402c90:	711d                	addi	sp,sp,-96
20402c92:	ce86                	sw	ra,92(sp)
20402c94:	cc96                	sw	t0,88(sp)
20402c96:	ca9a                	sw	t1,84(sp)
20402c98:	c89e                	sw	t2,80(sp)
20402c9a:	c6a2                	sw	s0,76(sp)
20402c9c:	c4aa                	sw	a0,72(sp)
20402c9e:	c2ae                	sw	a1,68(sp)
20402ca0:	c0b2                	sw	a2,64(sp)
20402ca2:	de36                	sw	a3,60(sp)
20402ca4:	dc3a                	sw	a4,56(sp)
20402ca6:	da3e                	sw	a5,52(sp)
20402ca8:	d842                	sw	a6,48(sp)
20402caa:	d646                	sw	a7,44(sp)
20402cac:	d472                	sw	t3,40(sp)
20402cae:	d276                	sw	t4,36(sp)
20402cb0:	d07a                	sw	t5,32(sp)
20402cb2:	ce7e                	sw	t6,28(sp)
20402cb4:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:220
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC1);
20402cb6:	969ff0ef          	jal	ra,2040261e <__metal_myhart_id>
20402cba:	872a                	mv	a4,a0
20402cbc:	800007b7          	lui	a5,0x80000
20402cc0:	070a                	slli	a4,a4,0x2
20402cc2:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20402cc6:	97ba                	add	a5,a5,a4
20402cc8:	439c                	lw	a5,0(a5)
20402cca:	faf42623          	sw	a5,-84(s0)
20402cce:	fac42783          	lw	a5,-84(s0)
20402cd2:	c78d                	beqz	a5,20402cfc <metal_lc1_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:220 (discriminator 1)
20402cd4:	fac42503          	lw	a0,-84(s0)
20402cd8:	8c9ff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20402cdc:	faa42423          	sw	a0,-88(s0)
20402ce0:	fa842783          	lw	a5,-88(s0)
20402ce4:	2307a783          	lw	a5,560(a5)
20402ce8:	faf42223          	sw	a5,-92(s0)
20402cec:	fa842783          	lw	a5,-88(s0)
20402cf0:	2287a783          	lw	a5,552(a5)
20402cf4:	fa442583          	lw	a1,-92(s0)
20402cf8:	4545                	li	a0,17
20402cfa:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:221
}
20402cfc:	0001                	nop
20402cfe:	40f6                	lw	ra,92(sp)
20402d00:	42e6                	lw	t0,88(sp)
20402d02:	4356                	lw	t1,84(sp)
20402d04:	43c6                	lw	t2,80(sp)
20402d06:	4436                	lw	s0,76(sp)
20402d08:	4526                	lw	a0,72(sp)
20402d0a:	4596                	lw	a1,68(sp)
20402d0c:	4606                	lw	a2,64(sp)
20402d0e:	56f2                	lw	a3,60(sp)
20402d10:	5762                	lw	a4,56(sp)
20402d12:	57d2                	lw	a5,52(sp)
20402d14:	5842                	lw	a6,48(sp)
20402d16:	58b2                	lw	a7,44(sp)
20402d18:	5e22                	lw	t3,40(sp)
20402d1a:	5e92                	lw	t4,36(sp)
20402d1c:	5f02                	lw	t5,32(sp)
20402d1e:	4ff2                	lw	t6,28(sp)
20402d20:	6125                	addi	sp,sp,96
20402d22:	30200073          	mret

20402d26 <metal_lc2_interrupt_vector_handler>:
metal_lc2_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:224

/* The metal_lc2_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc2_interrupt_vector_handler(void) {
20402d26:	711d                	addi	sp,sp,-96
20402d28:	ce86                	sw	ra,92(sp)
20402d2a:	cc96                	sw	t0,88(sp)
20402d2c:	ca9a                	sw	t1,84(sp)
20402d2e:	c89e                	sw	t2,80(sp)
20402d30:	c6a2                	sw	s0,76(sp)
20402d32:	c4aa                	sw	a0,72(sp)
20402d34:	c2ae                	sw	a1,68(sp)
20402d36:	c0b2                	sw	a2,64(sp)
20402d38:	de36                	sw	a3,60(sp)
20402d3a:	dc3a                	sw	a4,56(sp)
20402d3c:	da3e                	sw	a5,52(sp)
20402d3e:	d842                	sw	a6,48(sp)
20402d40:	d646                	sw	a7,44(sp)
20402d42:	d472                	sw	t3,40(sp)
20402d44:	d276                	sw	t4,36(sp)
20402d46:	d07a                	sw	t5,32(sp)
20402d48:	ce7e                	sw	t6,28(sp)
20402d4a:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:225
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC2);
20402d4c:	8d3ff0ef          	jal	ra,2040261e <__metal_myhart_id>
20402d50:	872a                	mv	a4,a0
20402d52:	800007b7          	lui	a5,0x80000
20402d56:	070a                	slli	a4,a4,0x2
20402d58:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20402d5c:	97ba                	add	a5,a5,a4
20402d5e:	439c                	lw	a5,0(a5)
20402d60:	faf42623          	sw	a5,-84(s0)
20402d64:	fac42783          	lw	a5,-84(s0)
20402d68:	c78d                	beqz	a5,20402d92 <metal_lc2_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:225 (discriminator 1)
20402d6a:	fac42503          	lw	a0,-84(s0)
20402d6e:	833ff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20402d72:	faa42423          	sw	a0,-88(s0)
20402d76:	fa842783          	lw	a5,-88(s0)
20402d7a:	2487a783          	lw	a5,584(a5)
20402d7e:	faf42223          	sw	a5,-92(s0)
20402d82:	fa842783          	lw	a5,-88(s0)
20402d86:	2407a783          	lw	a5,576(a5)
20402d8a:	fa442583          	lw	a1,-92(s0)
20402d8e:	4549                	li	a0,18
20402d90:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:226
}
20402d92:	0001                	nop
20402d94:	40f6                	lw	ra,92(sp)
20402d96:	42e6                	lw	t0,88(sp)
20402d98:	4356                	lw	t1,84(sp)
20402d9a:	43c6                	lw	t2,80(sp)
20402d9c:	4436                	lw	s0,76(sp)
20402d9e:	4526                	lw	a0,72(sp)
20402da0:	4596                	lw	a1,68(sp)
20402da2:	4606                	lw	a2,64(sp)
20402da4:	56f2                	lw	a3,60(sp)
20402da6:	5762                	lw	a4,56(sp)
20402da8:	57d2                	lw	a5,52(sp)
20402daa:	5842                	lw	a6,48(sp)
20402dac:	58b2                	lw	a7,44(sp)
20402dae:	5e22                	lw	t3,40(sp)
20402db0:	5e92                	lw	t4,36(sp)
20402db2:	5f02                	lw	t5,32(sp)
20402db4:	4ff2                	lw	t6,28(sp)
20402db6:	6125                	addi	sp,sp,96
20402db8:	30200073          	mret

20402dbc <metal_lc3_interrupt_vector_handler>:
metal_lc3_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:229

/* The metal_lc3_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc3_interrupt_vector_handler(void) {
20402dbc:	711d                	addi	sp,sp,-96
20402dbe:	ce86                	sw	ra,92(sp)
20402dc0:	cc96                	sw	t0,88(sp)
20402dc2:	ca9a                	sw	t1,84(sp)
20402dc4:	c89e                	sw	t2,80(sp)
20402dc6:	c6a2                	sw	s0,76(sp)
20402dc8:	c4aa                	sw	a0,72(sp)
20402dca:	c2ae                	sw	a1,68(sp)
20402dcc:	c0b2                	sw	a2,64(sp)
20402dce:	de36                	sw	a3,60(sp)
20402dd0:	dc3a                	sw	a4,56(sp)
20402dd2:	da3e                	sw	a5,52(sp)
20402dd4:	d842                	sw	a6,48(sp)
20402dd6:	d646                	sw	a7,44(sp)
20402dd8:	d472                	sw	t3,40(sp)
20402dda:	d276                	sw	t4,36(sp)
20402ddc:	d07a                	sw	t5,32(sp)
20402dde:	ce7e                	sw	t6,28(sp)
20402de0:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC3);
20402de2:	83dff0ef          	jal	ra,2040261e <__metal_myhart_id>
20402de6:	872a                	mv	a4,a0
20402de8:	800007b7          	lui	a5,0x80000
20402dec:	070a                	slli	a4,a4,0x2
20402dee:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20402df2:	97ba                	add	a5,a5,a4
20402df4:	439c                	lw	a5,0(a5)
20402df6:	faf42623          	sw	a5,-84(s0)
20402dfa:	fac42783          	lw	a5,-84(s0)
20402dfe:	c78d                	beqz	a5,20402e28 <metal_lc3_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:230 (discriminator 1)
20402e00:	fac42503          	lw	a0,-84(s0)
20402e04:	f9cff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20402e08:	faa42423          	sw	a0,-88(s0)
20402e0c:	fa842783          	lw	a5,-88(s0)
20402e10:	2607a783          	lw	a5,608(a5)
20402e14:	faf42223          	sw	a5,-92(s0)
20402e18:	fa842783          	lw	a5,-88(s0)
20402e1c:	2587a783          	lw	a5,600(a5)
20402e20:	fa442583          	lw	a1,-92(s0)
20402e24:	454d                	li	a0,19
20402e26:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:231
}
20402e28:	0001                	nop
20402e2a:	40f6                	lw	ra,92(sp)
20402e2c:	42e6                	lw	t0,88(sp)
20402e2e:	4356                	lw	t1,84(sp)
20402e30:	43c6                	lw	t2,80(sp)
20402e32:	4436                	lw	s0,76(sp)
20402e34:	4526                	lw	a0,72(sp)
20402e36:	4596                	lw	a1,68(sp)
20402e38:	4606                	lw	a2,64(sp)
20402e3a:	56f2                	lw	a3,60(sp)
20402e3c:	5762                	lw	a4,56(sp)
20402e3e:	57d2                	lw	a5,52(sp)
20402e40:	5842                	lw	a6,48(sp)
20402e42:	58b2                	lw	a7,44(sp)
20402e44:	5e22                	lw	t3,40(sp)
20402e46:	5e92                	lw	t4,36(sp)
20402e48:	5f02                	lw	t5,32(sp)
20402e4a:	4ff2                	lw	t6,28(sp)
20402e4c:	6125                	addi	sp,sp,96
20402e4e:	30200073          	mret

20402e52 <metal_lc4_interrupt_vector_handler>:
metal_lc4_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:234

/* The metal_lc4_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc4_interrupt_vector_handler(void) {
20402e52:	711d                	addi	sp,sp,-96
20402e54:	ce86                	sw	ra,92(sp)
20402e56:	cc96                	sw	t0,88(sp)
20402e58:	ca9a                	sw	t1,84(sp)
20402e5a:	c89e                	sw	t2,80(sp)
20402e5c:	c6a2                	sw	s0,76(sp)
20402e5e:	c4aa                	sw	a0,72(sp)
20402e60:	c2ae                	sw	a1,68(sp)
20402e62:	c0b2                	sw	a2,64(sp)
20402e64:	de36                	sw	a3,60(sp)
20402e66:	dc3a                	sw	a4,56(sp)
20402e68:	da3e                	sw	a5,52(sp)
20402e6a:	d842                	sw	a6,48(sp)
20402e6c:	d646                	sw	a7,44(sp)
20402e6e:	d472                	sw	t3,40(sp)
20402e70:	d276                	sw	t4,36(sp)
20402e72:	d07a                	sw	t5,32(sp)
20402e74:	ce7e                	sw	t6,28(sp)
20402e76:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:235
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC4);
20402e78:	fa6ff0ef          	jal	ra,2040261e <__metal_myhart_id>
20402e7c:	872a                	mv	a4,a0
20402e7e:	800007b7          	lui	a5,0x80000
20402e82:	070a                	slli	a4,a4,0x2
20402e84:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20402e88:	97ba                	add	a5,a5,a4
20402e8a:	439c                	lw	a5,0(a5)
20402e8c:	faf42623          	sw	a5,-84(s0)
20402e90:	fac42783          	lw	a5,-84(s0)
20402e94:	c78d                	beqz	a5,20402ebe <metal_lc4_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:235 (discriminator 1)
20402e96:	fac42503          	lw	a0,-84(s0)
20402e9a:	f06ff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20402e9e:	faa42423          	sw	a0,-88(s0)
20402ea2:	fa842783          	lw	a5,-88(s0)
20402ea6:	2787a783          	lw	a5,632(a5)
20402eaa:	faf42223          	sw	a5,-92(s0)
20402eae:	fa842783          	lw	a5,-88(s0)
20402eb2:	2707a783          	lw	a5,624(a5)
20402eb6:	fa442583          	lw	a1,-92(s0)
20402eba:	4551                	li	a0,20
20402ebc:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:236
}
20402ebe:	0001                	nop
20402ec0:	40f6                	lw	ra,92(sp)
20402ec2:	42e6                	lw	t0,88(sp)
20402ec4:	4356                	lw	t1,84(sp)
20402ec6:	43c6                	lw	t2,80(sp)
20402ec8:	4436                	lw	s0,76(sp)
20402eca:	4526                	lw	a0,72(sp)
20402ecc:	4596                	lw	a1,68(sp)
20402ece:	4606                	lw	a2,64(sp)
20402ed0:	56f2                	lw	a3,60(sp)
20402ed2:	5762                	lw	a4,56(sp)
20402ed4:	57d2                	lw	a5,52(sp)
20402ed6:	5842                	lw	a6,48(sp)
20402ed8:	58b2                	lw	a7,44(sp)
20402eda:	5e22                	lw	t3,40(sp)
20402edc:	5e92                	lw	t4,36(sp)
20402ede:	5f02                	lw	t5,32(sp)
20402ee0:	4ff2                	lw	t6,28(sp)
20402ee2:	6125                	addi	sp,sp,96
20402ee4:	30200073          	mret

20402ee8 <metal_lc5_interrupt_vector_handler>:
metal_lc5_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:239

/* The metal_lc5_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc5_interrupt_vector_handler(void) {
20402ee8:	711d                	addi	sp,sp,-96
20402eea:	ce86                	sw	ra,92(sp)
20402eec:	cc96                	sw	t0,88(sp)
20402eee:	ca9a                	sw	t1,84(sp)
20402ef0:	c89e                	sw	t2,80(sp)
20402ef2:	c6a2                	sw	s0,76(sp)
20402ef4:	c4aa                	sw	a0,72(sp)
20402ef6:	c2ae                	sw	a1,68(sp)
20402ef8:	c0b2                	sw	a2,64(sp)
20402efa:	de36                	sw	a3,60(sp)
20402efc:	dc3a                	sw	a4,56(sp)
20402efe:	da3e                	sw	a5,52(sp)
20402f00:	d842                	sw	a6,48(sp)
20402f02:	d646                	sw	a7,44(sp)
20402f04:	d472                	sw	t3,40(sp)
20402f06:	d276                	sw	t4,36(sp)
20402f08:	d07a                	sw	t5,32(sp)
20402f0a:	ce7e                	sw	t6,28(sp)
20402f0c:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC5);
20402f0e:	f10ff0ef          	jal	ra,2040261e <__metal_myhart_id>
20402f12:	872a                	mv	a4,a0
20402f14:	800007b7          	lui	a5,0x80000
20402f18:	070a                	slli	a4,a4,0x2
20402f1a:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20402f1e:	97ba                	add	a5,a5,a4
20402f20:	439c                	lw	a5,0(a5)
20402f22:	faf42623          	sw	a5,-84(s0)
20402f26:	fac42783          	lw	a5,-84(s0)
20402f2a:	c78d                	beqz	a5,20402f54 <metal_lc5_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:240 (discriminator 1)
20402f2c:	fac42503          	lw	a0,-84(s0)
20402f30:	e70ff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20402f34:	faa42423          	sw	a0,-88(s0)
20402f38:	fa842783          	lw	a5,-88(s0)
20402f3c:	2907a783          	lw	a5,656(a5)
20402f40:	faf42223          	sw	a5,-92(s0)
20402f44:	fa842783          	lw	a5,-88(s0)
20402f48:	2887a783          	lw	a5,648(a5)
20402f4c:	fa442583          	lw	a1,-92(s0)
20402f50:	4555                	li	a0,21
20402f52:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:241
}
20402f54:	0001                	nop
20402f56:	40f6                	lw	ra,92(sp)
20402f58:	42e6                	lw	t0,88(sp)
20402f5a:	4356                	lw	t1,84(sp)
20402f5c:	43c6                	lw	t2,80(sp)
20402f5e:	4436                	lw	s0,76(sp)
20402f60:	4526                	lw	a0,72(sp)
20402f62:	4596                	lw	a1,68(sp)
20402f64:	4606                	lw	a2,64(sp)
20402f66:	56f2                	lw	a3,60(sp)
20402f68:	5762                	lw	a4,56(sp)
20402f6a:	57d2                	lw	a5,52(sp)
20402f6c:	5842                	lw	a6,48(sp)
20402f6e:	58b2                	lw	a7,44(sp)
20402f70:	5e22                	lw	t3,40(sp)
20402f72:	5e92                	lw	t4,36(sp)
20402f74:	5f02                	lw	t5,32(sp)
20402f76:	4ff2                	lw	t6,28(sp)
20402f78:	6125                	addi	sp,sp,96
20402f7a:	30200073          	mret

20402f7e <metal_lc6_interrupt_vector_handler>:
metal_lc6_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:244

/* The metal_lc6_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc6_interrupt_vector_handler(void) {
20402f7e:	711d                	addi	sp,sp,-96
20402f80:	ce86                	sw	ra,92(sp)
20402f82:	cc96                	sw	t0,88(sp)
20402f84:	ca9a                	sw	t1,84(sp)
20402f86:	c89e                	sw	t2,80(sp)
20402f88:	c6a2                	sw	s0,76(sp)
20402f8a:	c4aa                	sw	a0,72(sp)
20402f8c:	c2ae                	sw	a1,68(sp)
20402f8e:	c0b2                	sw	a2,64(sp)
20402f90:	de36                	sw	a3,60(sp)
20402f92:	dc3a                	sw	a4,56(sp)
20402f94:	da3e                	sw	a5,52(sp)
20402f96:	d842                	sw	a6,48(sp)
20402f98:	d646                	sw	a7,44(sp)
20402f9a:	d472                	sw	t3,40(sp)
20402f9c:	d276                	sw	t4,36(sp)
20402f9e:	d07a                	sw	t5,32(sp)
20402fa0:	ce7e                	sw	t6,28(sp)
20402fa2:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:245
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC6);
20402fa4:	e7aff0ef          	jal	ra,2040261e <__metal_myhart_id>
20402fa8:	872a                	mv	a4,a0
20402faa:	800007b7          	lui	a5,0x80000
20402fae:	070a                	slli	a4,a4,0x2
20402fb0:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20402fb4:	97ba                	add	a5,a5,a4
20402fb6:	439c                	lw	a5,0(a5)
20402fb8:	faf42623          	sw	a5,-84(s0)
20402fbc:	fac42783          	lw	a5,-84(s0)
20402fc0:	c78d                	beqz	a5,20402fea <metal_lc6_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:245 (discriminator 1)
20402fc2:	fac42503          	lw	a0,-84(s0)
20402fc6:	ddaff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20402fca:	faa42423          	sw	a0,-88(s0)
20402fce:	fa842783          	lw	a5,-88(s0)
20402fd2:	2a87a783          	lw	a5,680(a5)
20402fd6:	faf42223          	sw	a5,-92(s0)
20402fda:	fa842783          	lw	a5,-88(s0)
20402fde:	2a07a783          	lw	a5,672(a5)
20402fe2:	fa442583          	lw	a1,-92(s0)
20402fe6:	4559                	li	a0,22
20402fe8:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:246
}
20402fea:	0001                	nop
20402fec:	40f6                	lw	ra,92(sp)
20402fee:	42e6                	lw	t0,88(sp)
20402ff0:	4356                	lw	t1,84(sp)
20402ff2:	43c6                	lw	t2,80(sp)
20402ff4:	4436                	lw	s0,76(sp)
20402ff6:	4526                	lw	a0,72(sp)
20402ff8:	4596                	lw	a1,68(sp)
20402ffa:	4606                	lw	a2,64(sp)
20402ffc:	56f2                	lw	a3,60(sp)
20402ffe:	5762                	lw	a4,56(sp)
20403000:	57d2                	lw	a5,52(sp)
20403002:	5842                	lw	a6,48(sp)
20403004:	58b2                	lw	a7,44(sp)
20403006:	5e22                	lw	t3,40(sp)
20403008:	5e92                	lw	t4,36(sp)
2040300a:	5f02                	lw	t5,32(sp)
2040300c:	4ff2                	lw	t6,28(sp)
2040300e:	6125                	addi	sp,sp,96
20403010:	30200073          	mret

20403014 <metal_lc7_interrupt_vector_handler>:
metal_lc7_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:249

/* The metal_lc7_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc7_interrupt_vector_handler(void) {
20403014:	711d                	addi	sp,sp,-96
20403016:	ce86                	sw	ra,92(sp)
20403018:	cc96                	sw	t0,88(sp)
2040301a:	ca9a                	sw	t1,84(sp)
2040301c:	c89e                	sw	t2,80(sp)
2040301e:	c6a2                	sw	s0,76(sp)
20403020:	c4aa                	sw	a0,72(sp)
20403022:	c2ae                	sw	a1,68(sp)
20403024:	c0b2                	sw	a2,64(sp)
20403026:	de36                	sw	a3,60(sp)
20403028:	dc3a                	sw	a4,56(sp)
2040302a:	da3e                	sw	a5,52(sp)
2040302c:	d842                	sw	a6,48(sp)
2040302e:	d646                	sw	a7,44(sp)
20403030:	d472                	sw	t3,40(sp)
20403032:	d276                	sw	t4,36(sp)
20403034:	d07a                	sw	t5,32(sp)
20403036:	ce7e                	sw	t6,28(sp)
20403038:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC7);
2040303a:	de4ff0ef          	jal	ra,2040261e <__metal_myhart_id>
2040303e:	872a                	mv	a4,a0
20403040:	800007b7          	lui	a5,0x80000
20403044:	070a                	slli	a4,a4,0x2
20403046:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
2040304a:	97ba                	add	a5,a5,a4
2040304c:	439c                	lw	a5,0(a5)
2040304e:	faf42623          	sw	a5,-84(s0)
20403052:	fac42783          	lw	a5,-84(s0)
20403056:	c78d                	beqz	a5,20403080 <metal_lc7_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:250 (discriminator 1)
20403058:	fac42503          	lw	a0,-84(s0)
2040305c:	d44ff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20403060:	faa42423          	sw	a0,-88(s0)
20403064:	fa842783          	lw	a5,-88(s0)
20403068:	2c07a783          	lw	a5,704(a5)
2040306c:	faf42223          	sw	a5,-92(s0)
20403070:	fa842783          	lw	a5,-88(s0)
20403074:	2b87a783          	lw	a5,696(a5)
20403078:	fa442583          	lw	a1,-92(s0)
2040307c:	455d                	li	a0,23
2040307e:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:251
}
20403080:	0001                	nop
20403082:	40f6                	lw	ra,92(sp)
20403084:	42e6                	lw	t0,88(sp)
20403086:	4356                	lw	t1,84(sp)
20403088:	43c6                	lw	t2,80(sp)
2040308a:	4436                	lw	s0,76(sp)
2040308c:	4526                	lw	a0,72(sp)
2040308e:	4596                	lw	a1,68(sp)
20403090:	4606                	lw	a2,64(sp)
20403092:	56f2                	lw	a3,60(sp)
20403094:	5762                	lw	a4,56(sp)
20403096:	57d2                	lw	a5,52(sp)
20403098:	5842                	lw	a6,48(sp)
2040309a:	58b2                	lw	a7,44(sp)
2040309c:	5e22                	lw	t3,40(sp)
2040309e:	5e92                	lw	t4,36(sp)
204030a0:	5f02                	lw	t5,32(sp)
204030a2:	4ff2                	lw	t6,28(sp)
204030a4:	6125                	addi	sp,sp,96
204030a6:	30200073          	mret

204030aa <metal_lc8_interrupt_vector_handler>:
metal_lc8_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:254

/* The metal_lc8_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc8_interrupt_vector_handler(void) {
204030aa:	711d                	addi	sp,sp,-96
204030ac:	ce86                	sw	ra,92(sp)
204030ae:	cc96                	sw	t0,88(sp)
204030b0:	ca9a                	sw	t1,84(sp)
204030b2:	c89e                	sw	t2,80(sp)
204030b4:	c6a2                	sw	s0,76(sp)
204030b6:	c4aa                	sw	a0,72(sp)
204030b8:	c2ae                	sw	a1,68(sp)
204030ba:	c0b2                	sw	a2,64(sp)
204030bc:	de36                	sw	a3,60(sp)
204030be:	dc3a                	sw	a4,56(sp)
204030c0:	da3e                	sw	a5,52(sp)
204030c2:	d842                	sw	a6,48(sp)
204030c4:	d646                	sw	a7,44(sp)
204030c6:	d472                	sw	t3,40(sp)
204030c8:	d276                	sw	t4,36(sp)
204030ca:	d07a                	sw	t5,32(sp)
204030cc:	ce7e                	sw	t6,28(sp)
204030ce:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC8);
204030d0:	d4eff0ef          	jal	ra,2040261e <__metal_myhart_id>
204030d4:	872a                	mv	a4,a0
204030d6:	800007b7          	lui	a5,0x80000
204030da:	070a                	slli	a4,a4,0x2
204030dc:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
204030e0:	97ba                	add	a5,a5,a4
204030e2:	439c                	lw	a5,0(a5)
204030e4:	faf42623          	sw	a5,-84(s0)
204030e8:	fac42783          	lw	a5,-84(s0)
204030ec:	c78d                	beqz	a5,20403116 <metal_lc8_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:255 (discriminator 1)
204030ee:	fac42503          	lw	a0,-84(s0)
204030f2:	caeff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
204030f6:	faa42423          	sw	a0,-88(s0)
204030fa:	fa842783          	lw	a5,-88(s0)
204030fe:	2d87a783          	lw	a5,728(a5)
20403102:	faf42223          	sw	a5,-92(s0)
20403106:	fa842783          	lw	a5,-88(s0)
2040310a:	2d07a783          	lw	a5,720(a5)
2040310e:	fa442583          	lw	a1,-92(s0)
20403112:	4561                	li	a0,24
20403114:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:256
}
20403116:	0001                	nop
20403118:	40f6                	lw	ra,92(sp)
2040311a:	42e6                	lw	t0,88(sp)
2040311c:	4356                	lw	t1,84(sp)
2040311e:	43c6                	lw	t2,80(sp)
20403120:	4436                	lw	s0,76(sp)
20403122:	4526                	lw	a0,72(sp)
20403124:	4596                	lw	a1,68(sp)
20403126:	4606                	lw	a2,64(sp)
20403128:	56f2                	lw	a3,60(sp)
2040312a:	5762                	lw	a4,56(sp)
2040312c:	57d2                	lw	a5,52(sp)
2040312e:	5842                	lw	a6,48(sp)
20403130:	58b2                	lw	a7,44(sp)
20403132:	5e22                	lw	t3,40(sp)
20403134:	5e92                	lw	t4,36(sp)
20403136:	5f02                	lw	t5,32(sp)
20403138:	4ff2                	lw	t6,28(sp)
2040313a:	6125                	addi	sp,sp,96
2040313c:	30200073          	mret

20403140 <metal_lc9_interrupt_vector_handler>:
metal_lc9_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:259

/* The metal_lc9_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt)) metal_lc9_interrupt_vector_handler(void) {
20403140:	711d                	addi	sp,sp,-96
20403142:	ce86                	sw	ra,92(sp)
20403144:	cc96                	sw	t0,88(sp)
20403146:	ca9a                	sw	t1,84(sp)
20403148:	c89e                	sw	t2,80(sp)
2040314a:	c6a2                	sw	s0,76(sp)
2040314c:	c4aa                	sw	a0,72(sp)
2040314e:	c2ae                	sw	a1,68(sp)
20403150:	c0b2                	sw	a2,64(sp)
20403152:	de36                	sw	a3,60(sp)
20403154:	dc3a                	sw	a4,56(sp)
20403156:	da3e                	sw	a5,52(sp)
20403158:	d842                	sw	a6,48(sp)
2040315a:	d646                	sw	a7,44(sp)
2040315c:	d472                	sw	t3,40(sp)
2040315e:	d276                	sw	t4,36(sp)
20403160:	d07a                	sw	t5,32(sp)
20403162:	ce7e                	sw	t6,28(sp)
20403164:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:260
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC9);
20403166:	cb8ff0ef          	jal	ra,2040261e <__metal_myhart_id>
2040316a:	872a                	mv	a4,a0
2040316c:	800007b7          	lui	a5,0x80000
20403170:	070a                	slli	a4,a4,0x2
20403172:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20403176:	97ba                	add	a5,a5,a4
20403178:	439c                	lw	a5,0(a5)
2040317a:	faf42623          	sw	a5,-84(s0)
2040317e:	fac42783          	lw	a5,-84(s0)
20403182:	c78d                	beqz	a5,204031ac <metal_lc9_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:260 (discriminator 1)
20403184:	fac42503          	lw	a0,-84(s0)
20403188:	c18ff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
2040318c:	faa42423          	sw	a0,-88(s0)
20403190:	fa842783          	lw	a5,-88(s0)
20403194:	2f07a783          	lw	a5,752(a5)
20403198:	faf42223          	sw	a5,-92(s0)
2040319c:	fa842783          	lw	a5,-88(s0)
204031a0:	2e87a783          	lw	a5,744(a5)
204031a4:	fa442583          	lw	a1,-92(s0)
204031a8:	4565                	li	a0,25
204031aa:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:261
}
204031ac:	0001                	nop
204031ae:	40f6                	lw	ra,92(sp)
204031b0:	42e6                	lw	t0,88(sp)
204031b2:	4356                	lw	t1,84(sp)
204031b4:	43c6                	lw	t2,80(sp)
204031b6:	4436                	lw	s0,76(sp)
204031b8:	4526                	lw	a0,72(sp)
204031ba:	4596                	lw	a1,68(sp)
204031bc:	4606                	lw	a2,64(sp)
204031be:	56f2                	lw	a3,60(sp)
204031c0:	5762                	lw	a4,56(sp)
204031c2:	57d2                	lw	a5,52(sp)
204031c4:	5842                	lw	a6,48(sp)
204031c6:	58b2                	lw	a7,44(sp)
204031c8:	5e22                	lw	t3,40(sp)
204031ca:	5e92                	lw	t4,36(sp)
204031cc:	5f02                	lw	t5,32(sp)
204031ce:	4ff2                	lw	t6,28(sp)
204031d0:	6125                	addi	sp,sp,96
204031d2:	30200073          	mret

204031d6 <metal_lc10_interrupt_vector_handler>:
metal_lc10_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:265

/* The metal_lc10_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc10_interrupt_vector_handler(void) {
204031d6:	711d                	addi	sp,sp,-96
204031d8:	ce86                	sw	ra,92(sp)
204031da:	cc96                	sw	t0,88(sp)
204031dc:	ca9a                	sw	t1,84(sp)
204031de:	c89e                	sw	t2,80(sp)
204031e0:	c6a2                	sw	s0,76(sp)
204031e2:	c4aa                	sw	a0,72(sp)
204031e4:	c2ae                	sw	a1,68(sp)
204031e6:	c0b2                	sw	a2,64(sp)
204031e8:	de36                	sw	a3,60(sp)
204031ea:	dc3a                	sw	a4,56(sp)
204031ec:	da3e                	sw	a5,52(sp)
204031ee:	d842                	sw	a6,48(sp)
204031f0:	d646                	sw	a7,44(sp)
204031f2:	d472                	sw	t3,40(sp)
204031f4:	d276                	sw	t4,36(sp)
204031f6:	d07a                	sw	t5,32(sp)
204031f8:	ce7e                	sw	t6,28(sp)
204031fa:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC10);
204031fc:	c22ff0ef          	jal	ra,2040261e <__metal_myhart_id>
20403200:	872a                	mv	a4,a0
20403202:	800007b7          	lui	a5,0x80000
20403206:	070a                	slli	a4,a4,0x2
20403208:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
2040320c:	97ba                	add	a5,a5,a4
2040320e:	439c                	lw	a5,0(a5)
20403210:	faf42623          	sw	a5,-84(s0)
20403214:	fac42783          	lw	a5,-84(s0)
20403218:	c78d                	beqz	a5,20403242 <metal_lc10_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:266 (discriminator 1)
2040321a:	fac42503          	lw	a0,-84(s0)
2040321e:	b82ff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20403222:	faa42423          	sw	a0,-88(s0)
20403226:	fa842783          	lw	a5,-88(s0)
2040322a:	3087a783          	lw	a5,776(a5)
2040322e:	faf42223          	sw	a5,-92(s0)
20403232:	fa842783          	lw	a5,-88(s0)
20403236:	3007a783          	lw	a5,768(a5)
2040323a:	fa442583          	lw	a1,-92(s0)
2040323e:	4569                	li	a0,26
20403240:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:267
}
20403242:	0001                	nop
20403244:	40f6                	lw	ra,92(sp)
20403246:	42e6                	lw	t0,88(sp)
20403248:	4356                	lw	t1,84(sp)
2040324a:	43c6                	lw	t2,80(sp)
2040324c:	4436                	lw	s0,76(sp)
2040324e:	4526                	lw	a0,72(sp)
20403250:	4596                	lw	a1,68(sp)
20403252:	4606                	lw	a2,64(sp)
20403254:	56f2                	lw	a3,60(sp)
20403256:	5762                	lw	a4,56(sp)
20403258:	57d2                	lw	a5,52(sp)
2040325a:	5842                	lw	a6,48(sp)
2040325c:	58b2                	lw	a7,44(sp)
2040325e:	5e22                	lw	t3,40(sp)
20403260:	5e92                	lw	t4,36(sp)
20403262:	5f02                	lw	t5,32(sp)
20403264:	4ff2                	lw	t6,28(sp)
20403266:	6125                	addi	sp,sp,96
20403268:	30200073          	mret

2040326c <metal_lc11_interrupt_vector_handler>:
metal_lc11_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:271

/* The metal_lc11_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc11_interrupt_vector_handler(void) {
2040326c:	711d                	addi	sp,sp,-96
2040326e:	ce86                	sw	ra,92(sp)
20403270:	cc96                	sw	t0,88(sp)
20403272:	ca9a                	sw	t1,84(sp)
20403274:	c89e                	sw	t2,80(sp)
20403276:	c6a2                	sw	s0,76(sp)
20403278:	c4aa                	sw	a0,72(sp)
2040327a:	c2ae                	sw	a1,68(sp)
2040327c:	c0b2                	sw	a2,64(sp)
2040327e:	de36                	sw	a3,60(sp)
20403280:	dc3a                	sw	a4,56(sp)
20403282:	da3e                	sw	a5,52(sp)
20403284:	d842                	sw	a6,48(sp)
20403286:	d646                	sw	a7,44(sp)
20403288:	d472                	sw	t3,40(sp)
2040328a:	d276                	sw	t4,36(sp)
2040328c:	d07a                	sw	t5,32(sp)
2040328e:	ce7e                	sw	t6,28(sp)
20403290:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC11);
20403292:	b8cff0ef          	jal	ra,2040261e <__metal_myhart_id>
20403296:	872a                	mv	a4,a0
20403298:	800007b7          	lui	a5,0x80000
2040329c:	070a                	slli	a4,a4,0x2
2040329e:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
204032a2:	97ba                	add	a5,a5,a4
204032a4:	439c                	lw	a5,0(a5)
204032a6:	faf42623          	sw	a5,-84(s0)
204032aa:	fac42783          	lw	a5,-84(s0)
204032ae:	c78d                	beqz	a5,204032d8 <metal_lc11_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:272 (discriminator 1)
204032b0:	fac42503          	lw	a0,-84(s0)
204032b4:	aecff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
204032b8:	faa42423          	sw	a0,-88(s0)
204032bc:	fa842783          	lw	a5,-88(s0)
204032c0:	3207a783          	lw	a5,800(a5)
204032c4:	faf42223          	sw	a5,-92(s0)
204032c8:	fa842783          	lw	a5,-88(s0)
204032cc:	3187a783          	lw	a5,792(a5)
204032d0:	fa442583          	lw	a1,-92(s0)
204032d4:	456d                	li	a0,27
204032d6:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:273
}
204032d8:	0001                	nop
204032da:	40f6                	lw	ra,92(sp)
204032dc:	42e6                	lw	t0,88(sp)
204032de:	4356                	lw	t1,84(sp)
204032e0:	43c6                	lw	t2,80(sp)
204032e2:	4436                	lw	s0,76(sp)
204032e4:	4526                	lw	a0,72(sp)
204032e6:	4596                	lw	a1,68(sp)
204032e8:	4606                	lw	a2,64(sp)
204032ea:	56f2                	lw	a3,60(sp)
204032ec:	5762                	lw	a4,56(sp)
204032ee:	57d2                	lw	a5,52(sp)
204032f0:	5842                	lw	a6,48(sp)
204032f2:	58b2                	lw	a7,44(sp)
204032f4:	5e22                	lw	t3,40(sp)
204032f6:	5e92                	lw	t4,36(sp)
204032f8:	5f02                	lw	t5,32(sp)
204032fa:	4ff2                	lw	t6,28(sp)
204032fc:	6125                	addi	sp,sp,96
204032fe:	30200073          	mret

20403302 <metal_lc12_interrupt_vector_handler>:
metal_lc12_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:277

/* The metal_lc12_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc12_interrupt_vector_handler(void) {
20403302:	711d                	addi	sp,sp,-96
20403304:	ce86                	sw	ra,92(sp)
20403306:	cc96                	sw	t0,88(sp)
20403308:	ca9a                	sw	t1,84(sp)
2040330a:	c89e                	sw	t2,80(sp)
2040330c:	c6a2                	sw	s0,76(sp)
2040330e:	c4aa                	sw	a0,72(sp)
20403310:	c2ae                	sw	a1,68(sp)
20403312:	c0b2                	sw	a2,64(sp)
20403314:	de36                	sw	a3,60(sp)
20403316:	dc3a                	sw	a4,56(sp)
20403318:	da3e                	sw	a5,52(sp)
2040331a:	d842                	sw	a6,48(sp)
2040331c:	d646                	sw	a7,44(sp)
2040331e:	d472                	sw	t3,40(sp)
20403320:	d276                	sw	t4,36(sp)
20403322:	d07a                	sw	t5,32(sp)
20403324:	ce7e                	sw	t6,28(sp)
20403326:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC12);
20403328:	af6ff0ef          	jal	ra,2040261e <__metal_myhart_id>
2040332c:	872a                	mv	a4,a0
2040332e:	800007b7          	lui	a5,0x80000
20403332:	070a                	slli	a4,a4,0x2
20403334:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20403338:	97ba                	add	a5,a5,a4
2040333a:	439c                	lw	a5,0(a5)
2040333c:	faf42623          	sw	a5,-84(s0)
20403340:	fac42783          	lw	a5,-84(s0)
20403344:	c78d                	beqz	a5,2040336e <metal_lc12_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:278 (discriminator 1)
20403346:	fac42503          	lw	a0,-84(s0)
2040334a:	a56ff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
2040334e:	faa42423          	sw	a0,-88(s0)
20403352:	fa842783          	lw	a5,-88(s0)
20403356:	3387a783          	lw	a5,824(a5)
2040335a:	faf42223          	sw	a5,-92(s0)
2040335e:	fa842783          	lw	a5,-88(s0)
20403362:	3307a783          	lw	a5,816(a5)
20403366:	fa442583          	lw	a1,-92(s0)
2040336a:	4571                	li	a0,28
2040336c:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:279
}
2040336e:	0001                	nop
20403370:	40f6                	lw	ra,92(sp)
20403372:	42e6                	lw	t0,88(sp)
20403374:	4356                	lw	t1,84(sp)
20403376:	43c6                	lw	t2,80(sp)
20403378:	4436                	lw	s0,76(sp)
2040337a:	4526                	lw	a0,72(sp)
2040337c:	4596                	lw	a1,68(sp)
2040337e:	4606                	lw	a2,64(sp)
20403380:	56f2                	lw	a3,60(sp)
20403382:	5762                	lw	a4,56(sp)
20403384:	57d2                	lw	a5,52(sp)
20403386:	5842                	lw	a6,48(sp)
20403388:	58b2                	lw	a7,44(sp)
2040338a:	5e22                	lw	t3,40(sp)
2040338c:	5e92                	lw	t4,36(sp)
2040338e:	5f02                	lw	t5,32(sp)
20403390:	4ff2                	lw	t6,28(sp)
20403392:	6125                	addi	sp,sp,96
20403394:	30200073          	mret

20403398 <metal_lc13_interrupt_vector_handler>:
metal_lc13_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:283

/* The metal_lc13_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc13_interrupt_vector_handler(void) {
20403398:	711d                	addi	sp,sp,-96
2040339a:	ce86                	sw	ra,92(sp)
2040339c:	cc96                	sw	t0,88(sp)
2040339e:	ca9a                	sw	t1,84(sp)
204033a0:	c89e                	sw	t2,80(sp)
204033a2:	c6a2                	sw	s0,76(sp)
204033a4:	c4aa                	sw	a0,72(sp)
204033a6:	c2ae                	sw	a1,68(sp)
204033a8:	c0b2                	sw	a2,64(sp)
204033aa:	de36                	sw	a3,60(sp)
204033ac:	dc3a                	sw	a4,56(sp)
204033ae:	da3e                	sw	a5,52(sp)
204033b0:	d842                	sw	a6,48(sp)
204033b2:	d646                	sw	a7,44(sp)
204033b4:	d472                	sw	t3,40(sp)
204033b6:	d276                	sw	t4,36(sp)
204033b8:	d07a                	sw	t5,32(sp)
204033ba:	ce7e                	sw	t6,28(sp)
204033bc:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC13);
204033be:	a60ff0ef          	jal	ra,2040261e <__metal_myhart_id>
204033c2:	872a                	mv	a4,a0
204033c4:	800007b7          	lui	a5,0x80000
204033c8:	070a                	slli	a4,a4,0x2
204033ca:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
204033ce:	97ba                	add	a5,a5,a4
204033d0:	439c                	lw	a5,0(a5)
204033d2:	faf42623          	sw	a5,-84(s0)
204033d6:	fac42783          	lw	a5,-84(s0)
204033da:	c78d                	beqz	a5,20403404 <metal_lc13_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:284 (discriminator 1)
204033dc:	fac42503          	lw	a0,-84(s0)
204033e0:	9c0ff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
204033e4:	faa42423          	sw	a0,-88(s0)
204033e8:	fa842783          	lw	a5,-88(s0)
204033ec:	3507a783          	lw	a5,848(a5)
204033f0:	faf42223          	sw	a5,-92(s0)
204033f4:	fa842783          	lw	a5,-88(s0)
204033f8:	3487a783          	lw	a5,840(a5)
204033fc:	fa442583          	lw	a1,-92(s0)
20403400:	4575                	li	a0,29
20403402:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:285
}
20403404:	0001                	nop
20403406:	40f6                	lw	ra,92(sp)
20403408:	42e6                	lw	t0,88(sp)
2040340a:	4356                	lw	t1,84(sp)
2040340c:	43c6                	lw	t2,80(sp)
2040340e:	4436                	lw	s0,76(sp)
20403410:	4526                	lw	a0,72(sp)
20403412:	4596                	lw	a1,68(sp)
20403414:	4606                	lw	a2,64(sp)
20403416:	56f2                	lw	a3,60(sp)
20403418:	5762                	lw	a4,56(sp)
2040341a:	57d2                	lw	a5,52(sp)
2040341c:	5842                	lw	a6,48(sp)
2040341e:	58b2                	lw	a7,44(sp)
20403420:	5e22                	lw	t3,40(sp)
20403422:	5e92                	lw	t4,36(sp)
20403424:	5f02                	lw	t5,32(sp)
20403426:	4ff2                	lw	t6,28(sp)
20403428:	6125                	addi	sp,sp,96
2040342a:	30200073          	mret

2040342e <metal_lc14_interrupt_vector_handler>:
metal_lc14_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:289

/* The metal_lc14_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc14_interrupt_vector_handler(void) {
2040342e:	711d                	addi	sp,sp,-96
20403430:	ce86                	sw	ra,92(sp)
20403432:	cc96                	sw	t0,88(sp)
20403434:	ca9a                	sw	t1,84(sp)
20403436:	c89e                	sw	t2,80(sp)
20403438:	c6a2                	sw	s0,76(sp)
2040343a:	c4aa                	sw	a0,72(sp)
2040343c:	c2ae                	sw	a1,68(sp)
2040343e:	c0b2                	sw	a2,64(sp)
20403440:	de36                	sw	a3,60(sp)
20403442:	dc3a                	sw	a4,56(sp)
20403444:	da3e                	sw	a5,52(sp)
20403446:	d842                	sw	a6,48(sp)
20403448:	d646                	sw	a7,44(sp)
2040344a:	d472                	sw	t3,40(sp)
2040344c:	d276                	sw	t4,36(sp)
2040344e:	d07a                	sw	t5,32(sp)
20403450:	ce7e                	sw	t6,28(sp)
20403452:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:290
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC14);
20403454:	9caff0ef          	jal	ra,2040261e <__metal_myhart_id>
20403458:	872a                	mv	a4,a0
2040345a:	800007b7          	lui	a5,0x80000
2040345e:	070a                	slli	a4,a4,0x2
20403460:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
20403464:	97ba                	add	a5,a5,a4
20403466:	439c                	lw	a5,0(a5)
20403468:	faf42623          	sw	a5,-84(s0)
2040346c:	fac42783          	lw	a5,-84(s0)
20403470:	c78d                	beqz	a5,2040349a <metal_lc14_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:290 (discriminator 1)
20403472:	fac42503          	lw	a0,-84(s0)
20403476:	92aff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
2040347a:	faa42423          	sw	a0,-88(s0)
2040347e:	fa842783          	lw	a5,-88(s0)
20403482:	3687a783          	lw	a5,872(a5)
20403486:	faf42223          	sw	a5,-92(s0)
2040348a:	fa842783          	lw	a5,-88(s0)
2040348e:	3607a783          	lw	a5,864(a5)
20403492:	fa442583          	lw	a1,-92(s0)
20403496:	4579                	li	a0,30
20403498:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:291
}
2040349a:	0001                	nop
2040349c:	40f6                	lw	ra,92(sp)
2040349e:	42e6                	lw	t0,88(sp)
204034a0:	4356                	lw	t1,84(sp)
204034a2:	43c6                	lw	t2,80(sp)
204034a4:	4436                	lw	s0,76(sp)
204034a6:	4526                	lw	a0,72(sp)
204034a8:	4596                	lw	a1,68(sp)
204034aa:	4606                	lw	a2,64(sp)
204034ac:	56f2                	lw	a3,60(sp)
204034ae:	5762                	lw	a4,56(sp)
204034b0:	57d2                	lw	a5,52(sp)
204034b2:	5842                	lw	a6,48(sp)
204034b4:	58b2                	lw	a7,44(sp)
204034b6:	5e22                	lw	t3,40(sp)
204034b8:	5e92                	lw	t4,36(sp)
204034ba:	5f02                	lw	t5,32(sp)
204034bc:	4ff2                	lw	t6,28(sp)
204034be:	6125                	addi	sp,sp,96
204034c0:	30200073          	mret

204034c4 <metal_lc15_interrupt_vector_handler>:
metal_lc15_interrupt_vector_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:295

/* The metal_lc15_interrupt_vector_handler() function can be redefined. */
void __attribute__((weak, interrupt))
metal_lc15_interrupt_vector_handler(void) {
204034c4:	711d                	addi	sp,sp,-96
204034c6:	ce86                	sw	ra,92(sp)
204034c8:	cc96                	sw	t0,88(sp)
204034ca:	ca9a                	sw	t1,84(sp)
204034cc:	c89e                	sw	t2,80(sp)
204034ce:	c6a2                	sw	s0,76(sp)
204034d0:	c4aa                	sw	a0,72(sp)
204034d2:	c2ae                	sw	a1,68(sp)
204034d4:	c0b2                	sw	a2,64(sp)
204034d6:	de36                	sw	a3,60(sp)
204034d8:	dc3a                	sw	a4,56(sp)
204034da:	da3e                	sw	a5,52(sp)
204034dc:	d842                	sw	a6,48(sp)
204034de:	d646                	sw	a7,44(sp)
204034e0:	d472                	sw	t3,40(sp)
204034e2:	d276                	sw	t4,36(sp)
204034e4:	d07a                	sw	t5,32(sp)
204034e6:	ce7e                	sw	t6,28(sp)
204034e8:	1080                	addi	s0,sp,96
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296
    __METAL_IRQ_VECTOR_HANDLER(METAL_INTERRUPT_ID_LC15);
204034ea:	934ff0ef          	jal	ra,2040261e <__metal_myhart_id>
204034ee:	872a                	mv	a4,a0
204034f0:	800007b7          	lui	a5,0x80000
204034f4:	070a                	slli	a4,a4,0x2
204034f6:	76878793          	addi	a5,a5,1896 # 80000768 <metal_segment_heap_target_end+0xfffff2e8>
204034fa:	97ba                	add	a5,a5,a4
204034fc:	439c                	lw	a5,0(a5)
204034fe:	faf42623          	sw	a5,-84(s0)
20403502:	fac42783          	lw	a5,-84(s0)
20403506:	c78d                	beqz	a5,20403530 <metal_lc15_interrupt_vector_handler+0x6c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:296 (discriminator 1)
20403508:	fac42503          	lw	a0,-84(s0)
2040350c:	894ff0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20403510:	faa42423          	sw	a0,-88(s0)
20403514:	fa842783          	lw	a5,-88(s0)
20403518:	3807a783          	lw	a5,896(a5)
2040351c:	faf42223          	sw	a5,-92(s0)
20403520:	fa842783          	lw	a5,-88(s0)
20403524:	3787a783          	lw	a5,888(a5)
20403528:	fa442583          	lw	a1,-92(s0)
2040352c:	457d                	li	a0,31
2040352e:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:297
}
20403530:	0001                	nop
20403532:	40f6                	lw	ra,92(sp)
20403534:	42e6                	lw	t0,88(sp)
20403536:	4356                	lw	t1,84(sp)
20403538:	43c6                	lw	t2,80(sp)
2040353a:	4436                	lw	s0,76(sp)
2040353c:	4526                	lw	a0,72(sp)
2040353e:	4596                	lw	a1,68(sp)
20403540:	4606                	lw	a2,64(sp)
20403542:	56f2                	lw	a3,60(sp)
20403544:	5762                	lw	a4,56(sp)
20403546:	57d2                	lw	a5,52(sp)
20403548:	5842                	lw	a6,48(sp)
2040354a:	58b2                	lw	a7,44(sp)
2040354c:	5e22                	lw	t3,40(sp)
2040354e:	5e92                	lw	t4,36(sp)
20403550:	5f02                	lw	t5,32(sp)
20403552:	4ff2                	lw	t6,28(sp)
20403554:	6125                	addi	sp,sp,96
20403556:	30200073          	mret

2040355a <__metal_controller_interrupt_vector_mode>:
__metal_controller_interrupt_vector_mode():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:299

metal_vector_mode __metal_controller_interrupt_vector_mode(void) {
2040355a:	1101                	addi	sp,sp,-32
2040355c:	ce22                	sw	s0,28(sp)
2040355e:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:302
    uintptr_t val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
20403560:	305027f3          	csrr	a5,mtvec
20403564:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:303
    val &= METAL_MTVEC_MASK;
20403568:	fec42783          	lw	a5,-20(s0)
2040356c:	03f7f793          	andi	a5,a5,63
20403570:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:305

    switch (val) {
20403574:	fec42703          	lw	a4,-20(s0)
20403578:	478d                	li	a5,3
2040357a:	02f70363          	beq	a4,a5,204035a0 <__metal_controller_interrupt_vector_mode+0x46>
2040357e:	fec42703          	lw	a4,-20(s0)
20403582:	478d                	li	a5,3
20403584:	02e7e263          	bltu	a5,a4,204035a8 <__metal_controller_interrupt_vector_mode+0x4e>
20403588:	fec42703          	lw	a4,-20(s0)
2040358c:	4785                	li	a5,1
2040358e:	00f70b63          	beq	a4,a5,204035a4 <__metal_controller_interrupt_vector_mode+0x4a>
20403592:	fec42703          	lw	a4,-20(s0)
20403596:	4789                	li	a5,2
20403598:	00f71863          	bne	a4,a5,204035a8 <__metal_controller_interrupt_vector_mode+0x4e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:307
    case METAL_MTVEC_CLIC:
        return METAL_SELECTIVE_VECTOR_MODE;
2040359c:	478d                	li	a5,3
2040359e:	a031                	j	204035aa <__metal_controller_interrupt_vector_mode+0x50>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:309
    case METAL_MTVEC_CLIC_VECTORED:
        return METAL_HARDWARE_VECTOR_MODE;
204035a0:	4791                	li	a5,4
204035a2:	a021                	j	204035aa <__metal_controller_interrupt_vector_mode+0x50>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:311
    case METAL_MTVEC_VECTORED:
        return METAL_VECTOR_MODE;
204035a4:	4785                	li	a5,1
204035a6:	a011                	j	204035aa <__metal_controller_interrupt_vector_mode+0x50>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:313
    }
    return METAL_DIRECT_MODE;
204035a8:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:314
}
204035aa:	853e                	mv	a0,a5
204035ac:	4472                	lw	s0,28(sp)
204035ae:	6105                	addi	sp,sp,32
204035b0:	8082                	ret

204035b2 <__metal_controller_interrupt_vector>:
__metal_controller_interrupt_vector():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:317

void __metal_controller_interrupt_vector(metal_vector_mode mode,
                                         void *vec_table) {
204035b2:	7179                	addi	sp,sp,-48
204035b4:	d622                	sw	s0,44(sp)
204035b6:	1800                	addi	s0,sp,48
204035b8:	fca42e23          	sw	a0,-36(s0)
204035bc:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:320
    uintptr_t trap_entry, val;

    __asm__ volatile("csrr %0, mtvec" : "=r"(val));
204035c0:	305027f3          	csrr	a5,mtvec
204035c4:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:321
    val &= ~(METAL_MTVEC_CLIC_VECTORED | METAL_MTVEC_CLIC_RESERVED);
204035c8:	fec42783          	lw	a5,-20(s0)
204035cc:	fc07f793          	andi	a5,a5,-64
204035d0:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:322
    trap_entry = (uintptr_t)vec_table;
204035d4:	fd842783          	lw	a5,-40(s0)
204035d8:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:324

    switch (mode) {
204035dc:	fdc42703          	lw	a4,-36(s0)
204035e0:	4791                	li	a5,4
204035e2:	04f70563          	beq	a4,a5,2040362c <__metal_controller_interrupt_vector+0x7a>
204035e6:	fdc42703          	lw	a4,-36(s0)
204035ea:	4791                	li	a5,4
204035ec:	06e7e863          	bltu	a5,a4,2040365c <__metal_controller_interrupt_vector+0xaa>
204035f0:	fdc42703          	lw	a4,-36(s0)
204035f4:	478d                	li	a5,3
204035f6:	06e7e363          	bltu	a5,a4,2040365c <__metal_controller_interrupt_vector+0xaa>
204035fa:	fdc42703          	lw	a4,-36(s0)
204035fe:	4789                	li	a5,2
20403600:	00f77b63          	bgeu	a4,a5,20403616 <__metal_controller_interrupt_vector+0x64>
20403604:	fdc42783          	lw	a5,-36(s0)
20403608:	c7a1                	beqz	a5,20403650 <__metal_controller_interrupt_vector+0x9e>
2040360a:	fdc42703          	lw	a4,-36(s0)
2040360e:	4785                	li	a5,1
20403610:	02f70963          	beq	a4,a5,20403642 <__metal_controller_interrupt_vector+0x90>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:344
    case METAL_DIRECT_MODE:
        __asm__ volatile(
            "csrw mtvec, %0" ::"r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
        break;
    }
}
20403614:	a0a1                	j	2040365c <__metal_controller_interrupt_vector+0xaa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:327
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
20403616:	fe842783          	lw	a5,-24(s0)
2040361a:	30779073          	csrw	mtvt,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:328
        __asm__ volatile("csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC));
2040361e:	fec42783          	lw	a5,-20(s0)
20403622:	0027e793          	ori	a5,a5,2
20403626:	30579073          	csrw	mtvec,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:329
        break;
2040362a:	a80d                	j	2040365c <__metal_controller_interrupt_vector+0xaa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:331
        __asm__ volatile("csrw 0x307, %0" ::"r"(trap_entry));
2040362c:	fe842783          	lw	a5,-24(s0)
20403630:	30779073          	csrw	mtvt,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:333
            "csrw mtvec, %0" ::"r"(val | METAL_MTVEC_CLIC_VECTORED));
20403634:	fec42783          	lw	a5,-20(s0)
20403638:	0037e793          	ori	a5,a5,3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:332
        __asm__ volatile(
2040363c:	30579073          	csrw	mtvec,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:334
        break;
20403640:	a831                	j	2040365c <__metal_controller_interrupt_vector+0xaa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:337
            "csrw mtvec, %0" ::"r"(trap_entry | METAL_MTVEC_VECTORED));
20403642:	fe842783          	lw	a5,-24(s0)
20403646:	0017e793          	ori	a5,a5,1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:336
        __asm__ volatile(
2040364a:	30579073          	csrw	mtvec,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:338
        break;
2040364e:	a039                	j	2040365c <__metal_controller_interrupt_vector+0xaa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:341
            "csrw mtvec, %0" ::"r"(trap_entry & ~METAL_MTVEC_CLIC_VECTORED));
20403650:	fe842783          	lw	a5,-24(s0)
20403654:	9bf1                	andi	a5,a5,-4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:340
        __asm__ volatile(
20403656:	30579073          	csrw	mtvec,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:342
        break;
2040365a:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:344
}
2040365c:	0001                	nop
2040365e:	5432                	lw	s0,44(sp)
20403660:	6145                	addi	sp,sp,48
20403662:	8082                	ret

20403664 <__metal_valid_interrupt_id>:
__metal_valid_interrupt_id():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:346

int __metal_valid_interrupt_id(int id) {
20403664:	1101                	addi	sp,sp,-32
20403666:	ce22                	sw	s0,28(sp)
20403668:	1000                	addi	s0,sp,32
2040366a:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:347
    switch (id) {
2040366e:	fec42703          	lw	a4,-20(s0)
20403672:	47fd                	li	a5,31
20403674:	02e7c663          	blt	a5,a4,204036a0 <__metal_valid_interrupt_id+0x3c>
20403678:	fec42703          	lw	a4,-20(s0)
2040367c:	478d                	li	a5,3
2040367e:	02f74963          	blt	a4,a5,204036b0 <__metal_valid_interrupt_id+0x4c>
20403682:	fec42783          	lw	a5,-20(s0)
20403686:	4705                	li	a4,1
20403688:	00f71733          	sll	a4,a4,a5
2040368c:	77c5                	lui	a5,0xffff1
2040368e:	88878793          	addi	a5,a5,-1912 # ffff0888 <metal_segment_heap_target_end+0x7ffef408>
20403692:	8ff9                	and	a5,a5,a4
20403694:	00f037b3          	snez	a5,a5
20403698:	0ff7f793          	andi	a5,a5,255
2040369c:	eb81                	bnez	a5,204036ac <__metal_valid_interrupt_id+0x48>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
    case METAL_INTERRUPT_ID_BEU:
        return 1;
    default:
        break;
2040369e:	a809                	j	204036b0 <__metal_valid_interrupt_id+0x4c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:347
    switch (id) {
204036a0:	fec42703          	lw	a4,-20(s0)
204036a4:	08000793          	li	a5,128
204036a8:	00f71463          	bne	a4,a5,204036b0 <__metal_valid_interrupt_id+0x4c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:368
        return 1;
204036ac:	4785                	li	a5,1
204036ae:	a019                	j	204036b4 <__metal_valid_interrupt_id+0x50>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:370
        break;
204036b0:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:373
    }

    return 0;
204036b2:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:374
}
204036b4:	853e                	mv	a0,a5
204036b6:	4472                	lw	s0,28(sp)
204036b8:	6105                	addi	sp,sp,32
204036ba:	8082                	ret

204036bc <__metal_local_interrupt_enable>:
__metal_local_interrupt_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:377

int __metal_local_interrupt_enable(struct metal_interrupt *controller,
                                   metal_interrupt_id_e id, int enable) {
204036bc:	7179                	addi	sp,sp,-48
204036be:	d606                	sw	ra,44(sp)
204036c0:	d422                	sw	s0,40(sp)
204036c2:	1800                	addi	s0,sp,48
204036c4:	fca42e23          	sw	a0,-36(s0)
204036c8:	fcb42c23          	sw	a1,-40(s0)
204036cc:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:378
    int rc = 0;
204036d0:	fe042623          	sw	zero,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:380

    if (!controller) {
204036d4:	fdc42783          	lw	a5,-36(s0)
204036d8:	e399                	bnez	a5,204036de <__metal_local_interrupt_enable+0x22>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:381
        return -1;
204036da:	57fd                	li	a5,-1
204036dc:	a849                	j	2040376e <__metal_local_interrupt_enable+0xb2>
204036de:	fd842703          	lw	a4,-40(s0)
204036e2:	47fd                	li	a5,31
204036e4:	08e7e063          	bltu	a5,a4,20403764 <__metal_local_interrupt_enable+0xa8>
204036e8:	fd842783          	lw	a5,-40(s0)
204036ec:	00279713          	slli	a4,a5,0x2
204036f0:	204007b7          	lui	a5,0x20400
204036f4:	6d478793          	addi	a5,a5,1748 # 204006d4 <__metal_driver_vtable_riscv_clint0+0x64>
204036f8:	97ba                	add	a5,a5,a4
204036fa:	439c                	lw	a5,0(a5)
204036fc:	8782                	jr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:386
    }

    switch (id) {
    case METAL_INTERRUPT_ID_BASE:
        if (enable) {
204036fe:	fd442783          	lw	a5,-44(s0)
20403702:	c781                	beqz	a5,2040370a <__metal_local_interrupt_enable+0x4e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:387
            __metal_interrupt_global_enable();
20403704:	f35fe0ef          	jal	ra,20402638 <__metal_interrupt_global_enable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:391
        } else {
            __metal_interrupt_global_disable();
        }
        break;
20403708:	a08d                	j	2040376a <__metal_local_interrupt_enable+0xae>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:389
            __metal_interrupt_global_disable();
2040370a:	f47fe0ef          	jal	ra,20402650 <__metal_interrupt_global_disable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:391
        break;
2040370e:	a8b1                	j	2040376a <__metal_local_interrupt_enable+0xae>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:393
    case METAL_INTERRUPT_ID_SW:
        if (enable) {
20403710:	fd442783          	lw	a5,-44(s0)
20403714:	c781                	beqz	a5,2040371c <__metal_local_interrupt_enable+0x60>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:394
            __metal_interrupt_software_enable();
20403716:	f53fe0ef          	jal	ra,20402668 <__metal_interrupt_software_enable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
        } else {
            __metal_interrupt_software_disable();
        }
        break;
2040371a:	a881                	j	2040376a <__metal_local_interrupt_enable+0xae>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:396
            __metal_interrupt_software_disable();
2040371c:	f65fe0ef          	jal	ra,20402680 <__metal_interrupt_software_disable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:398
        break;
20403720:	a0a9                	j	2040376a <__metal_local_interrupt_enable+0xae>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:400
    case METAL_INTERRUPT_ID_TMR:
        if (enable) {
20403722:	fd442783          	lw	a5,-44(s0)
20403726:	c781                	beqz	a5,2040372e <__metal_local_interrupt_enable+0x72>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:401
            __metal_interrupt_timer_enable();
20403728:	f71fe0ef          	jal	ra,20402698 <__metal_interrupt_timer_enable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:405
        } else {
            __metal_interrupt_timer_disable();
        }
        break;
2040372c:	a83d                	j	2040376a <__metal_local_interrupt_enable+0xae>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:403
            __metal_interrupt_timer_disable();
2040372e:	f85fe0ef          	jal	ra,204026b2 <__metal_interrupt_timer_disable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:405
        break;
20403732:	a825                	j	2040376a <__metal_local_interrupt_enable+0xae>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:407
    case METAL_INTERRUPT_ID_EXT:
        if (enable) {
20403734:	fd442783          	lw	a5,-44(s0)
20403738:	c781                	beqz	a5,20403740 <__metal_local_interrupt_enable+0x84>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:408
            __metal_interrupt_external_enable();
2040373a:	f93fe0ef          	jal	ra,204026cc <__metal_interrupt_external_enable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
        } else {
            __metal_interrupt_external_disable();
        }
        break;
2040373e:	a035                	j	2040376a <__metal_local_interrupt_enable+0xae>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:410
            __metal_interrupt_external_disable();
20403740:	fa9fe0ef          	jal	ra,204026e8 <__metal_interrupt_external_disable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:412
        break;
20403744:	a01d                	j	2040376a <__metal_local_interrupt_enable+0xae>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:429
    case METAL_INTERRUPT_ID_LC11:
    case METAL_INTERRUPT_ID_LC12:
    case METAL_INTERRUPT_ID_LC13:
    case METAL_INTERRUPT_ID_LC14:
    case METAL_INTERRUPT_ID_LC15:
        if (enable) {
20403746:	fd442783          	lw	a5,-44(s0)
2040374a:	c799                	beqz	a5,20403758 <__metal_local_interrupt_enable+0x9c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:430
            __metal_interrupt_local_enable(id);
2040374c:	fd842783          	lw	a5,-40(s0)
20403750:	853e                	mv	a0,a5
20403752:	fb3fe0ef          	jal	ra,20402704 <__metal_interrupt_local_enable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:434
        } else {
            __metal_interrupt_local_disable(id);
        }
        break;
20403756:	a811                	j	2040376a <__metal_local_interrupt_enable+0xae>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:432
            __metal_interrupt_local_disable(id);
20403758:	fd842783          	lw	a5,-40(s0)
2040375c:	853e                	mv	a0,a5
2040375e:	fd3fe0ef          	jal	ra,20402730 <__metal_interrupt_local_disable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:434
        break;
20403762:	a021                	j	2040376a <__metal_local_interrupt_enable+0xae>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:436
    default:
        rc = -1;
20403764:	57fd                	li	a5,-1
20403766:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:438
    }
    return rc;
2040376a:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:439
}
2040376e:	853e                	mv	a0,a5
20403770:	50b2                	lw	ra,44(sp)
20403772:	5422                	lw	s0,40(sp)
20403774:	6145                	addi	sp,sp,48
20403776:	8082                	ret

20403778 <__metal_exception_register>:
__metal_exception_register():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:442

int __metal_exception_register(struct metal_interrupt *controller, int ecode,
                               metal_exception_handler_t isr) {
20403778:	7179                	addi	sp,sp,-48
2040377a:	d622                	sw	s0,44(sp)
2040377c:	1800                	addi	s0,sp,48
2040377e:	fca42e23          	sw	a0,-36(s0)
20403782:	fcb42c23          	sw	a1,-40(s0)
20403786:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:443
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
2040378a:	fdc42783          	lw	a5,-36(s0)
2040378e:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:445

    if ((ecode < METAL_MAX_EXCEPTION_CODE) && isr) {
20403792:	fd842703          	lw	a4,-40(s0)
20403796:	47ad                	li	a5,11
20403798:	02e7c263          	blt	a5,a4,204037bc <__metal_exception_register+0x44>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:445 (discriminator 1)
2040379c:	fd442783          	lw	a5,-44(s0)
204037a0:	cf91                	beqz	a5,204037bc <__metal_exception_register+0x44>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:446
        intc->metal_exception_table[ecode] = isr;
204037a2:	fec42703          	lw	a4,-20(s0)
204037a6:	fd842783          	lw	a5,-40(s0)
204037aa:	0e878793          	addi	a5,a5,232
204037ae:	078a                	slli	a5,a5,0x2
204037b0:	97ba                	add	a5,a5,a4
204037b2:	fd442703          	lw	a4,-44(s0)
204037b6:	c398                	sw	a4,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:447
        return 0;
204037b8:	4781                	li	a5,0
204037ba:	a011                	j	204037be <__metal_exception_register+0x46>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:449
    }
    return -1;
204037bc:	57fd                	li	a5,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:450
}
204037be:	853e                	mv	a0,a5
204037c0:	5432                	lw	s0,44(sp)
204037c2:	6145                	addi	sp,sp,48
204037c4:	8082                	ret

204037c6 <__metal_driver_riscv_cpu_controller_interrupt_init>:
__metal_driver_riscv_cpu_controller_interrupt_init():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:454

extern void early_trap_vector(void);
void __metal_driver_riscv_cpu_controller_interrupt_init(
    struct metal_interrupt *controller) {
204037c6:	7179                	addi	sp,sp,-48
204037c8:	d606                	sw	ra,44(sp)
204037ca:	d422                	sw	s0,40(sp)
204037cc:	1800                	addi	s0,sp,48
204037ce:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:455
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204037d2:	fdc42783          	lw	a5,-36(s0)
204037d6:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:457

    if (!intc->init_done) {
204037da:	fe442783          	lw	a5,-28(s0)
204037de:	43dc                	lw	a5,4(a5)
204037e0:	efdd                	bnez	a5,2040389e <__metal_driver_riscv_cpu_controller_interrupt_init+0xd8>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459
        /* Default to use direct interrupt, setup sw cb table*/
        for (int i = 0; i < METAL_MAX_MI; i++) {
204037e2:	fe042623          	sw	zero,-20(s0)
204037e6:	a0b9                	j	20403834 <__metal_driver_riscv_cpu_controller_interrupt_init+0x6e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:460 (discriminator 3)
            intc->metal_int_table[i].handler = NULL;
204037e8:	fe442683          	lw	a3,-28(s0)
204037ec:	fec42703          	lw	a4,-20(s0)
204037f0:	87ba                	mv	a5,a4
204037f2:	0786                	slli	a5,a5,0x1
204037f4:	97ba                	add	a5,a5,a4
204037f6:	078e                	slli	a5,a5,0x3
204037f8:	97b6                	add	a5,a5,a3
204037fa:	0807a823          	sw	zero,144(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:461 (discriminator 3)
            intc->metal_int_table[i].sub_int = NULL;
204037fe:	fe442683          	lw	a3,-28(s0)
20403802:	fec42703          	lw	a4,-20(s0)
20403806:	87ba                	mv	a5,a4
20403808:	0786                	slli	a5,a5,0x1
2040380a:	97ba                	add	a5,a5,a4
2040380c:	078e                	slli	a5,a5,0x3
2040380e:	97b6                	add	a5,a5,a3
20403810:	0807aa23          	sw	zero,148(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:462 (discriminator 3)
            intc->metal_int_table[i].exint_data = NULL;
20403814:	fe442683          	lw	a3,-28(s0)
20403818:	fec42703          	lw	a4,-20(s0)
2040381c:	87ba                	mv	a5,a4
2040381e:	0786                	slli	a5,a5,0x1
20403820:	97ba                	add	a5,a5,a4
20403822:	078e                	slli	a5,a5,0x3
20403824:	97b6                	add	a5,a5,a3
20403826:	0807ac23          	sw	zero,152(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459 (discriminator 3)
        for (int i = 0; i < METAL_MAX_MI; i++) {
2040382a:	fec42783          	lw	a5,-20(s0)
2040382e:	0785                	addi	a5,a5,1
20403830:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:459 (discriminator 1)
20403834:	fec42703          	lw	a4,-20(s0)
20403838:	47fd                	li	a5,31
2040383a:	fae7d7e3          	bge	a5,a4,204037e8 <__metal_driver_riscv_cpu_controller_interrupt_init+0x22>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465
        }

        for (int i = 0; i < METAL_MAX_ME; i++) {
2040383e:	fe042423          	sw	zero,-24(s0)
20403842:	a01d                	j	20403868 <__metal_driver_riscv_cpu_controller_interrupt_init+0xa2>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:466 (discriminator 3)
            intc->metal_exception_table[i] = __metal_default_exception_handler;
20403844:	fe442703          	lw	a4,-28(s0)
20403848:	fe842783          	lw	a5,-24(s0)
2040384c:	0e878793          	addi	a5,a5,232
20403850:	078a                	slli	a5,a5,0x2
20403852:	97ba                	add	a5,a5,a4
20403854:	20402737          	lui	a4,0x20402
20403858:	75c70713          	addi	a4,a4,1884 # 2040275c <__metal_default_exception_handler>
2040385c:	c398                	sw	a4,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465 (discriminator 3)
        for (int i = 0; i < METAL_MAX_ME; i++) {
2040385e:	fe842783          	lw	a5,-24(s0)
20403862:	0785                	addi	a5,a5,1
20403864:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:465 (discriminator 1)
20403868:	fe842703          	lw	a4,-24(s0)
2040386c:	47ad                	li	a5,11
2040386e:	fce7dbe3          	bge	a5,a4,20403844 <__metal_driver_riscv_cpu_controller_interrupt_init+0x7e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:475
         * Set the real trap handler if the value of mtvec is equal to
         * early_trap_vector. If mtvec is not equal to early_trap_vector,
         * that means user has own trap handler, then we don't overwrite it.
         */
        uintptr_t mtvec;
        __asm__ volatile("csrr %0, mtvec" : "=r"(mtvec));
20403872:	305027f3          	csrr	a5,mtvec
20403876:	fef42023          	sw	a5,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:476
        if (mtvec == (uintptr_t)&early_trap_vector) {
2040387a:	204007b7          	lui	a5,0x20400
2040387e:	13478793          	addi	a5,a5,308 # 20400134 <early_trap_vector>
20403882:	fe042703          	lw	a4,-32(s0)
20403886:	00f71863          	bne	a4,a5,20403896 <__metal_driver_riscv_cpu_controller_interrupt_init+0xd0>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:477
            __metal_controller_interrupt_vector(
2040388a:	204037b7          	lui	a5,0x20403
2040388e:	a0078593          	addi	a1,a5,-1536 # 20402a00 <__metal_exception_handler>
20403892:	4501                	li	a0,0
20403894:	3b39                	jal	204035b2 <__metal_controller_interrupt_vector>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:481
                METAL_DIRECT_MODE,
                (void *)(uintptr_t)&__metal_exception_handler);
        }
        intc->init_done = 1;
20403896:	fe442783          	lw	a5,-28(s0)
2040389a:	4705                	li	a4,1
2040389c:	c3d8                	sw	a4,4(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:483
    }
}
2040389e:	0001                	nop
204038a0:	50b2                	lw	ra,44(sp)
204038a2:	5422                	lw	s0,40(sp)
204038a4:	6145                	addi	sp,sp,48
204038a6:	8082                	ret

204038a8 <__metal_driver_riscv_cpu_controller_interrupt_register>:
__metal_driver_riscv_cpu_controller_interrupt_register():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:487

int __metal_driver_riscv_cpu_controller_interrupt_register(
    struct metal_interrupt *controller, int id, metal_interrupt_handler_t isr,
    void *priv) {
204038a8:	7179                	addi	sp,sp,-48
204038aa:	d606                	sw	ra,44(sp)
204038ac:	d422                	sw	s0,40(sp)
204038ae:	1800                	addi	s0,sp,48
204038b0:	fca42e23          	sw	a0,-36(s0)
204038b4:	fcb42c23          	sw	a1,-40(s0)
204038b8:	fcc42a23          	sw	a2,-44(s0)
204038bc:	fcd42823          	sw	a3,-48(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:488
    int rc = 0;
204038c0:	fe042623          	sw	zero,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:489
    struct __metal_driver_riscv_cpu_intc *intc = (void *)(controller);
204038c4:	fdc42783          	lw	a5,-36(s0)
204038c8:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:491

    if (!__metal_valid_interrupt_id(id)) {
204038cc:	fd842503          	lw	a0,-40(s0)
204038d0:	3b51                	jal	20403664 <__metal_valid_interrupt_id>
204038d2:	87aa                	mv	a5,a0
204038d4:	e399                	bnez	a5,204038da <__metal_driver_riscv_cpu_controller_interrupt_register+0x32>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:492
        return -11;
204038d6:	57d5                	li	a5,-11
204038d8:	a25d                	j	20403a7e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d6>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:494
    }
    if ((id == METAL_INTERRUPT_ID_BEU) &&
204038da:	fd842703          	lw	a4,-40(s0)
204038de:	08000793          	li	a5,128
204038e2:	00f71763          	bne	a4,a5,204038f0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x48>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:495 (discriminator 1)
        (__metal_controller_interrupt_vector_mode() != METAL_DIRECT_MODE)) {
204038e6:	3995                	jal	2040355a <__metal_controller_interrupt_vector_mode>
204038e8:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:494 (discriminator 1)
    if ((id == METAL_INTERRUPT_ID_BEU) &&
204038ea:	c399                	beqz	a5,204038f0 <__metal_driver_riscv_cpu_controller_interrupt_register+0x48>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:498
        /* Only allow registration of the bus error unit interrupt if
         * interrupt vectoring if off */
        return -13;
204038ec:	57cd                	li	a5,-13
204038ee:	aa41                	j	20403a7e <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d6>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:501
    }

    if (isr) {
204038f0:	fd442783          	lw	a5,-44(s0)
204038f4:	cfb9                	beqz	a5,20403952 <__metal_driver_riscv_cpu_controller_interrupt_register+0xaa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:502
        if (id == METAL_INTERRUPT_ID_BEU) {
204038f6:	fd842703          	lw	a4,-40(s0)
204038fa:	08000793          	li	a5,128
204038fe:	00f71f63          	bne	a4,a5,2040391c <__metal_driver_riscv_cpu_controller_interrupt_register+0x74>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:503
            intc->metal_int_beu.handler = isr;
20403902:	fe842783          	lw	a5,-24(s0)
20403906:	fd442703          	lw	a4,-44(s0)
2040390a:	38e7a823          	sw	a4,912(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:504
            intc->metal_int_beu.exint_data = priv;
2040390e:	fe842783          	lw	a5,-24(s0)
20403912:	fd042703          	lw	a4,-48(s0)
20403916:	38e7ac23          	sw	a4,920(a5)
2040391a:	a285                	j	20403a7a <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:506
        } else {
            intc->metal_int_table[id].handler = isr;
2040391c:	fe842683          	lw	a3,-24(s0)
20403920:	fd842703          	lw	a4,-40(s0)
20403924:	87ba                	mv	a5,a4
20403926:	0786                	slli	a5,a5,0x1
20403928:	97ba                	add	a5,a5,a4
2040392a:	078e                	slli	a5,a5,0x3
2040392c:	97b6                	add	a5,a5,a3
2040392e:	fd442703          	lw	a4,-44(s0)
20403932:	08e7a823          	sw	a4,144(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:507
            intc->metal_int_table[id].exint_data = priv;
20403936:	fe842683          	lw	a3,-24(s0)
2040393a:	fd842703          	lw	a4,-40(s0)
2040393e:	87ba                	mv	a5,a4
20403940:	0786                	slli	a5,a5,0x1
20403942:	97ba                	add	a5,a5,a4
20403944:	078e                	slli	a5,a5,0x3
20403946:	97b6                	add	a5,a5,a3
20403948:	fd042703          	lw	a4,-48(s0)
2040394c:	08e7ac23          	sw	a4,152(a5)
20403950:	a22d                	j	20403a7a <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:510
        }
    } else {
        switch (id) {
20403952:	fd842703          	lw	a4,-40(s0)
20403956:	08000793          	li	a5,128
2040395a:	0cf70163          	beq	a4,a5,20403a1c <__metal_driver_riscv_cpu_controller_interrupt_register+0x174>
2040395e:	fd842703          	lw	a4,-40(s0)
20403962:	08000793          	li	a5,128
20403966:	10e7c763          	blt	a5,a4,20403a74 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1cc>
2040396a:	fd842703          	lw	a4,-40(s0)
2040396e:	47fd                	li	a5,31
20403970:	10e7c263          	blt	a5,a4,20403a74 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1cc>
20403974:	fd842703          	lw	a4,-40(s0)
20403978:	47c1                	li	a5,16
2040397a:	0cf75063          	bge	a4,a5,20403a3a <__metal_driver_riscv_cpu_controller_interrupt_register+0x192>
2040397e:	fd842703          	lw	a4,-40(s0)
20403982:	47ad                	li	a5,11
20403984:	0af70b63          	beq	a4,a5,20403a3a <__metal_driver_riscv_cpu_controller_interrupt_register+0x192>
20403988:	fd842703          	lw	a4,-40(s0)
2040398c:	47ad                	li	a5,11
2040398e:	0ee7c363          	blt	a5,a4,20403a74 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1cc>
20403992:	fd842703          	lw	a4,-40(s0)
20403996:	478d                	li	a5,3
20403998:	00f70863          	beq	a4,a5,204039a8 <__metal_driver_riscv_cpu_controller_interrupt_register+0x100>
2040399c:	fd842703          	lw	a4,-40(s0)
204039a0:	479d                	li	a5,7
204039a2:	04f70063          	beq	a4,a5,204039e2 <__metal_driver_riscv_cpu_controller_interrupt_register+0x13a>
204039a6:	a0f9                	j	20403a74 <__metal_driver_riscv_cpu_controller_interrupt_register+0x1cc>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:512
        case METAL_INTERRUPT_ID_SW:
            intc->metal_int_table[id].handler = __metal_default_sw_handler;
204039a8:	fe842683          	lw	a3,-24(s0)
204039ac:	fd842703          	lw	a4,-40(s0)
204039b0:	87ba                	mv	a5,a4
204039b2:	0786                	slli	a5,a5,0x1
204039b4:	97ba                	add	a5,a5,a4
204039b6:	078e                	slli	a5,a5,0x3
204039b8:	97b6                	add	a5,a5,a3
204039ba:	20403737          	lui	a4,0x20403
204039be:	84c70713          	addi	a4,a4,-1972 # 2040284c <__metal_default_sw_handler>
204039c2:	08e7a823          	sw	a4,144(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:513
            intc->metal_int_table[id].sub_int = priv;
204039c6:	fe842683          	lw	a3,-24(s0)
204039ca:	fd842703          	lw	a4,-40(s0)
204039ce:	87ba                	mv	a5,a4
204039d0:	0786                	slli	a5,a5,0x1
204039d2:	97ba                	add	a5,a5,a4
204039d4:	078e                	slli	a5,a5,0x3
204039d6:	97b6                	add	a5,a5,a3
204039d8:	fd042703          	lw	a4,-48(s0)
204039dc:	08e7aa23          	sw	a4,148(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:514
            break;
204039e0:	a869                	j	20403a7a <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:516
        case METAL_INTERRUPT_ID_TMR:
            intc->metal_int_table[id].handler = __metal_default_timer_handler;
204039e2:	fe842683          	lw	a3,-24(s0)
204039e6:	fd842703          	lw	a4,-40(s0)
204039ea:	87ba                	mv	a5,a4
204039ec:	0786                	slli	a5,a5,0x1
204039ee:	97ba                	add	a5,a5,a4
204039f0:	078e                	slli	a5,a5,0x3
204039f2:	97b6                	add	a5,a5,a3
204039f4:	20403737          	lui	a4,0x20403
204039f8:	95c70713          	addi	a4,a4,-1700 # 2040295c <__metal_default_timer_handler>
204039fc:	08e7a823          	sw	a4,144(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:517
            intc->metal_int_table[id].sub_int = priv;
20403a00:	fe842683          	lw	a3,-24(s0)
20403a04:	fd842703          	lw	a4,-40(s0)
20403a08:	87ba                	mv	a5,a4
20403a0a:	0786                	slli	a5,a5,0x1
20403a0c:	97ba                	add	a5,a5,a4
20403a0e:	078e                	slli	a5,a5,0x3
20403a10:	97b6                	add	a5,a5,a3
20403a12:	fd042703          	lw	a4,-48(s0)
20403a16:	08e7aa23          	sw	a4,148(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:518
            break;
20403a1a:	a085                	j	20403a7a <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:520
        case METAL_INTERRUPT_ID_BEU:
            intc->metal_int_beu.handler = __metal_default_beu_handler;
20403a1c:	fe842783          	lw	a5,-24(s0)
20403a20:	20403737          	lui	a4,0x20403
20403a24:	94670713          	addi	a4,a4,-1722 # 20402946 <__metal_default_beu_handler>
20403a28:	38e7a823          	sw	a4,912(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:521
            intc->metal_int_beu.exint_data = priv;
20403a2c:	fe842783          	lw	a5,-24(s0)
20403a30:	fd042703          	lw	a4,-48(s0)
20403a34:	38e7ac23          	sw	a4,920(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:522
            break;
20403a38:	a089                	j	20403a7a <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:540
        case METAL_INTERRUPT_ID_LC11:
        case METAL_INTERRUPT_ID_LC12:
        case METAL_INTERRUPT_ID_LC13:
        case METAL_INTERRUPT_ID_LC14:
        case METAL_INTERRUPT_ID_LC15:
            intc->metal_int_table[id].handler =
20403a3a:	fe842683          	lw	a3,-24(s0)
20403a3e:	fd842703          	lw	a4,-40(s0)
20403a42:	87ba                	mv	a5,a4
20403a44:	0786                	slli	a5,a5,0x1
20403a46:	97ba                	add	a5,a5,a4
20403a48:	078e                	slli	a5,a5,0x3
20403a4a:	97b6                	add	a5,a5,a3
20403a4c:	20402737          	lui	a4,0x20402
20403a50:	77470713          	addi	a4,a4,1908 # 20402774 <__metal_default_interrupt_handler>
20403a54:	08e7a823          	sw	a4,144(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:542
                __metal_default_interrupt_handler;
            intc->metal_int_table[id].sub_int = priv;
20403a58:	fe842683          	lw	a3,-24(s0)
20403a5c:	fd842703          	lw	a4,-40(s0)
20403a60:	87ba                	mv	a5,a4
20403a62:	0786                	slli	a5,a5,0x1
20403a64:	97ba                	add	a5,a5,a4
20403a66:	078e                	slli	a5,a5,0x3
20403a68:	97b6                	add	a5,a5,a3
20403a6a:	fd042703          	lw	a4,-48(s0)
20403a6e:	08e7aa23          	sw	a4,148(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:543
            break;
20403a72:	a021                	j	20403a7a <__metal_driver_riscv_cpu_controller_interrupt_register+0x1d2>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:545
        default:
            rc = -12;
20403a74:	57d1                	li	a5,-12
20403a76:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:548
        }
    }
    return rc;
20403a7a:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:549
}
20403a7e:	853e                	mv	a0,a5
20403a80:	50b2                	lw	ra,44(sp)
20403a82:	5422                	lw	s0,40(sp)
20403a84:	6145                	addi	sp,sp,48
20403a86:	8082                	ret

20403a88 <__metal_driver_riscv_cpu_controller_interrupt_enable>:
__metal_driver_riscv_cpu_controller_interrupt_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:552

int __metal_driver_riscv_cpu_controller_interrupt_enable(
    struct metal_interrupt *controller, int id) {
20403a88:	1101                	addi	sp,sp,-32
20403a8a:	ce06                	sw	ra,28(sp)
20403a8c:	cc22                	sw	s0,24(sp)
20403a8e:	1000                	addi	s0,sp,32
20403a90:	fea42623          	sw	a0,-20(s0)
20403a94:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:553
    return __metal_local_interrupt_enable(controller, id, METAL_ENABLE);
20403a98:	fe842783          	lw	a5,-24(s0)
20403a9c:	4605                	li	a2,1
20403a9e:	85be                	mv	a1,a5
20403aa0:	fec42503          	lw	a0,-20(s0)
20403aa4:	c19ff0ef          	jal	ra,204036bc <__metal_local_interrupt_enable>
20403aa8:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:554
}
20403aaa:	853e                	mv	a0,a5
20403aac:	40f2                	lw	ra,28(sp)
20403aae:	4462                	lw	s0,24(sp)
20403ab0:	6105                	addi	sp,sp,32
20403ab2:	8082                	ret

20403ab4 <__metal_driver_riscv_cpu_controller_interrupt_disable>:
__metal_driver_riscv_cpu_controller_interrupt_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:557

int __metal_driver_riscv_cpu_controller_interrupt_disable(
    struct metal_interrupt *controller, int id) {
20403ab4:	1101                	addi	sp,sp,-32
20403ab6:	ce06                	sw	ra,28(sp)
20403ab8:	cc22                	sw	s0,24(sp)
20403aba:	1000                	addi	s0,sp,32
20403abc:	fea42623          	sw	a0,-20(s0)
20403ac0:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:558
    return __metal_local_interrupt_enable(controller, id, METAL_DISABLE);
20403ac4:	fe842783          	lw	a5,-24(s0)
20403ac8:	4601                	li	a2,0
20403aca:	85be                	mv	a1,a5
20403acc:	fec42503          	lw	a0,-20(s0)
20403ad0:	bedff0ef          	jal	ra,204036bc <__metal_local_interrupt_enable>
20403ad4:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:559
}
20403ad6:	853e                	mv	a0,a5
20403ad8:	40f2                	lw	ra,28(sp)
20403ada:	4462                	lw	s0,24(sp)
20403adc:	6105                	addi	sp,sp,32
20403ade:	8082                	ret

20403ae0 <__metal_driver_riscv_cpu_controller_get_vector_mode>:
__metal_driver_riscv_cpu_controller_get_vector_mode():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:591
    }
    return -1;
}

metal_vector_mode __metal_driver_riscv_cpu_controller_get_vector_mode(
    struct metal_interrupt *controller) {
20403ae0:	1101                	addi	sp,sp,-32
20403ae2:	ce06                	sw	ra,28(sp)
20403ae4:	cc22                	sw	s0,24(sp)
20403ae6:	1000                	addi	s0,sp,32
20403ae8:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:592
    return __metal_controller_interrupt_vector_mode();
20403aec:	a6fff0ef          	jal	ra,2040355a <__metal_controller_interrupt_vector_mode>
20403af0:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:593
}
20403af2:	853e                	mv	a0,a5
20403af4:	40f2                	lw	ra,28(sp)
20403af6:	4462                	lw	s0,24(sp)
20403af8:	6105                	addi	sp,sp,32
20403afa:	8082                	ret

20403afc <__metal_driver_riscv_cpu_controller_set_vector_mode>:
__metal_driver_riscv_cpu_controller_set_vector_mode():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:596

int __metal_driver_riscv_cpu_controller_set_vector_mode(
    struct metal_interrupt *controller, metal_vector_mode mode) {
20403afc:	1101                	addi	sp,sp,-32
20403afe:	ce06                	sw	ra,28(sp)
20403b00:	cc22                	sw	s0,24(sp)
20403b02:	1000                	addi	s0,sp,32
20403b04:	fea42623          	sw	a0,-20(s0)
20403b08:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:598

    if (mode == METAL_DIRECT_MODE) {
20403b0c:	fe842783          	lw	a5,-24(s0)
20403b10:	eb99                	bnez	a5,20403b26 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x2a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:599
        __metal_controller_interrupt_vector(
20403b12:	204037b7          	lui	a5,0x20403
20403b16:	a0078593          	addi	a1,a5,-1536 # 20402a00 <__metal_exception_handler>
20403b1a:	fe842503          	lw	a0,-24(s0)
20403b1e:	a95ff0ef          	jal	ra,204035b2 <__metal_controller_interrupt_vector>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:601
            mode, (void *)(uintptr_t)&__metal_exception_handler);
        return 0;
20403b22:	4781                	li	a5,0
20403b24:	a00d                	j	20403b46 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x4a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:603
    }
    if (mode == METAL_VECTOR_MODE) {
20403b26:	fe842703          	lw	a4,-24(s0)
20403b2a:	4785                	li	a5,1
20403b2c:	00f71c63          	bne	a4,a5,20403b44 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x48>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:604
        __metal_controller_interrupt_vector(
20403b30:	204067b7          	lui	a5,0x20406
20403b34:	88078593          	addi	a1,a5,-1920 # 20405880 <__metal_vector_table>
20403b38:	fe842503          	lw	a0,-24(s0)
20403b3c:	a77ff0ef          	jal	ra,204035b2 <__metal_controller_interrupt_vector>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:606
            mode, (void *)(uintptr_t)__metal_vector_table);
        return 0;
20403b40:	4781                	li	a5,0
20403b42:	a011                	j	20403b46 <__metal_driver_riscv_cpu_controller_set_vector_mode+0x4a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:608
    }
    return -1;
20403b44:	57fd                	li	a5,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:609
}
20403b46:	853e                	mv	a0,a5
20403b48:	40f2                	lw	ra,28(sp)
20403b4a:	4462                	lw	s0,24(sp)
20403b4c:	6105                	addi	sp,sp,32
20403b4e:	8082                	ret

20403b50 <__metal_driver_riscv_cpu_controller_command_request>:
__metal_driver_riscv_cpu_controller_command_request():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:612

int __metal_driver_riscv_cpu_controller_command_request(
    struct metal_interrupt *controller, int cmd, void *data) {
20403b50:	1101                	addi	sp,sp,-32
20403b52:	ce22                	sw	s0,28(sp)
20403b54:	1000                	addi	s0,sp,32
20403b56:	fea42623          	sw	a0,-20(s0)
20403b5a:	feb42423          	sw	a1,-24(s0)
20403b5e:	fec42223          	sw	a2,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:615
    /* NOP for now, unless local interrupt lines the like of clic, clint, plic
     */
    return 0;
20403b62:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:616
}
20403b64:	853e                	mv	a0,a5
20403b66:	4472                	lw	s0,28(sp)
20403b68:	6105                	addi	sp,sp,32
20403b6a:	8082                	ret

20403b6c <__metal_driver_cpu_mcycle_get>:
__metal_driver_cpu_mcycle_get():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:620

/* CPU driver !!! */

unsigned long long __metal_driver_cpu_mcycle_get(struct metal_cpu *cpu) {
20403b6c:	7139                	addi	sp,sp,-64
20403b6e:	de22                	sw	s0,60(sp)
20403b70:	0080                	addi	s0,sp,64
20403b72:	fca42623          	sw	a0,-52(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:621
    unsigned long long val = 0;
20403b76:	4501                	li	a0,0
20403b78:	4581                	li	a1,0
20403b7a:	fea42423          	sw	a0,-24(s0)
20403b7e:	feb42623          	sw	a1,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:627 (discriminator 1)

#if __riscv_xlen == 32
    unsigned long hi, hi1, lo;

    do {
        __asm__ volatile("csrr %0, mcycleh" : "=r"(hi));
20403b82:	b80025f3          	csrr	a1,mcycleh
20403b86:	feb42223          	sw	a1,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:628 (discriminator 1)
        __asm__ volatile("csrr %0, mcycle" : "=r"(lo));
20403b8a:	b00025f3          	csrr	a1,mcycle
20403b8e:	feb42023          	sw	a1,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:629 (discriminator 1)
        __asm__ volatile("csrr %0, mcycleh" : "=r"(hi1));
20403b92:	b80025f3          	csrr	a1,mcycleh
20403b96:	fcb42e23          	sw	a1,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:632 (discriminator 1)
        /* hi != hi1 means mcycle overflow during we get value,
         * so we must retry. */
    } while (hi != hi1);
20403b9a:	fe442503          	lw	a0,-28(s0)
20403b9e:	fdc42583          	lw	a1,-36(s0)
20403ba2:	feb510e3          	bne	a0,a1,20403b82 <__metal_driver_cpu_mcycle_get+0x16>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:634

    val = ((unsigned long long)hi << 32) | lo;
20403ba6:	fe442583          	lw	a1,-28(s0)
20403baa:	882e                	mv	a6,a1
20403bac:	4881                	li	a7,0
20403bae:	00081793          	slli	a5,a6,0x0
20403bb2:	4701                	li	a4,0
20403bb4:	fe042583          	lw	a1,-32(s0)
20403bb8:	862e                	mv	a2,a1
20403bba:	4681                	li	a3,0
20403bbc:	00c765b3          	or	a1,a4,a2
20403bc0:	feb42423          	sw	a1,-24(s0)
20403bc4:	8fd5                	or	a5,a5,a3
20403bc6:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:639
#else
    __asm__ volatile("csrr %0, mcycle" : "=r"(val));
#endif

    return val;
20403bca:	fe842703          	lw	a4,-24(s0)
20403bce:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:640
}
20403bd2:	853a                	mv	a0,a4
20403bd4:	85be                	mv	a1,a5
20403bd6:	5472                	lw	s0,60(sp)
20403bd8:	6121                	addi	sp,sp,64
20403bda:	8082                	ret

20403bdc <__metal_driver_cpu_timebase_get>:
__metal_driver_cpu_timebase_get():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:642

unsigned long long __metal_driver_cpu_timebase_get(struct metal_cpu *cpu) {
20403bdc:	7179                	addi	sp,sp,-48
20403bde:	d606                	sw	ra,44(sp)
20403be0:	d422                	sw	s0,40(sp)
20403be2:	d24a                	sw	s2,36(sp)
20403be4:	d04e                	sw	s3,32(sp)
20403be6:	1800                	addi	s0,sp,48
20403be8:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:644
    int timebase;
    if (!cpu) {
20403bec:	fdc42783          	lw	a5,-36(s0)
20403bf0:	e781                	bnez	a5,20403bf8 <__metal_driver_cpu_timebase_get+0x1c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:645
        return 0;
20403bf2:	4901                	li	s2,0
20403bf4:	4981                	li	s3,0
20403bf6:	a821                	j	20403c0e <__metal_driver_cpu_timebase_get+0x32>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:648
    }

    timebase = __metal_driver_cpu_timebase((struct metal_cpu *)cpu);
20403bf8:	fdc42503          	lw	a0,-36(s0)
20403bfc:	97bfe0ef          	jal	ra,20402576 <__metal_driver_cpu_timebase>
20403c00:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:649
    return timebase;
20403c04:	fec42783          	lw	a5,-20(s0)
20403c08:	893e                	mv	s2,a5
20403c0a:	87fd                	srai	a5,a5,0x1f
20403c0c:	89be                	mv	s3,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:650
}
20403c0e:	874a                	mv	a4,s2
20403c10:	87ce                	mv	a5,s3
20403c12:	853a                	mv	a0,a4
20403c14:	85be                	mv	a1,a5
20403c16:	50b2                	lw	ra,44(sp)
20403c18:	5422                	lw	s0,40(sp)
20403c1a:	5912                	lw	s2,36(sp)
20403c1c:	5982                	lw	s3,32(sp)
20403c1e:	6145                	addi	sp,sp,48
20403c20:	8082                	ret

20403c22 <__metal_driver_cpu_mtime_get>:
__metal_driver_cpu_mtime_get():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:652

unsigned long long __metal_driver_cpu_mtime_get(struct metal_cpu *cpu) {
20403c22:	7179                	addi	sp,sp,-48
20403c24:	d606                	sw	ra,44(sp)
20403c26:	d422                	sw	s0,40(sp)
20403c28:	1800                	addi	s0,sp,48
20403c2a:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:653
    unsigned long long time = 0;
20403c2e:	4781                	li	a5,0
20403c30:	4801                	li	a6,0
20403c32:	fef42023          	sw	a5,-32(s0)
20403c36:	ff042223          	sw	a6,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:657
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
20403c3a:	fdc42503          	lw	a0,-36(s0)
20403c3e:	963fe0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20403c42:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:659

    if (intc) {
20403c46:	fec42783          	lw	a5,-20(s0)
20403c4a:	c78d                	beqz	a5,20403c74 <__metal_driver_cpu_mtime_get+0x52>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:660
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403c4c:	fec42783          	lw	a5,-20(s0)
20403c50:	13c7a783          	lw	a5,316(a5)
20403c54:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:661
        if (tmr_intc) {
20403c58:	fe842783          	lw	a5,-24(s0)
20403c5c:	cf81                	beqz	a5,20403c74 <__metal_driver_cpu_mtime_get+0x52>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:662
            tmr_intc->vtable->command_request(tmr_intc, METAL_TIMER_MTIME_GET,
20403c5e:	fe842783          	lw	a5,-24(s0)
20403c62:	439c                	lw	a5,0(a5)
20403c64:	47f8                	lw	a4,76(a5)
20403c66:	fe040793          	addi	a5,s0,-32
20403c6a:	863e                	mv	a2,a5
20403c6c:	4585                	li	a1,1
20403c6e:	fe842503          	lw	a0,-24(s0)
20403c72:	9702                	jalr	a4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:666
                                              &time);
        }
    }
    return time;
20403c74:	fe042703          	lw	a4,-32(s0)
20403c78:	fe442783          	lw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:667
}
20403c7c:	853a                	mv	a0,a4
20403c7e:	85be                	mv	a1,a5
20403c80:	50b2                	lw	ra,44(sp)
20403c82:	5422                	lw	s0,40(sp)
20403c84:	6145                	addi	sp,sp,48
20403c86:	8082                	ret

20403c88 <__metal_driver_cpu_mtimecmp_set>:
__metal_driver_cpu_mtimecmp_set():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:670

int __metal_driver_cpu_mtimecmp_set(struct metal_cpu *cpu,
                                    unsigned long long time) {
20403c88:	7179                	addi	sp,sp,-48
20403c8a:	d606                	sw	ra,44(sp)
20403c8c:	d422                	sw	s0,40(sp)
20403c8e:	d226                	sw	s1,36(sp)
20403c90:	1800                	addi	s0,sp,48
20403c92:	fca42e23          	sw	a0,-36(s0)
20403c96:	fcb42823          	sw	a1,-48(s0)
20403c9a:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:671
    int rc = -1;
20403c9e:	57fd                	li	a5,-1
20403ca0:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:675
    struct metal_interrupt *tmr_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
20403ca4:	fdc42503          	lw	a0,-36(s0)
20403ca8:	8f9fe0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20403cac:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:677

    if (intc) {
20403cb0:	fe842783          	lw	a5,-24(s0)
20403cb4:	cf8d                	beqz	a5,20403cee <__metal_driver_cpu_mtimecmp_set+0x66>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:678
        tmr_intc = intc->metal_int_table[METAL_INTERRUPT_ID_TMR].sub_int;
20403cb6:	fe842783          	lw	a5,-24(s0)
20403cba:	13c7a783          	lw	a5,316(a5)
20403cbe:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:679
        if (tmr_intc) {
20403cc2:	fe442783          	lw	a5,-28(s0)
20403cc6:	c785                	beqz	a5,20403cee <__metal_driver_cpu_mtimecmp_set+0x66>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:680
            rc = tmr_intc->vtable->mtimecmp_set(
20403cc8:	fe442783          	lw	a5,-28(s0)
20403ccc:	439c                	lw	a5,0(a5)
20403cce:	4ba4                	lw	s1,80(a5)
20403cd0:	fdc42503          	lw	a0,-36(s0)
20403cd4:	87ffe0ef          	jal	ra,20402552 <__metal_driver_cpu_hartid>
20403cd8:	87aa                	mv	a5,a0
20403cda:	fd042603          	lw	a2,-48(s0)
20403cde:	fd442683          	lw	a3,-44(s0)
20403ce2:	85be                	mv	a1,a5
20403ce4:	fe442503          	lw	a0,-28(s0)
20403ce8:	9482                	jalr	s1
20403cea:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:684
                tmr_intc, __metal_driver_cpu_hartid(cpu), time);
        }
    }
    return rc;
20403cee:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:685
}
20403cf2:	853e                	mv	a0,a5
20403cf4:	50b2                	lw	ra,44(sp)
20403cf6:	5422                	lw	s0,40(sp)
20403cf8:	5492                	lw	s1,36(sp)
20403cfa:	6145                	addi	sp,sp,48
20403cfc:	8082                	ret

20403cfe <__metal_driver_cpu_timer_controller_interrupt>:
__metal_driver_cpu_timer_controller_interrupt():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:688

struct metal_interrupt *
__metal_driver_cpu_timer_controller_interrupt(struct metal_cpu *cpu) {
20403cfe:	1101                	addi	sp,sp,-32
20403d00:	ce22                	sw	s0,28(sp)
20403d02:	1000                	addi	s0,sp,32
20403d04:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:690
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403d08:	81018793          	addi	a5,gp,-2032 # 80000770 <__metal_dt_clint_2000000>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:699
#else
#pragma message("There is no interrupt controller for Timer interrupt")
    return NULL;
#endif
#endif
}
20403d0c:	853e                	mv	a0,a5
20403d0e:	4472                	lw	s0,28(sp)
20403d10:	6105                	addi	sp,sp,32
20403d12:	8082                	ret

20403d14 <__metal_driver_cpu_get_timer_interrupt_id>:
__metal_driver_cpu_get_timer_interrupt_id():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:701

int __metal_driver_cpu_get_timer_interrupt_id(struct metal_cpu *cpu) {
20403d14:	1101                	addi	sp,sp,-32
20403d16:	ce22                	sw	s0,28(sp)
20403d18:	1000                	addi	s0,sp,32
20403d1a:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:702
    return METAL_INTERRUPT_ID_TMR;
20403d1e:	479d                	li	a5,7
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:703
}
20403d20:	853e                	mv	a0,a5
20403d22:	4472                	lw	s0,28(sp)
20403d24:	6105                	addi	sp,sp,32
20403d26:	8082                	ret

20403d28 <__metal_driver_cpu_sw_controller_interrupt>:
__metal_driver_cpu_sw_controller_interrupt():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:706

struct metal_interrupt *
__metal_driver_cpu_sw_controller_interrupt(struct metal_cpu *cpu) {
20403d28:	1101                	addi	sp,sp,-32
20403d2a:	ce22                	sw	s0,28(sp)
20403d2c:	1000                	addi	s0,sp,32
20403d2e:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:708
#ifdef __METAL_DT_RISCV_CLINT0_HANDLE
    return __METAL_DT_RISCV_CLINT0_HANDLE;
20403d32:	81018793          	addi	a5,gp,-2032 # 80000770 <__metal_dt_clint_2000000>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:717
#else
#pragma message("There is no interrupt controller for Software interrupt")
    return NULL;
#endif
#endif
}
20403d36:	853e                	mv	a0,a5
20403d38:	4472                	lw	s0,28(sp)
20403d3a:	6105                	addi	sp,sp,32
20403d3c:	8082                	ret

20403d3e <__metal_driver_cpu_get_sw_interrupt_id>:
__metal_driver_cpu_get_sw_interrupt_id():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:719

int __metal_driver_cpu_get_sw_interrupt_id(struct metal_cpu *cpu) {
20403d3e:	1101                	addi	sp,sp,-32
20403d40:	ce22                	sw	s0,28(sp)
20403d42:	1000                	addi	s0,sp,32
20403d44:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:720
    return METAL_INTERRUPT_ID_SW;
20403d48:	478d                	li	a5,3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:721
}
20403d4a:	853e                	mv	a0,a5
20403d4c:	4472                	lw	s0,28(sp)
20403d4e:	6105                	addi	sp,sp,32
20403d50:	8082                	ret

20403d52 <__metal_driver_cpu_set_sw_ipi>:
__metal_driver_cpu_set_sw_ipi():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:723

int __metal_driver_cpu_set_sw_ipi(struct metal_cpu *cpu, int hartid) {
20403d52:	7179                	addi	sp,sp,-48
20403d54:	d606                	sw	ra,44(sp)
20403d56:	d422                	sw	s0,40(sp)
20403d58:	1800                	addi	s0,sp,48
20403d5a:	fca42e23          	sw	a0,-36(s0)
20403d5e:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:724
    int rc = -1;
20403d62:	57fd                	li	a5,-1
20403d64:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:728
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
20403d68:	fdc42503          	lw	a0,-36(s0)
20403d6c:	835fe0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20403d70:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:730

    if (intc) {
20403d74:	fe842783          	lw	a5,-24(s0)
20403d78:	c79d                	beqz	a5,20403da6 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:731
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403d7a:	fe842783          	lw	a5,-24(s0)
20403d7e:	0dc7a783          	lw	a5,220(a5)
20403d82:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:732
        if (sw_intc) {
20403d86:	fe442783          	lw	a5,-28(s0)
20403d8a:	cf91                	beqz	a5,20403da6 <__metal_driver_cpu_set_sw_ipi+0x54>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:733
            rc = sw_intc->vtable->command_request(
20403d8c:	fe442783          	lw	a5,-28(s0)
20403d90:	439c                	lw	a5,0(a5)
20403d92:	47f8                	lw	a4,76(a5)
20403d94:	fd840793          	addi	a5,s0,-40
20403d98:	863e                	mv	a2,a5
20403d9a:	458d                	li	a1,3
20403d9c:	fe442503          	lw	a0,-28(s0)
20403da0:	9702                	jalr	a4
20403da2:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:737
                sw_intc, METAL_SOFTWARE_IPI_SET, &hartid);
        }
    }
    return rc;
20403da6:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:738
}
20403daa:	853e                	mv	a0,a5
20403dac:	50b2                	lw	ra,44(sp)
20403dae:	5422                	lw	s0,40(sp)
20403db0:	6145                	addi	sp,sp,48
20403db2:	8082                	ret

20403db4 <__metal_driver_cpu_clear_sw_ipi>:
__metal_driver_cpu_clear_sw_ipi():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:740

int __metal_driver_cpu_clear_sw_ipi(struct metal_cpu *cpu, int hartid) {
20403db4:	7179                	addi	sp,sp,-48
20403db6:	d606                	sw	ra,44(sp)
20403db8:	d422                	sw	s0,40(sp)
20403dba:	1800                	addi	s0,sp,48
20403dbc:	fca42e23          	sw	a0,-36(s0)
20403dc0:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:741
    int rc = -1;
20403dc4:	57fd                	li	a5,-1
20403dc6:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:745
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
20403dca:	fdc42503          	lw	a0,-36(s0)
20403dce:	fd2fe0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20403dd2:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:747

    if (intc) {
20403dd6:	fe842783          	lw	a5,-24(s0)
20403dda:	c79d                	beqz	a5,20403e08 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:748
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403ddc:	fe842783          	lw	a5,-24(s0)
20403de0:	0dc7a783          	lw	a5,220(a5)
20403de4:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:749
        if (sw_intc) {
20403de8:	fe442783          	lw	a5,-28(s0)
20403dec:	cf91                	beqz	a5,20403e08 <__metal_driver_cpu_clear_sw_ipi+0x54>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:750
            rc = sw_intc->vtable->command_request(
20403dee:	fe442783          	lw	a5,-28(s0)
20403df2:	439c                	lw	a5,0(a5)
20403df4:	47f8                	lw	a4,76(a5)
20403df6:	fd840793          	addi	a5,s0,-40
20403dfa:	863e                	mv	a2,a5
20403dfc:	4589                	li	a1,2
20403dfe:	fe442503          	lw	a0,-28(s0)
20403e02:	9702                	jalr	a4
20403e04:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:754
                sw_intc, METAL_SOFTWARE_IPI_CLEAR, &hartid);
        }
    }
    return rc;
20403e08:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:755
}
20403e0c:	853e                	mv	a0,a5
20403e0e:	50b2                	lw	ra,44(sp)
20403e10:	5422                	lw	s0,40(sp)
20403e12:	6145                	addi	sp,sp,48
20403e14:	8082                	ret

20403e16 <__metal_driver_cpu_get_msip>:
__metal_driver_cpu_get_msip():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:757

int __metal_driver_cpu_get_msip(struct metal_cpu *cpu, int hartid) {
20403e16:	7179                	addi	sp,sp,-48
20403e18:	d606                	sw	ra,44(sp)
20403e1a:	d422                	sw	s0,40(sp)
20403e1c:	1800                	addi	s0,sp,48
20403e1e:	fca42e23          	sw	a0,-36(s0)
20403e22:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:758
    int rc = 0;
20403e26:	fe042623          	sw	zero,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:762
    struct metal_interrupt *sw_intc;
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
20403e2a:	fdc42503          	lw	a0,-36(s0)
20403e2e:	f72fe0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20403e32:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:764

    if (intc) {
20403e36:	fe842783          	lw	a5,-24(s0)
20403e3a:	c79d                	beqz	a5,20403e68 <__metal_driver_cpu_get_msip+0x52>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:765
        sw_intc = intc->metal_int_table[METAL_INTERRUPT_ID_SW].sub_int;
20403e3c:	fe842783          	lw	a5,-24(s0)
20403e40:	0dc7a783          	lw	a5,220(a5)
20403e44:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:766
        if (sw_intc) {
20403e48:	fe442783          	lw	a5,-28(s0)
20403e4c:	cf91                	beqz	a5,20403e68 <__metal_driver_cpu_get_msip+0x52>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:767
            rc = sw_intc->vtable->command_request(
20403e4e:	fe442783          	lw	a5,-28(s0)
20403e52:	439c                	lw	a5,0(a5)
20403e54:	47f8                	lw	a4,76(a5)
20403e56:	fd840793          	addi	a5,s0,-40
20403e5a:	863e                	mv	a2,a5
20403e5c:	4591                	li	a1,4
20403e5e:	fe442503          	lw	a0,-28(s0)
20403e62:	9702                	jalr	a4
20403e64:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:771
                sw_intc, METAL_SOFTWARE_MSIP_GET, &hartid);
        }
    }
    return rc;
20403e68:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:772
}
20403e6c:	853e                	mv	a0,a5
20403e6e:	50b2                	lw	ra,44(sp)
20403e70:	5422                	lw	s0,40(sp)
20403e72:	6145                	addi	sp,sp,48
20403e74:	8082                	ret

20403e76 <__metal_driver_cpu_controller_interrupt>:
__metal_driver_cpu_controller_interrupt():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:775

struct metal_interrupt *
__metal_driver_cpu_controller_interrupt(struct metal_cpu *cpu) {
20403e76:	1101                	addi	sp,sp,-32
20403e78:	ce06                	sw	ra,28(sp)
20403e7a:	cc22                	sw	s0,24(sp)
20403e7c:	1000                	addi	s0,sp,32
20403e7e:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:776
    return __metal_driver_cpu_interrupt_controller(cpu);
20403e82:	fec42503          	lw	a0,-20(s0)
20403e86:	f1afe0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20403e8a:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:777
}
20403e8c:	853e                	mv	a0,a5
20403e8e:	40f2                	lw	ra,28(sp)
20403e90:	4462                	lw	s0,24(sp)
20403e92:	6105                	addi	sp,sp,32
20403e94:	8082                	ret

20403e96 <__metal_driver_cpu_exception_register>:
__metal_driver_cpu_exception_register():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:798
    }
    return -1;
}

int __metal_driver_cpu_exception_register(struct metal_cpu *cpu, int ecode,
                                          metal_exception_handler_t isr) {
20403e96:	7179                	addi	sp,sp,-48
20403e98:	d606                	sw	ra,44(sp)
20403e9a:	d422                	sw	s0,40(sp)
20403e9c:	1800                	addi	s0,sp,48
20403e9e:	fca42e23          	sw	a0,-36(s0)
20403ea2:	fcb42c23          	sw	a1,-40(s0)
20403ea6:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:801
    struct __metal_driver_riscv_cpu_intc *intc =
        (struct __metal_driver_riscv_cpu_intc *)
            __metal_driver_cpu_interrupt_controller(cpu);
20403eaa:	fdc42503          	lw	a0,-36(s0)
20403eae:	ef2fe0ef          	jal	ra,204025a0 <__metal_driver_cpu_interrupt_controller>
20403eb2:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:803

    if (intc) {
20403eb6:	fec42783          	lw	a5,-20(s0)
20403eba:	cb99                	beqz	a5,20403ed0 <__metal_driver_cpu_exception_register+0x3a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:804
        return __metal_exception_register((struct metal_interrupt *)intc, ecode,
20403ebc:	fd442603          	lw	a2,-44(s0)
20403ec0:	fd842583          	lw	a1,-40(s0)
20403ec4:	fec42503          	lw	a0,-20(s0)
20403ec8:	8b1ff0ef          	jal	ra,20403778 <__metal_exception_register>
20403ecc:	87aa                	mv	a5,a0
20403ece:	a011                	j	20403ed2 <__metal_driver_cpu_exception_register+0x3c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:807
                                          isr);
    }
    return -1;
20403ed0:	57fd                	li	a5,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:808
}
20403ed2:	853e                	mv	a0,a5
20403ed4:	50b2                	lw	ra,44(sp)
20403ed6:	5422                	lw	s0,40(sp)
20403ed8:	6145                	addi	sp,sp,48
20403eda:	8082                	ret

20403edc <__metal_driver_cpu_get_instruction_length>:
__metal_driver_cpu_get_instruction_length():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:811

int __metal_driver_cpu_get_instruction_length(struct metal_cpu *cpu,
                                              uintptr_t epc) {
20403edc:	1101                	addi	sp,sp,-32
20403ede:	ce22                	sw	s0,28(sp)
20403ee0:	1000                	addi	s0,sp,32
20403ee2:	fea42623          	sw	a0,-20(s0)
20403ee6:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:817
    /**
     * Per ISA compressed instruction has last two bits of opcode set.
     * The encoding '00' '01' '10' are used for compressed instruction.
     * Only enconding '11' isn't regarded as compressed instruction (>16b).
     */
    return ((*(unsigned short *)epc & METAL_INSN_LENGTH_MASK) ==
20403eea:	fe842783          	lw	a5,-24(s0)
20403eee:	0007d783          	lhu	a5,0(a5)
20403ef2:	0037f713          	andi	a4,a5,3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:820
            METAL_INSN_NOT_COMPRESSED)
               ? 4
               : 2;
20403ef6:	478d                	li	a5,3
20403ef8:	00f71463          	bne	a4,a5,20403f00 <__metal_driver_cpu_get_instruction_length+0x24>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:820 (discriminator 1)
20403efc:	4791                	li	a5,4
20403efe:	a011                	j	20403f02 <__metal_driver_cpu_get_instruction_length+0x26>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:820 (discriminator 2)
20403f00:	4789                	li	a5,2
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:821 (discriminator 5)
}
20403f02:	853e                	mv	a0,a5
20403f04:	4472                	lw	s0,28(sp)
20403f06:	6105                	addi	sp,sp,32
20403f08:	8082                	ret

20403f0a <__metal_driver_cpu_get_exception_pc>:
__metal_driver_cpu_get_exception_pc():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:823

uintptr_t __metal_driver_cpu_get_exception_pc(struct metal_cpu *cpu) {
20403f0a:	7179                	addi	sp,sp,-48
20403f0c:	d622                	sw	s0,44(sp)
20403f0e:	1800                	addi	s0,sp,48
20403f10:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:825
    uintptr_t mepc;
    __asm__ volatile("csrr %0, mepc" : "=r"(mepc));
20403f14:	341027f3          	csrr	a5,mepc
20403f18:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:826
    return mepc;
20403f1c:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:827
}
20403f20:	853e                	mv	a0,a5
20403f22:	5432                	lw	s0,44(sp)
20403f24:	6145                	addi	sp,sp,48
20403f26:	8082                	ret

20403f28 <__metal_driver_cpu_set_exception_pc>:
__metal_driver_cpu_set_exception_pc():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:829

int __metal_driver_cpu_set_exception_pc(struct metal_cpu *cpu, uintptr_t mepc) {
20403f28:	1101                	addi	sp,sp,-32
20403f2a:	ce22                	sw	s0,28(sp)
20403f2c:	1000                	addi	s0,sp,32
20403f2e:	fea42623          	sw	a0,-20(s0)
20403f32:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:830
    __asm__ volatile("csrw mepc, %0" ::"r"(mepc));
20403f36:	fe842783          	lw	a5,-24(s0)
20403f3a:	34179073          	csrw	mepc,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:831
    return 0;
20403f3e:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:832
}
20403f40:	853e                	mv	a0,a5
20403f42:	4472                	lw	s0,28(sp)
20403f44:	6105                	addi	sp,sp,32
20403f46:	8082                	ret

20403f48 <__metal_driver_cpu_get_buserror>:
__metal_driver_cpu_get_buserror():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:834

struct metal_buserror *__metal_driver_cpu_get_buserror(struct metal_cpu *cpu) {
20403f48:	1101                	addi	sp,sp,-32
20403f4a:	ce06                	sw	ra,28(sp)
20403f4c:	cc22                	sw	s0,24(sp)
20403f4e:	1000                	addi	s0,sp,32
20403f50:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:835
    return __metal_driver_cpu_buserror(cpu);
20403f54:	fec42503          	lw	a0,-20(s0)
20403f58:	e72fe0ef          	jal	ra,204025ca <__metal_driver_cpu_buserror>
20403f5c:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_cpu.c:836
}
20403f5e:	853e                	mv	a0,a5
20403f60:	40f2                	lw	ra,28(sp)
20403f62:	4462                	lw	s0,24(sp)
20403f64:	6105                	addi	sp,sp,32
20403f66:	8082                	ret

20403f68 <__metal_driver_sifive_plic0_control_base>:
__metal_driver_sifive_plic0_control_base():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:262



/* --------------------- sifive_plic0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_plic0_control_base(struct metal_interrupt *controller)
{
20403f68:	1101                	addi	sp,sp,-32
20403f6a:	ce22                	sw	s0,28(sp)
20403f6c:	1000                	addi	s0,sp,32
20403f6e:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:263
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403f72:	fec42703          	lw	a4,-20(s0)
20403f76:	800007b7          	lui	a5,0x80000
20403f7a:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffefc0>
20403f7e:	00f71563          	bne	a4,a5,20403f88 <__metal_driver_sifive_plic0_control_base+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:264
		return METAL_RISCV_PLIC0_C000000_BASE_ADDRESS;
20403f82:	0c0007b7          	lui	a5,0xc000
20403f86:	a011                	j	20403f8a <__metal_driver_sifive_plic0_control_base+0x22>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:267
	}
	else {
		return 0;
20403f88:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:269
	}
}
20403f8a:	853e                	mv	a0,a5
20403f8c:	4472                	lw	s0,28(sp)
20403f8e:	6105                	addi	sp,sp,32
20403f90:	8082                	ret

20403f92 <__metal_driver_sifive_plic0_num_interrupts>:
__metal_driver_sifive_plic0_num_interrupts():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:282
		return 0;
	}
}

static __inline__ int __metal_driver_sifive_plic0_num_interrupts(struct metal_interrupt *controller)
{
20403f92:	1101                	addi	sp,sp,-32
20403f94:	ce22                	sw	s0,28(sp)
20403f96:	1000                	addi	s0,sp,32
20403f98:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:283
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403f9c:	fec42703          	lw	a4,-20(s0)
20403fa0:	800007b7          	lui	a5,0x80000
20403fa4:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffefc0>
20403fa8:	00f71463          	bne	a4,a5,20403fb0 <__metal_driver_sifive_plic0_num_interrupts+0x1e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:284
		return METAL_RISCV_PLIC0_C000000_RISCV_NDEV;
20403fac:	47ed                	li	a5,27
20403fae:	a011                	j	20403fb2 <__metal_driver_sifive_plic0_num_interrupts+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:287
	}
	else {
		return 0;
20403fb0:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:289
	}
}
20403fb2:	853e                	mv	a0,a5
20403fb4:	4472                	lw	s0,28(sp)
20403fb6:	6105                	addi	sp,sp,32
20403fb8:	8082                	ret

20403fba <__metal_driver_sifive_plic0_max_priority>:
__metal_driver_sifive_plic0_max_priority():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:292

static __inline__ int __metal_driver_sifive_plic0_max_priority(struct metal_interrupt *controller)
{
20403fba:	1101                	addi	sp,sp,-32
20403fbc:	ce22                	sw	s0,28(sp)
20403fbe:	1000                	addi	s0,sp,32
20403fc0:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:293
	if ((uintptr_t)controller == (uintptr_t)&__metal_dt_interrupt_controller_c000000) {
20403fc4:	fec42703          	lw	a4,-20(s0)
20403fc8:	800007b7          	lui	a5,0x80000
20403fcc:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffefc0>
20403fd0:	00f71463          	bne	a4,a5,20403fd8 <__metal_driver_sifive_plic0_max_priority+0x1e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:294
		return METAL_RISCV_PLIC0_C000000_RISCV_MAX_PRIORITY;
20403fd4:	479d                	li	a5,7
20403fd6:	a011                	j	20403fda <__metal_driver_sifive_plic0_max_priority+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:297
	}
	else {
		return 0;
20403fd8:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:299
	}
}
20403fda:	853e                	mv	a0,a5
20403fdc:	4472                	lw	s0,28(sp)
20403fde:	6105                	addi	sp,sp,32
20403fe0:	8082                	ret

20403fe2 <__metal_driver_sifive_plic0_interrupt_parents>:
__metal_driver_sifive_plic0_interrupt_parents():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:302

static __inline__ struct metal_interrupt * __metal_driver_sifive_plic0_interrupt_parents(struct metal_interrupt *controller, int idx)
{
20403fe2:	1101                	addi	sp,sp,-32
20403fe4:	ce22                	sw	s0,28(sp)
20403fe6:	1000                	addi	s0,sp,32
20403fe8:	fea42623          	sw	a0,-20(s0)
20403fec:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:303
	if (idx == 0) {
20403ff0:	fe842783          	lw	a5,-24(s0)
20403ff4:	e791                	bnez	a5,20404000 <__metal_driver_sifive_plic0_interrupt_parents+0x1e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:304
		return (struct metal_interrupt *)&__metal_dt_cpu_0_interrupt_controller.controller;
20403ff6:	800007b7          	lui	a5,0x80000
20403ffa:	07078793          	addi	a5,a5,112 # 80000070 <metal_segment_heap_target_end+0xffffebf0>
20403ffe:	a011                	j	20404002 <__metal_driver_sifive_plic0_interrupt_parents+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:307
	}
	else {
		return NULL;
20404000:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:309
	}
}
20404002:	853e                	mv	a0,a5
20404004:	4472                	lw	s0,28(sp)
20404006:	6105                	addi	sp,sp,32
20404008:	8082                	ret

2040400a <__metal_driver_sifive_plic0_interrupt_lines>:
__metal_driver_sifive_plic0_interrupt_lines():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:312

static __inline__ int __metal_driver_sifive_plic0_interrupt_lines(struct metal_interrupt *controller, int idx)
{
2040400a:	1101                	addi	sp,sp,-32
2040400c:	ce22                	sw	s0,28(sp)
2040400e:	1000                	addi	s0,sp,32
20404010:	fea42623          	sw	a0,-20(s0)
20404014:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:313
	if (idx == 0) {
20404018:	fe842783          	lw	a5,-24(s0)
2040401c:	e399                	bnez	a5,20404022 <__metal_driver_sifive_plic0_interrupt_lines+0x18>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:314
		return 11;
2040401e:	47ad                	li	a5,11
20404020:	a011                	j	20404024 <__metal_driver_sifive_plic0_interrupt_lines+0x1a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:317
	}
	else {
		return 0;
20404022:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:319
	}
}
20404024:	853e                	mv	a0,a5
20404026:	4472                	lw	s0,28(sp)
20404028:	6105                	addi	sp,sp,32
2040402a:	8082                	ret

2040402c <__metal_driver_sifive_plic0_context_ids>:
__metal_driver_sifive_plic0_context_ids():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:322

static __inline__ int __metal_driver_sifive_plic0_context_ids(int hartid)
{
2040402c:	1101                	addi	sp,sp,-32
2040402e:	ce22                	sw	s0,28(sp)
20404030:	1000                	addi	s0,sp,32
20404032:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:323
	if (hartid == 0) {
20404036:	fec42783          	lw	a5,-20(s0)
2040403a:	e399                	bnez	a5,20404040 <__metal_driver_sifive_plic0_context_ids+0x14>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:324
		return 0;
2040403c:	4781                	li	a5,0
2040403e:	a011                	j	20404042 <__metal_driver_sifive_plic0_context_ids+0x16>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:327
	}
	else {
		return -1;
20404040:	57fd                	li	a5,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:329
	}
}
20404042:	853e                	mv	a0,a5
20404044:	4472                	lw	s0,28(sp)
20404046:	6105                	addi	sp,sp,32
20404048:	8082                	ret

2040404a <__metal_plic0_claim_interrupt>:
__metal_plic0_claim_interrupt():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:18
#include <metal/machine.h>
#include <metal/shutdown.h>

unsigned int
__metal_plic0_claim_interrupt(struct __metal_driver_riscv_plic0 *plic,
                              int context_id) {
2040404a:	7179                	addi	sp,sp,-48
2040404c:	d606                	sw	ra,44(sp)
2040404e:	d422                	sw	s0,40(sp)
20404050:	1800                	addi	s0,sp,48
20404052:	fca42e23          	sw	a0,-36(s0)
20404056:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:19
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
2040405a:	fdc42503          	lw	a0,-36(s0)
2040405e:	3729                	jal	20403f68 <__metal_driver_sifive_plic0_control_base>
20404060:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:21
        (struct metal_interrupt *)plic);
    return __METAL_ACCESS_ONCE(
20404064:	fd842783          	lw	a5,-40(s0)
20404068:	00c79713          	slli	a4,a5,0xc
2040406c:	fec42783          	lw	a5,-20(s0)
20404070:	973e                	add	a4,a4,a5
20404072:	002007b7          	lui	a5,0x200
20404076:	0791                	addi	a5,a5,4
20404078:	97ba                	add	a5,a5,a4
2040407a:	439c                	lw	a5,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:25
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_CLAIM));
}
2040407c:	853e                	mv	a0,a5
2040407e:	50b2                	lw	ra,44(sp)
20404080:	5422                	lw	s0,40(sp)
20404082:	6145                	addi	sp,sp,48
20404084:	8082                	ret

20404086 <__metal_plic0_complete_interrupt>:
__metal_plic0_complete_interrupt():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:28

void __metal_plic0_complete_interrupt(struct __metal_driver_riscv_plic0 *plic,
                                      int context_id, unsigned int id) {
20404086:	7179                	addi	sp,sp,-48
20404088:	d606                	sw	ra,44(sp)
2040408a:	d422                	sw	s0,40(sp)
2040408c:	1800                	addi	s0,sp,48
2040408e:	fca42e23          	sw	a0,-36(s0)
20404092:	fcb42c23          	sw	a1,-40(s0)
20404096:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:29
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
2040409a:	fdc42503          	lw	a0,-36(s0)
2040409e:	35e9                	jal	20403f68 <__metal_driver_sifive_plic0_control_base>
204040a0:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:31
        (struct metal_interrupt *)plic);
    __METAL_ACCESS_ONCE(
204040a4:	fd842783          	lw	a5,-40(s0)
204040a8:	00c79713          	slli	a4,a5,0xc
204040ac:	fec42783          	lw	a5,-20(s0)
204040b0:	973e                	add	a4,a4,a5
204040b2:	002007b7          	lui	a5,0x200
204040b6:	0791                	addi	a5,a5,4
204040b8:	97ba                	add	a5,a5,a4
204040ba:	873e                	mv	a4,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:34
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_CLAIM)) = id;
204040bc:	fd442783          	lw	a5,-44(s0)
204040c0:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:35
}
204040c2:	0001                	nop
204040c4:	50b2                	lw	ra,44(sp)
204040c6:	5422                	lw	s0,40(sp)
204040c8:	6145                	addi	sp,sp,48
204040ca:	8082                	ret

204040cc <__metal_plic0_set_threshold>:
__metal_plic0_set_threshold():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:38

int __metal_plic0_set_threshold(struct metal_interrupt *controller,
                                int context_id, unsigned int threshold) {
204040cc:	7179                	addi	sp,sp,-48
204040ce:	d606                	sw	ra,44(sp)
204040d0:	d422                	sw	s0,40(sp)
204040d2:	1800                	addi	s0,sp,48
204040d4:	fca42e23          	sw	a0,-36(s0)
204040d8:	fcb42c23          	sw	a1,-40(s0)
204040dc:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:40
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
204040e0:	fdc42503          	lw	a0,-36(s0)
204040e4:	3551                	jal	20403f68 <__metal_driver_sifive_plic0_control_base>
204040e6:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:41
    __METAL_ACCESS_ONCE(
204040ea:	fd842783          	lw	a5,-40(s0)
204040ee:	00c79713          	slli	a4,a5,0xc
204040f2:	fec42783          	lw	a5,-20(s0)
204040f6:	973e                	add	a4,a4,a5
204040f8:	002007b7          	lui	a5,0x200
204040fc:	97ba                	add	a5,a5,a4
204040fe:	873e                	mv	a4,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:44
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_THRESHOLD)) = threshold;
20404100:	fd442783          	lw	a5,-44(s0)
20404104:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:45
    return 0;
20404106:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:46
}
20404108:	853e                	mv	a0,a5
2040410a:	50b2                	lw	ra,44(sp)
2040410c:	5422                	lw	s0,40(sp)
2040410e:	6145                	addi	sp,sp,48
20404110:	8082                	ret

20404112 <__metal_plic0_get_threshold>:
__metal_plic0_get_threshold():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:49

unsigned int __metal_plic0_get_threshold(struct metal_interrupt *controller,
                                         int context_id) {
20404112:	7179                	addi	sp,sp,-48
20404114:	d606                	sw	ra,44(sp)
20404116:	d422                	sw	s0,40(sp)
20404118:	1800                	addi	s0,sp,48
2040411a:	fca42e23          	sw	a0,-36(s0)
2040411e:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:51
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
20404122:	fdc42503          	lw	a0,-36(s0)
20404126:	3589                	jal	20403f68 <__metal_driver_sifive_plic0_control_base>
20404128:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:52
    return __METAL_ACCESS_ONCE(
2040412c:	fd842783          	lw	a5,-40(s0)
20404130:	00c79713          	slli	a4,a5,0xc
20404134:	fec42783          	lw	a5,-20(s0)
20404138:	973e                	add	a4,a4,a5
2040413a:	002007b7          	lui	a5,0x200
2040413e:	97ba                	add	a5,a5,a4
20404140:	439c                	lw	a5,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:56
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_CONTEXT_BASE +
                           (context_id * METAL_RISCV_PLIC0_CONTEXT_PER_HART) +
                           METAL_RISCV_PLIC0_CONTEXT_THRESHOLD));
}
20404142:	853e                	mv	a0,a5
20404144:	50b2                	lw	ra,44(sp)
20404146:	5422                	lw	s0,40(sp)
20404148:	6145                	addi	sp,sp,48
2040414a:	8082                	ret

2040414c <__metal_driver_riscv_plic0_set_priority>:
__metal_driver_riscv_plic0_set_priority():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:59

int __metal_driver_riscv_plic0_set_priority(struct metal_interrupt *controller,
                                            int id, unsigned int priority) {
2040414c:	7179                	addi	sp,sp,-48
2040414e:	d606                	sw	ra,44(sp)
20404150:	d422                	sw	s0,40(sp)
20404152:	1800                	addi	s0,sp,48
20404154:	fca42e23          	sw	a0,-36(s0)
20404158:	fcb42c23          	sw	a1,-40(s0)
2040415c:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:60
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
20404160:	fdc42503          	lw	a0,-36(s0)
20404164:	3511                	jal	20403f68 <__metal_driver_sifive_plic0_control_base>
20404166:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:62
        (struct metal_interrupt *)controller);
    unsigned int max_priority = __metal_driver_sifive_plic0_max_priority(
2040416a:	fdc42503          	lw	a0,-36(s0)
2040416e:	35b1                	jal	20403fba <__metal_driver_sifive_plic0_max_priority>
20404170:	87aa                	mv	a5,a0
20404172:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64
        (struct metal_interrupt *)controller);
    if ((max_priority) && (priority < max_priority)) {
20404176:	fe842783          	lw	a5,-24(s0)
2040417a:	c785                	beqz	a5,204041a2 <__metal_driver_riscv_plic0_set_priority+0x56>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:64 (discriminator 1)
2040417c:	fd442703          	lw	a4,-44(s0)
20404180:	fe842783          	lw	a5,-24(s0)
20404184:	00f77f63          	bgeu	a4,a5,204041a2 <__metal_driver_riscv_plic0_set_priority+0x56>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:65
        __METAL_ACCESS_ONCE(
20404188:	fd842783          	lw	a5,-40(s0)
2040418c:	078a                	slli	a5,a5,0x2
2040418e:	873e                	mv	a4,a5
20404190:	fec42783          	lw	a5,-20(s0)
20404194:	97ba                	add	a5,a5,a4
20404196:	873e                	mv	a4,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:67
            (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                               (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT))) =
20404198:	fd442783          	lw	a5,-44(s0)
2040419c:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:69
            priority;
        return 0;
2040419e:	4781                	li	a5,0
204041a0:	a011                	j	204041a4 <__metal_driver_riscv_plic0_set_priority+0x58>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:71
    }
    return -1;
204041a2:	57fd                	li	a5,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:72
}
204041a4:	853e                	mv	a0,a5
204041a6:	50b2                	lw	ra,44(sp)
204041a8:	5422                	lw	s0,40(sp)
204041aa:	6145                	addi	sp,sp,48
204041ac:	8082                	ret

204041ae <__metal_driver_riscv_plic0_get_priority>:
__metal_driver_riscv_plic0_get_priority():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:76

unsigned int
__metal_driver_riscv_plic0_get_priority(struct metal_interrupt *controller,
                                        int id) {
204041ae:	7179                	addi	sp,sp,-48
204041b0:	d606                	sw	ra,44(sp)
204041b2:	d422                	sw	s0,40(sp)
204041b4:	1800                	addi	s0,sp,48
204041b6:	fca42e23          	sw	a0,-36(s0)
204041ba:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:78
    unsigned long control_base =
        __metal_driver_sifive_plic0_control_base(controller);
204041be:	fdc42503          	lw	a0,-36(s0)
204041c2:	335d                	jal	20403f68 <__metal_driver_sifive_plic0_control_base>
204041c4:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:80

    return __METAL_ACCESS_ONCE(
204041c8:	fd842783          	lw	a5,-40(s0)
204041cc:	078a                	slli	a5,a5,0x2
204041ce:	873e                	mv	a4,a5
204041d0:	fec42783          	lw	a5,-20(s0)
204041d4:	97ba                	add	a5,a5,a4
204041d6:	439c                	lw	a5,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:83
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_PRIORITY_BASE +
                           (id << METAL_PLIC_SOURCE_PRIORITY_SHIFT)));
}
204041d8:	853e                	mv	a0,a5
204041da:	50b2                	lw	ra,44(sp)
204041dc:	5422                	lw	s0,40(sp)
204041de:	6145                	addi	sp,sp,48
204041e0:	8082                	ret

204041e2 <__metal_plic0_enable>:
__metal_plic0_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:86

int __metal_plic0_enable(struct __metal_driver_riscv_plic0 *plic,
                         int context_id, int id, int enable) {
204041e2:	7179                	addi	sp,sp,-48
204041e4:	d606                	sw	ra,44(sp)
204041e6:	d422                	sw	s0,40(sp)
204041e8:	1800                	addi	s0,sp,48
204041ea:	fca42e23          	sw	a0,-36(s0)
204041ee:	fcb42c23          	sw	a1,-40(s0)
204041f2:	fcc42a23          	sw	a2,-44(s0)
204041f6:	fcd42823          	sw	a3,-48(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:88
    unsigned int current;
    unsigned long control_base = __metal_driver_sifive_plic0_control_base(
204041fa:	fdc42503          	lw	a0,-36(s0)
204041fe:	33ad                	jal	20403f68 <__metal_driver_sifive_plic0_control_base>
20404200:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:91
        (struct metal_interrupt *)plic);

    current = __METAL_ACCESS_ONCE(
20404204:	fd842783          	lw	a5,-40(s0)
20404208:	00779713          	slli	a4,a5,0x7
2040420c:	fec42783          	lw	a5,-20(s0)
20404210:	97ba                	add	a5,a5,a4
20404212:	fd442703          	lw	a4,-44(s0)
20404216:	8715                	srai	a4,a4,0x5
20404218:	070a                	slli	a4,a4,0x2
2040421a:	973e                	add	a4,a4,a5
2040421c:	6789                	lui	a5,0x2
2040421e:	97ba                	add	a5,a5,a4
20404220:	439c                	lw	a5,0(a5)
20404222:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100
    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(control_base + METAL_RISCV_PLIC0_ENABLE_BASE +
                           (context_id * METAL_RISCV_PLIC0_ENABLE_PER_HART) +
                           ((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
        enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
20404226:	fd042783          	lw	a5,-48(s0)
2040422a:	cf81                	beqz	a5,20404242 <__metal_plic0_enable+0x60>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:99 (discriminator 1)
        enable ? (current | (1 << (id & METAL_PLIC_SOURCE_MASK)))
2040422c:	fd442783          	lw	a5,-44(s0)
20404230:	8bfd                	andi	a5,a5,31
20404232:	4705                	li	a4,1
20404234:	00f717b3          	sll	a5,a4,a5
20404238:	873e                	mv	a4,a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100 (discriminator 1)
               : (current & ~(1 << (id & METAL_PLIC_SOURCE_MASK)));
2040423a:	fe842783          	lw	a5,-24(s0)
2040423e:	8fd9                	or	a5,a5,a4
20404240:	a829                	j	2040425a <__metal_plic0_enable+0x78>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:100 (discriminator 2)
20404242:	fd442783          	lw	a5,-44(s0)
20404246:	8bfd                	andi	a5,a5,31
20404248:	4705                	li	a4,1
2040424a:	00f717b3          	sll	a5,a4,a5
2040424e:	fff7c793          	not	a5,a5
20404252:	873e                	mv	a4,a5
20404254:	fe842783          	lw	a5,-24(s0)
20404258:	8ff9                	and	a5,a5,a4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:95
    __METAL_ACCESS_ONCE(
2040425a:	fd842703          	lw	a4,-40(s0)
2040425e:	00771693          	slli	a3,a4,0x7
20404262:	fec42703          	lw	a4,-20(s0)
20404266:	9736                	add	a4,a4,a3
20404268:	fd442683          	lw	a3,-44(s0)
2040426c:	8695                	srai	a3,a3,0x5
2040426e:	068a                	slli	a3,a3,0x2
20404270:	96ba                	add	a3,a3,a4
20404272:	6709                	lui	a4,0x2
20404274:	9736                	add	a4,a4,a3
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:98
                           ((id >> METAL_PLIC_SOURCE_SHIFT) * 4))) =
20404276:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:102

    return 0;
20404278:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:103
}
2040427a:	853e                	mv	a0,a5
2040427c:	50b2                	lw	ra,44(sp)
2040427e:	5422                	lw	s0,40(sp)
20404280:	6145                	addi	sp,sp,48
20404282:	8082                	ret

20404284 <__metal_plic0_default_handler>:
__metal_plic0_default_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:105

void __metal_plic0_default_handler(int id, void *priv) { metal_shutdown(300); }
20404284:	1101                	addi	sp,sp,-32
20404286:	ce06                	sw	ra,28(sp)
20404288:	cc22                	sw	s0,24(sp)
2040428a:	1000                	addi	s0,sp,32
2040428c:	fea42623          	sw	a0,-20(s0)
20404290:	feb42423          	sw	a1,-24(s0)
20404294:	12c00513          	li	a0,300
20404298:	58c010ef          	jal	ra,20405824 <metal_shutdown>

2040429c <__metal_plic0_handler>:
__metal_plic0_handler():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:107

void __metal_plic0_handler(int id, void *priv) {
2040429c:	7179                	addi	sp,sp,-48
2040429e:	d606                	sw	ra,44(sp)
204042a0:	d422                	sw	s0,40(sp)
204042a2:	1800                	addi	s0,sp,48
204042a4:	fca42e23          	sw	a0,-36(s0)
204042a8:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:108
    struct __metal_driver_riscv_plic0 *plic = priv;
204042ac:	fd842783          	lw	a5,-40(s0)
204042b0:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:110
    int contextid =
        __metal_driver_sifive_plic0_context_ids(__metal_myhart_id());
204042b4:	b6afe0ef          	jal	ra,2040261e <__metal_myhart_id>
204042b8:	87aa                	mv	a5,a0
204042ba:	853e                	mv	a0,a5
204042bc:	3b85                	jal	2040402c <__metal_driver_sifive_plic0_context_ids>
204042be:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:111
    unsigned int idx = __metal_plic0_claim_interrupt(plic, contextid);
204042c2:	fe842583          	lw	a1,-24(s0)
204042c6:	fec42503          	lw	a0,-20(s0)
204042ca:	3341                	jal	2040404a <__metal_plic0_claim_interrupt>
204042cc:	fea42223          	sw	a0,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:112
    unsigned int num_interrupts = __metal_driver_sifive_plic0_num_interrupts(
204042d0:	fec42503          	lw	a0,-20(s0)
204042d4:	397d                	jal	20403f92 <__metal_driver_sifive_plic0_num_interrupts>
204042d6:	87aa                	mv	a5,a0
204042d8:	fef42023          	sw	a5,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115
        (struct metal_interrupt *)plic);

    if ((idx < num_interrupts) && (plic->metal_exint_table[idx])) {
204042dc:	fe442703          	lw	a4,-28(s0)
204042e0:	fe042783          	lw	a5,-32(s0)
204042e4:	04f77263          	bgeu	a4,a5,20404328 <__metal_plic0_handler+0x8c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:115 (discriminator 1)
204042e8:	fec42703          	lw	a4,-20(s0)
204042ec:	fe442783          	lw	a5,-28(s0)
204042f0:	078a                	slli	a5,a5,0x2
204042f2:	97ba                	add	a5,a5,a4
204042f4:	479c                	lw	a5,8(a5)
204042f6:	cb8d                	beqz	a5,20404328 <__metal_plic0_handler+0x8c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:116
        plic->metal_exint_table[idx](idx,
204042f8:	fec42703          	lw	a4,-20(s0)
204042fc:	fe442783          	lw	a5,-28(s0)
20404300:	078a                	slli	a5,a5,0x2
20404302:	97ba                	add	a5,a5,a4
20404304:	0087a803          	lw	a6,8(a5) # 2008 <__heap_size+0x1808>
20404308:	fe442603          	lw	a2,-28(s0)
2040430c:	fec42683          	lw	a3,-20(s0)
20404310:	fe442703          	lw	a4,-28(s0)
20404314:	87ba                	mv	a5,a4
20404316:	0786                	slli	a5,a5,0x1
20404318:	97ba                	add	a5,a5,a4
2040431a:	078e                	slli	a5,a5,0x3
2040431c:	97b6                	add	a5,a5,a3
2040431e:	0887a783          	lw	a5,136(a5)
20404322:	85be                	mv	a1,a5
20404324:	8532                	mv	a0,a2
20404326:	9802                	jalr	a6
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:120
                                     plic->metal_exdata_table[idx].exint_data);
    }

    __metal_plic0_complete_interrupt(plic, contextid, idx);
20404328:	fe442603          	lw	a2,-28(s0)
2040432c:	fe842583          	lw	a1,-24(s0)
20404330:	fec42503          	lw	a0,-20(s0)
20404334:	3b89                	jal	20404086 <__metal_plic0_complete_interrupt>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:121
}
20404336:	0001                	nop
20404338:	50b2                	lw	ra,44(sp)
2040433a:	5422                	lw	s0,40(sp)
2040433c:	6145                	addi	sp,sp,48
2040433e:	8082                	ret

20404340 <__metal_driver_riscv_plic0_init>:
__metal_driver_riscv_plic0_init():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:123

void __metal_driver_riscv_plic0_init(struct metal_interrupt *controller) {
20404340:	7139                	addi	sp,sp,-64
20404342:	de06                	sw	ra,60(sp)
20404344:	dc22                	sw	s0,56(sp)
20404346:	0080                	addi	s0,sp,64
20404348:	fca42623          	sw	a0,-52(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:124
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040434c:	fcc42783          	lw	a5,-52(s0)
20404350:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:126

    if (!plic->init_done) {
20404354:	fe442783          	lw	a5,-28(s0)
20404358:	43dc                	lw	a5,4(a5)
2040435a:	12079a63          	bnez	a5,2040448e <__metal_driver_riscv_plic0_init+0x14e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130
        int num_interrupts, line;
        struct metal_interrupt *intc;

        for (int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
2040435e:	fe042623          	sw	zero,-20(s0)
20404362:	aa31                	j	2040447e <__metal_driver_riscv_plic0_init+0x13e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:132
            num_interrupts =
                __metal_driver_sifive_plic0_num_interrupts(controller);
20404364:	fcc42503          	lw	a0,-52(s0)
20404368:	c2bff0ef          	jal	ra,20403f92 <__metal_driver_sifive_plic0_num_interrupts>
2040436c:	fea42023          	sw	a0,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:133
            intc = __metal_driver_sifive_plic0_interrupt_parents(controller,
20404370:	fec42583          	lw	a1,-20(s0)
20404374:	fcc42503          	lw	a0,-52(s0)
20404378:	c6bff0ef          	jal	ra,20403fe2 <__metal_driver_sifive_plic0_interrupt_parents>
2040437c:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:136
                                                                 parent);
            line =
                __metal_driver_sifive_plic0_interrupt_lines(controller, parent);
20404380:	fec42583          	lw	a1,-20(s0)
20404384:	fcc42503          	lw	a0,-52(s0)
20404388:	c83ff0ef          	jal	ra,2040400a <__metal_driver_sifive_plic0_interrupt_lines>
2040438c:	fca42c23          	sw	a0,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:139

            /* Initialize ist parent controller, aka cpu_intc. */
            intc->vtable->interrupt_init(intc);
20404390:	fdc42783          	lw	a5,-36(s0)
20404394:	439c                	lw	a5,0(a5)
20404396:	439c                	lw	a5,0(a5)
20404398:	fdc42503          	lw	a0,-36(s0)
2040439c:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:141

            for (int i = 0; i < PLIC0_MAX_INTERRUPTS; i++) {
2040439e:	fe042423          	sw	zero,-24(s0)
204043a2:	a885                	j	20404412 <__metal_driver_riscv_plic0_init+0xd2>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:142
                __metal_plic0_enable(plic, parent, i, METAL_DISABLE);
204043a4:	4681                	li	a3,0
204043a6:	fe842603          	lw	a2,-24(s0)
204043aa:	fec42583          	lw	a1,-20(s0)
204043ae:	fe442503          	lw	a0,-28(s0)
204043b2:	3d05                	jal	204041e2 <__metal_plic0_enable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:143
                if (i < num_interrupts) {
204043b4:	fe842703          	lw	a4,-24(s0)
204043b8:	fe042783          	lw	a5,-32(s0)
204043bc:	04f75663          	bge	a4,a5,20404408 <__metal_driver_riscv_plic0_init+0xc8>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:144
                    __metal_driver_riscv_plic0_set_priority(controller, i, 0);
204043c0:	4601                	li	a2,0
204043c2:	fe842583          	lw	a1,-24(s0)
204043c6:	fcc42503          	lw	a0,-52(s0)
204043ca:	3349                	jal	2040414c <__metal_driver_riscv_plic0_set_priority>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:145
                    plic->metal_exint_table[i] = NULL;
204043cc:	fe442703          	lw	a4,-28(s0)
204043d0:	fe842783          	lw	a5,-24(s0)
204043d4:	078a                	slli	a5,a5,0x2
204043d6:	97ba                	add	a5,a5,a4
204043d8:	0007a423          	sw	zero,8(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:146
                    plic->metal_exdata_table[i].sub_int = NULL;
204043dc:	fe442683          	lw	a3,-28(s0)
204043e0:	fe842703          	lw	a4,-24(s0)
204043e4:	87ba                	mv	a5,a4
204043e6:	0786                	slli	a5,a5,0x1
204043e8:	97ba                	add	a5,a5,a4
204043ea:	078e                	slli	a5,a5,0x3
204043ec:	97b6                	add	a5,a5,a3
204043ee:	0807a223          	sw	zero,132(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:147
                    plic->metal_exdata_table[i].exint_data = NULL;
204043f2:	fe442683          	lw	a3,-28(s0)
204043f6:	fe842703          	lw	a4,-24(s0)
204043fa:	87ba                	mv	a5,a4
204043fc:	0786                	slli	a5,a5,0x1
204043fe:	97ba                	add	a5,a5,a4
20404400:	078e                	slli	a5,a5,0x3
20404402:	97b6                	add	a5,a5,a3
20404404:	0807a423          	sw	zero,136(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:141 (discriminator 2)
            for (int i = 0; i < PLIC0_MAX_INTERRUPTS; i++) {
20404408:	fe842783          	lw	a5,-24(s0)
2040440c:	0785                	addi	a5,a5,1
2040440e:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:141 (discriminator 1)
20404412:	fe842703          	lw	a4,-24(s0)
20404416:	3ff00793          	li	a5,1023
2040441a:	f8e7d5e3          	bge	a5,a4,204043a4 <__metal_driver_riscv_plic0_init+0x64>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:151 (discriminator 2)
                }
            }

            __metal_plic0_set_threshold(controller, parent, 0);
2040441e:	4601                	li	a2,0
20404420:	fec42583          	lw	a1,-20(s0)
20404424:	fcc42503          	lw	a0,-52(s0)
20404428:	ca5ff0ef          	jal	ra,204040cc <__metal_plic0_set_threshold>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:154 (discriminator 2)

            /* Register plic (ext) interrupt with with parent controller */
            intc->vtable->interrupt_register(intc, line, NULL, plic);
2040442c:	fdc42783          	lw	a5,-36(s0)
20404430:	439c                	lw	a5,0(a5)
20404432:	4fdc                	lw	a5,28(a5)
20404434:	fe442683          	lw	a3,-28(s0)
20404438:	4601                	li	a2,0
2040443a:	fd842583          	lw	a1,-40(s0)
2040443e:	fdc42503          	lw	a0,-36(s0)
20404442:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:156 (discriminator 2)
            /* Register plic handler for dispatching its device interrupts */
            intc->vtable->interrupt_register(intc, line, __metal_plic0_handler,
20404444:	fdc42783          	lw	a5,-36(s0)
20404448:	439c                	lw	a5,0(a5)
2040444a:	4fd8                	lw	a4,28(a5)
2040444c:	fe442683          	lw	a3,-28(s0)
20404450:	204047b7          	lui	a5,0x20404
20404454:	29c78613          	addi	a2,a5,668 # 2040429c <__metal_plic0_handler>
20404458:	fd842583          	lw	a1,-40(s0)
2040445c:	fdc42503          	lw	a0,-36(s0)
20404460:	9702                	jalr	a4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:159 (discriminator 2)
                                             plic);
            /* Enable plic (ext) interrupt with with parent controller */
            intc->vtable->interrupt_enable(intc, line);
20404462:	fdc42783          	lw	a5,-36(s0)
20404466:	439c                	lw	a5,0(a5)
20404468:	53dc                	lw	a5,36(a5)
2040446a:	fd842583          	lw	a1,-40(s0)
2040446e:	fdc42503          	lw	a0,-36(s0)
20404472:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 2)
        for (int parent = 0; parent < __METAL_PLIC_NUM_PARENTS; parent++) {
20404474:	fec42783          	lw	a5,-20(s0)
20404478:	0785                	addi	a5,a5,1
2040447a:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:130 (discriminator 1)
2040447e:	fec42783          	lw	a5,-20(s0)
20404482:	eef051e3          	blez	a5,20404364 <__metal_driver_riscv_plic0_init+0x24>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:161
        }
        plic->init_done = 1;
20404486:	fe442783          	lw	a5,-28(s0)
2040448a:	4705                	li	a4,1
2040448c:	c3d8                	sw	a4,4(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:163
    }
}
2040448e:	0001                	nop
20404490:	50f2                	lw	ra,60(sp)
20404492:	5462                	lw	s0,56(sp)
20404494:	6121                	addi	sp,sp,64
20404496:	8082                	ret

20404498 <__metal_driver_riscv_plic0_register>:
__metal_driver_riscv_plic0_register():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:167

int __metal_driver_riscv_plic0_register(struct metal_interrupt *controller,
                                        int id, metal_interrupt_handler_t isr,
                                        void *priv) {
20404498:	7179                	addi	sp,sp,-48
2040449a:	d606                	sw	ra,44(sp)
2040449c:	d422                	sw	s0,40(sp)
2040449e:	1800                	addi	s0,sp,48
204044a0:	fca42e23          	sw	a0,-36(s0)
204044a4:	fcb42c23          	sw	a1,-40(s0)
204044a8:	fcc42a23          	sw	a2,-44(s0)
204044ac:	fcd42823          	sw	a3,-48(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:168
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204044b0:	fdc42783          	lw	a5,-36(s0)
204044b4:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:170

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204044b8:	fdc42503          	lw	a0,-36(s0)
204044bc:	ad7ff0ef          	jal	ra,20403f92 <__metal_driver_sifive_plic0_num_interrupts>
204044c0:	872a                	mv	a4,a0
204044c2:	fd842783          	lw	a5,-40(s0)
204044c6:	00e7c463          	blt	a5,a4,204044ce <__metal_driver_riscv_plic0_register+0x36>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:171
        return -1;
204044ca:	57fd                	li	a5,-1
204044cc:	a051                	j	20404550 <__metal_driver_riscv_plic0_register+0xb8>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:174
    }

    if (isr) {
204044ce:	fd442783          	lw	a5,-44(s0)
204044d2:	cf9d                	beqz	a5,20404510 <__metal_driver_riscv_plic0_register+0x78>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:175
        __metal_driver_riscv_plic0_set_priority(controller, id, 2);
204044d4:	4609                	li	a2,2
204044d6:	fd842583          	lw	a1,-40(s0)
204044da:	fdc42503          	lw	a0,-36(s0)
204044de:	c6fff0ef          	jal	ra,2040414c <__metal_driver_riscv_plic0_set_priority>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:176
        plic->metal_exint_table[id] = isr;
204044e2:	fec42703          	lw	a4,-20(s0)
204044e6:	fd842783          	lw	a5,-40(s0)
204044ea:	078a                	slli	a5,a5,0x2
204044ec:	97ba                	add	a5,a5,a4
204044ee:	fd442703          	lw	a4,-44(s0)
204044f2:	c798                	sw	a4,8(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:177
        plic->metal_exdata_table[id].exint_data = priv;
204044f4:	fec42683          	lw	a3,-20(s0)
204044f8:	fd842703          	lw	a4,-40(s0)
204044fc:	87ba                	mv	a5,a4
204044fe:	0786                	slli	a5,a5,0x1
20404500:	97ba                	add	a5,a5,a4
20404502:	078e                	slli	a5,a5,0x3
20404504:	97b6                	add	a5,a5,a3
20404506:	fd042703          	lw	a4,-48(s0)
2040450a:	08e7a423          	sw	a4,136(a5)
2040450e:	a081                	j	2040454e <__metal_driver_riscv_plic0_register+0xb6>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:179
    } else {
        __metal_driver_riscv_plic0_set_priority(controller, id, 1);
20404510:	4605                	li	a2,1
20404512:	fd842583          	lw	a1,-40(s0)
20404516:	fdc42503          	lw	a0,-36(s0)
2040451a:	c33ff0ef          	jal	ra,2040414c <__metal_driver_riscv_plic0_set_priority>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:180
        plic->metal_exint_table[id] = __metal_plic0_default_handler;
2040451e:	fec42703          	lw	a4,-20(s0)
20404522:	fd842783          	lw	a5,-40(s0)
20404526:	078a                	slli	a5,a5,0x2
20404528:	97ba                	add	a5,a5,a4
2040452a:	20404737          	lui	a4,0x20404
2040452e:	28470713          	addi	a4,a4,644 # 20404284 <__metal_plic0_default_handler>
20404532:	c798                	sw	a4,8(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:181
        plic->metal_exdata_table[id].sub_int = priv;
20404534:	fec42683          	lw	a3,-20(s0)
20404538:	fd842703          	lw	a4,-40(s0)
2040453c:	87ba                	mv	a5,a4
2040453e:	0786                	slli	a5,a5,0x1
20404540:	97ba                	add	a5,a5,a4
20404542:	078e                	slli	a5,a5,0x3
20404544:	97b6                	add	a5,a5,a3
20404546:	fd042703          	lw	a4,-48(s0)
2040454a:	08e7a223          	sw	a4,132(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:184
    }

    return 0;
2040454e:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:185
}
20404550:	853e                	mv	a0,a5
20404552:	50b2                	lw	ra,44(sp)
20404554:	5422                	lw	s0,40(sp)
20404556:	6145                	addi	sp,sp,48
20404558:	8082                	ret

2040455a <__metal_driver_riscv_plic0_enable>:
__metal_driver_riscv_plic0_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:188

int __metal_driver_riscv_plic0_enable(struct metal_interrupt *controller,
                                      int id) {
2040455a:	7179                	addi	sp,sp,-48
2040455c:	d606                	sw	ra,44(sp)
2040455e:	d422                	sw	s0,40(sp)
20404560:	1800                	addi	s0,sp,48
20404562:	fca42e23          	sw	a0,-36(s0)
20404566:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:189
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040456a:	fdc42783          	lw	a5,-36(s0)
2040456e:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:191

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404572:	fdc42503          	lw	a0,-36(s0)
20404576:	a1dff0ef          	jal	ra,20403f92 <__metal_driver_sifive_plic0_num_interrupts>
2040457a:	872a                	mv	a4,a0
2040457c:	fd842783          	lw	a5,-40(s0)
20404580:	00e7c463          	blt	a5,a4,20404588 <__metal_driver_riscv_plic0_enable+0x2e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:192
        return -1;
20404584:	57fd                	li	a5,-1
20404586:	a829                	j	204045a0 <__metal_driver_riscv_plic0_enable+0x46>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:195
    }

    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_ENABLE);
20404588:	896fe0ef          	jal	ra,2040261e <__metal_myhart_id>
2040458c:	87aa                	mv	a5,a0
2040458e:	4685                	li	a3,1
20404590:	fd842603          	lw	a2,-40(s0)
20404594:	85be                	mv	a1,a5
20404596:	fec42503          	lw	a0,-20(s0)
2040459a:	c49ff0ef          	jal	ra,204041e2 <__metal_plic0_enable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:196
    return 0;
2040459e:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:197
}
204045a0:	853e                	mv	a0,a5
204045a2:	50b2                	lw	ra,44(sp)
204045a4:	5422                	lw	s0,40(sp)
204045a6:	6145                	addi	sp,sp,48
204045a8:	8082                	ret

204045aa <__metal_driver_riscv_plic0_disable>:
__metal_driver_riscv_plic0_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:200

int __metal_driver_riscv_plic0_disable(struct metal_interrupt *controller,
                                       int id) {
204045aa:	7179                	addi	sp,sp,-48
204045ac:	d606                	sw	ra,44(sp)
204045ae:	d422                	sw	s0,40(sp)
204045b0:	1800                	addi	s0,sp,48
204045b2:	fca42e23          	sw	a0,-36(s0)
204045b6:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:201
    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
204045ba:	fdc42783          	lw	a5,-36(s0)
204045be:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:203

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
204045c2:	fdc42503          	lw	a0,-36(s0)
204045c6:	9cdff0ef          	jal	ra,20403f92 <__metal_driver_sifive_plic0_num_interrupts>
204045ca:	872a                	mv	a4,a0
204045cc:	fd842783          	lw	a5,-40(s0)
204045d0:	00e7c463          	blt	a5,a4,204045d8 <__metal_driver_riscv_plic0_disable+0x2e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:204
        return -1;
204045d4:	57fd                	li	a5,-1
204045d6:	a829                	j	204045f0 <__metal_driver_riscv_plic0_disable+0x46>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:206
    }
    __metal_plic0_enable(plic, __metal_myhart_id(), id, METAL_DISABLE);
204045d8:	846fe0ef          	jal	ra,2040261e <__metal_myhart_id>
204045dc:	87aa                	mv	a5,a0
204045de:	4681                	li	a3,0
204045e0:	fd842603          	lw	a2,-40(s0)
204045e4:	85be                	mv	a1,a5
204045e6:	fec42503          	lw	a0,-20(s0)
204045ea:	bf9ff0ef          	jal	ra,204041e2 <__metal_plic0_enable>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:207
    return 0;
204045ee:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:208
}
204045f0:	853e                	mv	a0,a5
204045f2:	50b2                	lw	ra,44(sp)
204045f4:	5422                	lw	s0,40(sp)
204045f6:	6145                	addi	sp,sp,48
204045f8:	8082                	ret

204045fa <__metal_driver_riscv_plic0_set_threshold>:
__metal_driver_riscv_plic0_set_threshold():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:211

int __metal_driver_riscv_plic0_set_threshold(struct metal_interrupt *controller,
                                             unsigned int threshold) {
204045fa:	1101                	addi	sp,sp,-32
204045fc:	ce06                	sw	ra,28(sp)
204045fe:	cc22                	sw	s0,24(sp)
20404600:	1000                	addi	s0,sp,32
20404602:	fea42623          	sw	a0,-20(s0)
20404606:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:212
    return __metal_plic0_set_threshold(controller, __metal_myhart_id(),
2040460a:	814fe0ef          	jal	ra,2040261e <__metal_myhart_id>
2040460e:	87aa                	mv	a5,a0
20404610:	fe842603          	lw	a2,-24(s0)
20404614:	85be                	mv	a1,a5
20404616:	fec42503          	lw	a0,-20(s0)
2040461a:	ab3ff0ef          	jal	ra,204040cc <__metal_plic0_set_threshold>
2040461e:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:214
                                       threshold);
}
20404620:	853e                	mv	a0,a5
20404622:	40f2                	lw	ra,28(sp)
20404624:	4462                	lw	s0,24(sp)
20404626:	6105                	addi	sp,sp,32
20404628:	8082                	ret

2040462a <__metal_driver_riscv_plic0_get_threshold>:
__metal_driver_riscv_plic0_get_threshold():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:217

unsigned int
__metal_driver_riscv_plic0_get_threshold(struct metal_interrupt *controller) {
2040462a:	1101                	addi	sp,sp,-32
2040462c:	ce06                	sw	ra,28(sp)
2040462e:	cc22                	sw	s0,24(sp)
20404630:	1000                	addi	s0,sp,32
20404632:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:218
    return __metal_plic0_get_threshold(controller, __metal_myhart_id());
20404636:	fe9fd0ef          	jal	ra,2040261e <__metal_myhart_id>
2040463a:	87aa                	mv	a5,a0
2040463c:	85be                	mv	a1,a5
2040463e:	fec42503          	lw	a0,-20(s0)
20404642:	ad1ff0ef          	jal	ra,20404112 <__metal_plic0_get_threshold>
20404646:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:219
}
20404648:	853e                	mv	a0,a5
2040464a:	40f2                	lw	ra,28(sp)
2040464c:	4462                	lw	s0,24(sp)
2040464e:	6105                	addi	sp,sp,32
20404650:	8082                	ret

20404652 <__metal_driver_riscv_plic0_affinity_enable>:
__metal_driver_riscv_plic0_affinity_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:223

metal_affinity
__metal_driver_riscv_plic0_affinity_enable(struct metal_interrupt *controller,
                                           metal_affinity bitmask, int id) {
20404652:	7179                	addi	sp,sp,-48
20404654:	d606                	sw	ra,44(sp)
20404656:	d422                	sw	s0,40(sp)
20404658:	1800                	addi	s0,sp,48
2040465a:	fca42e23          	sw	a0,-36(s0)
2040465e:	fcb42c23          	sw	a1,-40(s0)
20404662:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:224
    metal_affinity ret = {0};
20404666:	fe042223          	sw	zero,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:227
    int context;

    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
2040466a:	fdc42783          	lw	a5,-36(s0)
2040466e:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:229

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
20404672:	fdc42503          	lw	a0,-36(s0)
20404676:	91dff0ef          	jal	ra,20403f92 <__metal_driver_sifive_plic0_num_interrupts>
2040467a:	872a                	mv	a4,a0
2040467c:	fd442783          	lw	a5,-44(s0)
20404680:	00e7c863          	blt	a5,a4,20404690 <__metal_driver_riscv_plic0_affinity_enable+0x3e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:230
        metal_affinity_set_val(ret, -1);
20404684:	57fd                	li	a5,-1
20404686:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:231
        return ret;
2040468a:	fe442783          	lw	a5,-28(s0)
2040468e:	a899                	j	204046e4 <__metal_driver_riscv_plic0_affinity_enable+0x92>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:234
    }

    for_each_metal_affinity(context, bitmask) {
20404690:	fe042623          	sw	zero,-20(s0)
20404694:	a099                	j	204046da <__metal_driver_riscv_plic0_affinity_enable+0x88>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:235
        if (context != 0)
20404696:	fec42783          	lw	a5,-20(s0)
2040469a:	c795                	beqz	a5,204046c6 <__metal_driver_riscv_plic0_affinity_enable+0x74>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:236
            metal_affinity_set_bit(
2040469c:	4685                	li	a3,1
2040469e:	fd442603          	lw	a2,-44(s0)
204046a2:	fec42583          	lw	a1,-20(s0)
204046a6:	fe842503          	lw	a0,-24(s0)
204046aa:	b39ff0ef          	jal	ra,204041e2 <__metal_plic0_enable>
204046ae:	87aa                	mv	a5,a0
204046b0:	0017f713          	andi	a4,a5,1
204046b4:	fec42783          	lw	a5,-20(s0)
204046b8:	00f71733          	sll	a4,a4,a5
204046bc:	fe442783          	lw	a5,-28(s0)
204046c0:	8fd9                	or	a5,a5,a4
204046c2:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:234 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
204046c6:	fec42783          	lw	a5,-20(s0)
204046ca:	0785                	addi	a5,a5,1
204046cc:	fef42623          	sw	a5,-20(s0)
204046d0:	fd842783          	lw	a5,-40(s0)
204046d4:	8385                	srli	a5,a5,0x1
204046d6:	fcf42c23          	sw	a5,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:234 (discriminator 1)
204046da:	fd842783          	lw	a5,-40(s0)
204046de:	ffc5                	bnez	a5,20404696 <__metal_driver_riscv_plic0_affinity_enable+0x44>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:241
                ret, context,
                __metal_plic0_enable(plic, context, id, METAL_ENABLE));
    }

    return ret;
204046e0:	fe442783          	lw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:242 (discriminator 1)
}
204046e4:	853e                	mv	a0,a5
204046e6:	50b2                	lw	ra,44(sp)
204046e8:	5422                	lw	s0,40(sp)
204046ea:	6145                	addi	sp,sp,48
204046ec:	8082                	ret

204046ee <__metal_driver_riscv_plic0_affinity_disable>:
__metal_driver_riscv_plic0_affinity_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:246

metal_affinity
__metal_driver_riscv_plic0_affinity_disable(struct metal_interrupt *controller,
                                            metal_affinity bitmask, int id) {
204046ee:	7179                	addi	sp,sp,-48
204046f0:	d606                	sw	ra,44(sp)
204046f2:	d422                	sw	s0,40(sp)
204046f4:	1800                	addi	s0,sp,48
204046f6:	fca42e23          	sw	a0,-36(s0)
204046fa:	fcb42c23          	sw	a1,-40(s0)
204046fe:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:247
    metal_affinity ret = {0};
20404702:	fe042223          	sw	zero,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:250
    int context;

    struct __metal_driver_riscv_plic0 *plic = (void *)(controller);
20404706:	fdc42783          	lw	a5,-36(s0)
2040470a:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:252

    if (id >= __metal_driver_sifive_plic0_num_interrupts(controller)) {
2040470e:	fdc42503          	lw	a0,-36(s0)
20404712:	881ff0ef          	jal	ra,20403f92 <__metal_driver_sifive_plic0_num_interrupts>
20404716:	872a                	mv	a4,a0
20404718:	fd442783          	lw	a5,-44(s0)
2040471c:	00e7c863          	blt	a5,a4,2040472c <__metal_driver_riscv_plic0_affinity_disable+0x3e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:253
        metal_affinity_set_val(ret, -1);
20404720:	57fd                	li	a5,-1
20404722:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:254
        return ret;
20404726:	fe442783          	lw	a5,-28(s0)
2040472a:	a899                	j	20404780 <__metal_driver_riscv_plic0_affinity_disable+0x92>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:257
    }

    for_each_metal_affinity(context, bitmask) {
2040472c:	fe042623          	sw	zero,-20(s0)
20404730:	a099                	j	20404776 <__metal_driver_riscv_plic0_affinity_disable+0x88>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:258
        if (context != 0)
20404732:	fec42783          	lw	a5,-20(s0)
20404736:	c795                	beqz	a5,20404762 <__metal_driver_riscv_plic0_affinity_disable+0x74>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:259
            metal_affinity_set_bit(
20404738:	4681                	li	a3,0
2040473a:	fd442603          	lw	a2,-44(s0)
2040473e:	fec42583          	lw	a1,-20(s0)
20404742:	fe842503          	lw	a0,-24(s0)
20404746:	a9dff0ef          	jal	ra,204041e2 <__metal_plic0_enable>
2040474a:	87aa                	mv	a5,a0
2040474c:	0017f713          	andi	a4,a5,1
20404750:	fec42783          	lw	a5,-20(s0)
20404754:	00f71733          	sll	a4,a4,a5
20404758:	fe442783          	lw	a5,-28(s0)
2040475c:	8fd9                	or	a5,a5,a4
2040475e:	fef42223          	sw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:257 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
20404762:	fec42783          	lw	a5,-20(s0)
20404766:	0785                	addi	a5,a5,1
20404768:	fef42623          	sw	a5,-20(s0)
2040476c:	fd842783          	lw	a5,-40(s0)
20404770:	8385                	srli	a5,a5,0x1
20404772:	fcf42c23          	sw	a5,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:257 (discriminator 1)
20404776:	fd842783          	lw	a5,-40(s0)
2040477a:	ffc5                	bnez	a5,20404732 <__metal_driver_riscv_plic0_affinity_disable+0x44>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:264
                ret, context,
                __metal_plic0_enable(plic, context, id, METAL_DISABLE));
    }

    return ret;
2040477c:	fe442783          	lw	a5,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:265 (discriminator 1)
}
20404780:	853e                	mv	a0,a5
20404782:	50b2                	lw	ra,44(sp)
20404784:	5422                	lw	s0,40(sp)
20404786:	6145                	addi	sp,sp,48
20404788:	8082                	ret

2040478a <__metal_driver_riscv_plic0_affinity_set_threshold>:
__metal_driver_riscv_plic0_affinity_set_threshold():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:269

metal_affinity __metal_driver_riscv_plic0_affinity_set_threshold(
    struct metal_interrupt *controller, metal_affinity bitmask,
    unsigned int threshold) {
2040478a:	7179                	addi	sp,sp,-48
2040478c:	d606                	sw	ra,44(sp)
2040478e:	d422                	sw	s0,40(sp)
20404790:	1800                	addi	s0,sp,48
20404792:	fca42e23          	sw	a0,-36(s0)
20404796:	fcb42c23          	sw	a1,-40(s0)
2040479a:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:270
    metal_affinity ret = {0};
2040479e:	fe042423          	sw	zero,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:273
    int context;

    for_each_metal_affinity(context, bitmask) {
204047a2:	fe042623          	sw	zero,-20(s0)
204047a6:	a091                	j	204047ea <__metal_driver_riscv_plic0_affinity_set_threshold+0x60>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:274
        if (context != 0)
204047a8:	fec42783          	lw	a5,-20(s0)
204047ac:	c78d                	beqz	a5,204047d6 <__metal_driver_riscv_plic0_affinity_set_threshold+0x4c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:275
            metal_affinity_set_bit(
204047ae:	fd442603          	lw	a2,-44(s0)
204047b2:	fec42583          	lw	a1,-20(s0)
204047b6:	fdc42503          	lw	a0,-36(s0)
204047ba:	913ff0ef          	jal	ra,204040cc <__metal_plic0_set_threshold>
204047be:	87aa                	mv	a5,a0
204047c0:	0017f713          	andi	a4,a5,1
204047c4:	fec42783          	lw	a5,-20(s0)
204047c8:	00f71733          	sll	a4,a4,a5
204047cc:	fe842783          	lw	a5,-24(s0)
204047d0:	8fd9                	or	a5,a5,a4
204047d2:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:273 (discriminator 2)
    for_each_metal_affinity(context, bitmask) {
204047d6:	fec42783          	lw	a5,-20(s0)
204047da:	0785                	addi	a5,a5,1
204047dc:	fef42623          	sw	a5,-20(s0)
204047e0:	fd842783          	lw	a5,-40(s0)
204047e4:	8385                	srli	a5,a5,0x1
204047e6:	fcf42c23          	sw	a5,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:273 (discriminator 1)
204047ea:	fd842783          	lw	a5,-40(s0)
204047ee:	ffcd                	bnez	a5,204047a8 <__metal_driver_riscv_plic0_affinity_set_threshold+0x1e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:280
                ret, context,
                __metal_plic0_set_threshold(controller, context, threshold));
    }

    return ret;
204047f0:	fe842783          	lw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:281
}
204047f4:	853e                	mv	a0,a5
204047f6:	50b2                	lw	ra,44(sp)
204047f8:	5422                	lw	s0,40(sp)
204047fa:	6145                	addi	sp,sp,48
204047fc:	8082                	ret

204047fe <__metal_driver_riscv_plic0_affinity_get_threshold>:
__metal_driver_riscv_plic0_affinity_get_threshold():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:284

unsigned int __metal_driver_riscv_plic0_affinity_get_threshold(
    struct metal_interrupt *controller, int context_id) {
204047fe:	1101                	addi	sp,sp,-32
20404800:	ce06                	sw	ra,28(sp)
20404802:	cc22                	sw	s0,24(sp)
20404804:	1000                	addi	s0,sp,32
20404806:	fea42623          	sw	a0,-20(s0)
2040480a:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:285
    __metal_plic0_get_threshold(controller, context_id);
2040480e:	fe842583          	lw	a1,-24(s0)
20404812:	fec42503          	lw	a0,-20(s0)
20404816:	8fdff0ef          	jal	ra,20404112 <__metal_plic0_get_threshold>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:286
    return 0;
2040481a:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/riscv_plic0.c:287
}
2040481c:	853e                	mv	a0,a5
2040481e:	40f2                	lw	ra,28(sp)
20404820:	4462                	lw	s0,24(sp)
20404822:	6105                	addi	sp,sp,32
20404824:	8082                	ret

20404826 <__metal_driver_sifive_gpio0_base>:
__metal_driver_sifive_gpio0_base():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:422
/* --------------------- sifive_global_external_interrupts0 ------------ */


/* --------------------- sifive_gpio0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_gpio0_base(struct metal_gpio *gpio)
{
20404826:	1101                	addi	sp,sp,-32
20404828:	ce22                	sw	s0,28(sp)
2040482a:	1000                	addi	s0,sp,32
2040482c:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:423
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404830:	fec42703          	lw	a4,-20(s0)
20404834:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
20404838:	00f71563          	bne	a4,a5,20404842 <__metal_driver_sifive_gpio0_base+0x1c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:424
		return METAL_SIFIVE_GPIO0_10012000_BASE_ADDRESS;
2040483c:	100127b7          	lui	a5,0x10012
20404840:	a011                	j	20404844 <__metal_driver_sifive_gpio0_base+0x1e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:427
	}
	else {
		return 0;
20404842:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:429
	}
}
20404844:	853e                	mv	a0,a5
20404846:	4472                	lw	s0,28(sp)
20404848:	6105                	addi	sp,sp,32
2040484a:	8082                	ret

2040484c <__metal_driver_sifive_gpio0_interrupt_parent>:
__metal_driver_sifive_gpio0_interrupt_parent():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:452
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_gpio0_interrupt_parent(struct metal_gpio *gpio)
{
2040484c:	1101                	addi	sp,sp,-32
2040484e:	ce22                	sw	s0,28(sp)
20404850:	1000                	addi	s0,sp,32
20404852:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:453
	if ((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) {
20404856:	fec42703          	lw	a4,-20(s0)
2040485a:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
2040485e:	00f71763          	bne	a4,a5,2040486c <__metal_driver_sifive_gpio0_interrupt_parent+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:454
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
20404862:	800007b7          	lui	a5,0x80000
20404866:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffefc0>
2040486a:	a011                	j	2040486e <__metal_driver_sifive_gpio0_interrupt_parent+0x22>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:457
	}
	else {
		return 0;
2040486c:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:459
	}
}
2040486e:	853e                	mv	a0,a5
20404870:	4472                	lw	s0,28(sp)
20404872:	6105                	addi	sp,sp,32
20404874:	8082                	ret

20404876 <__metal_driver_sifive_gpio0_interrupt_lines>:
__metal_driver_sifive_gpio0_interrupt_lines():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:462

static __inline__ int __metal_driver_sifive_gpio0_interrupt_lines(struct metal_gpio *gpio, int idx)
{
20404876:	1101                	addi	sp,sp,-32
20404878:	ce22                	sw	s0,28(sp)
2040487a:	1000                	addi	s0,sp,32
2040487c:	fea42623          	sw	a0,-20(s0)
20404880:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:463
	if (((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 0)) {
20404884:	fec42703          	lw	a4,-20(s0)
20404888:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
2040488c:	00f71763          	bne	a4,a5,2040489a <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:463 (discriminator 1)
20404890:	fe842783          	lw	a5,-24(s0)
20404894:	e399                	bnez	a5,2040489a <__metal_driver_sifive_gpio0_interrupt_lines+0x24>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:464
		return 7;
20404896:	479d                	li	a5,7
20404898:	a269                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:466
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 1))) {
2040489a:	fec42703          	lw	a4,-20(s0)
2040489e:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
204048a2:	00f71963          	bne	a4,a5,204048b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:466 (discriminator 1)
204048a6:	fe842703          	lw	a4,-24(s0)
204048aa:	4785                	li	a5,1
204048ac:	00f71463          	bne	a4,a5,204048b4 <__metal_driver_sifive_gpio0_interrupt_lines+0x3e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:467
		return 8;
204048b0:	47a1                	li	a5,8
204048b2:	aa85                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:469
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 2))) {
204048b4:	fec42703          	lw	a4,-20(s0)
204048b8:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
204048bc:	00f71963          	bne	a4,a5,204048ce <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:469 (discriminator 1)
204048c0:	fe842703          	lw	a4,-24(s0)
204048c4:	4789                	li	a5,2
204048c6:	00f71463          	bne	a4,a5,204048ce <__metal_driver_sifive_gpio0_interrupt_lines+0x58>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:470
		return 9;
204048ca:	47a5                	li	a5,9
204048cc:	aa99                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:472
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 3))) {
204048ce:	fec42703          	lw	a4,-20(s0)
204048d2:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
204048d6:	00f71963          	bne	a4,a5,204048e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:472 (discriminator 1)
204048da:	fe842703          	lw	a4,-24(s0)
204048de:	478d                	li	a5,3
204048e0:	00f71463          	bne	a4,a5,204048e8 <__metal_driver_sifive_gpio0_interrupt_lines+0x72>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:473
		return 10;
204048e4:	47a9                	li	a5,10
204048e6:	aa35                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:475
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 4))) {
204048e8:	fec42703          	lw	a4,-20(s0)
204048ec:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
204048f0:	00f71963          	bne	a4,a5,20404902 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:475 (discriminator 1)
204048f4:	fe842703          	lw	a4,-24(s0)
204048f8:	4791                	li	a5,4
204048fa:	00f71463          	bne	a4,a5,20404902 <__metal_driver_sifive_gpio0_interrupt_lines+0x8c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:476
		return 11;
204048fe:	47ad                	li	a5,11
20404900:	a20d                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:478
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 5))) {
20404902:	fec42703          	lw	a4,-20(s0)
20404906:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
2040490a:	00f71963          	bne	a4,a5,2040491c <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:478 (discriminator 1)
2040490e:	fe842703          	lw	a4,-24(s0)
20404912:	4795                	li	a5,5
20404914:	00f71463          	bne	a4,a5,2040491c <__metal_driver_sifive_gpio0_interrupt_lines+0xa6>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:479
		return 12;
20404918:	47b1                	li	a5,12
2040491a:	a221                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:481
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 6))) {
2040491c:	fec42703          	lw	a4,-20(s0)
20404920:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
20404924:	00f71963          	bne	a4,a5,20404936 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:481 (discriminator 1)
20404928:	fe842703          	lw	a4,-24(s0)
2040492c:	4799                	li	a5,6
2040492e:	00f71463          	bne	a4,a5,20404936 <__metal_driver_sifive_gpio0_interrupt_lines+0xc0>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:482
		return 13;
20404932:	47b5                	li	a5,13
20404934:	a0fd                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:484
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 7))) {
20404936:	fec42703          	lw	a4,-20(s0)
2040493a:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
2040493e:	00f71963          	bne	a4,a5,20404950 <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:484 (discriminator 1)
20404942:	fe842703          	lw	a4,-24(s0)
20404946:	479d                	li	a5,7
20404948:	00f71463          	bne	a4,a5,20404950 <__metal_driver_sifive_gpio0_interrupt_lines+0xda>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:485
		return 14;
2040494c:	47b9                	li	a5,14
2040494e:	a8d1                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:487
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 8))) {
20404950:	fec42703          	lw	a4,-20(s0)
20404954:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
20404958:	00f71963          	bne	a4,a5,2040496a <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:487 (discriminator 1)
2040495c:	fe842703          	lw	a4,-24(s0)
20404960:	47a1                	li	a5,8
20404962:	00f71463          	bne	a4,a5,2040496a <__metal_driver_sifive_gpio0_interrupt_lines+0xf4>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:488
		return 15;
20404966:	47bd                	li	a5,15
20404968:	a86d                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:490
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 9))) {
2040496a:	fec42703          	lw	a4,-20(s0)
2040496e:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
20404972:	00f71963          	bne	a4,a5,20404984 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:490 (discriminator 1)
20404976:	fe842703          	lw	a4,-24(s0)
2040497a:	47a5                	li	a5,9
2040497c:	00f71463          	bne	a4,a5,20404984 <__metal_driver_sifive_gpio0_interrupt_lines+0x10e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:491
		return 16;
20404980:	47c1                	li	a5,16
20404982:	a045                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:493
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 10))) {
20404984:	fec42703          	lw	a4,-20(s0)
20404988:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
2040498c:	00f71963          	bne	a4,a5,2040499e <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:493 (discriminator 1)
20404990:	fe842703          	lw	a4,-24(s0)
20404994:	47a9                	li	a5,10
20404996:	00f71463          	bne	a4,a5,2040499e <__metal_driver_sifive_gpio0_interrupt_lines+0x128>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:494
		return 17;
2040499a:	47c5                	li	a5,17
2040499c:	a059                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:496
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 11))) {
2040499e:	fec42703          	lw	a4,-20(s0)
204049a2:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
204049a6:	00f71963          	bne	a4,a5,204049b8 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:496 (discriminator 1)
204049aa:	fe842703          	lw	a4,-24(s0)
204049ae:	47ad                	li	a5,11
204049b0:	00f71463          	bne	a4,a5,204049b8 <__metal_driver_sifive_gpio0_interrupt_lines+0x142>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:497
		return 18;
204049b4:	47c9                	li	a5,18
204049b6:	a0b5                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:499
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 12))) {
204049b8:	fec42703          	lw	a4,-20(s0)
204049bc:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
204049c0:	00f71963          	bne	a4,a5,204049d2 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:499 (discriminator 1)
204049c4:	fe842703          	lw	a4,-24(s0)
204049c8:	47b1                	li	a5,12
204049ca:	00f71463          	bne	a4,a5,204049d2 <__metal_driver_sifive_gpio0_interrupt_lines+0x15c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:500
		return 19;
204049ce:	47cd                	li	a5,19
204049d0:	a889                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:502
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 13))) {
204049d2:	fec42703          	lw	a4,-20(s0)
204049d6:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
204049da:	00f71963          	bne	a4,a5,204049ec <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:502 (discriminator 1)
204049de:	fe842703          	lw	a4,-24(s0)
204049e2:	47b5                	li	a5,13
204049e4:	00f71463          	bne	a4,a5,204049ec <__metal_driver_sifive_gpio0_interrupt_lines+0x176>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:503
		return 20;
204049e8:	47d1                	li	a5,20
204049ea:	a825                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:505
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 14))) {
204049ec:	fec42703          	lw	a4,-20(s0)
204049f0:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
204049f4:	00f71963          	bne	a4,a5,20404a06 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:505 (discriminator 1)
204049f8:	fe842703          	lw	a4,-24(s0)
204049fc:	47b9                	li	a5,14
204049fe:	00f71463          	bne	a4,a5,20404a06 <__metal_driver_sifive_gpio0_interrupt_lines+0x190>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:506
		return 21;
20404a02:	47d5                	li	a5,21
20404a04:	a839                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:508
	}
	else if ((((uintptr_t)gpio == (uintptr_t)&__metal_dt_gpio_10012000) && (idx == 15))) {
20404a06:	fec42703          	lw	a4,-20(s0)
20404a0a:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
20404a0e:	00f71963          	bne	a4,a5,20404a20 <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:508 (discriminator 1)
20404a12:	fe842703          	lw	a4,-24(s0)
20404a16:	47bd                	li	a5,15
20404a18:	00f71463          	bne	a4,a5,20404a20 <__metal_driver_sifive_gpio0_interrupt_lines+0x1aa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:509
		return 22;
20404a1c:	47d9                	li	a5,22
20404a1e:	a011                	j	20404a22 <__metal_driver_sifive_gpio0_interrupt_lines+0x1ac>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:512
	}
	else {
		return 0;
20404a20:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:514
	}
}
20404a22:	853e                	mv	a0,a5
20404a24:	4472                	lw	s0,28(sp)
20404a26:	6105                	addi	sp,sp,32
20404a28:	8082                	ret

20404a2a <__metal_driver_sifive_gpio0_enable_input>:
__metal_driver_sifive_gpio0_enable_input():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:13
#include <metal/drivers/sifive_gpio0.h>
#include <metal/io.h>
#include <metal/machine.h>

int __metal_driver_sifive_gpio0_enable_input(struct metal_gpio *ggpio,
                                             long source) {
20404a2a:	7179                	addi	sp,sp,-48
20404a2c:	d606                	sw	ra,44(sp)
20404a2e:	d422                	sw	s0,40(sp)
20404a30:	1800                	addi	s0,sp,48
20404a32:	fca42e23          	sw	a0,-36(s0)
20404a36:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:14
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a3a:	fdc42503          	lw	a0,-36(s0)
20404a3e:	33e5                	jal	20404826 <__metal_driver_sifive_gpio0_base>
20404a40:	87aa                	mv	a5,a0
20404a42:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:17

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN)) |= source;
20404a46:	fec42783          	lw	a5,-20(s0)
20404a4a:	0791                	addi	a5,a5,4
20404a4c:	4398                	lw	a4,0(a5)
20404a4e:	fd842783          	lw	a5,-40(s0)
20404a52:	fec42683          	lw	a3,-20(s0)
20404a56:	0691                	addi	a3,a3,4
20404a58:	8fd9                	or	a5,a5,a4
20404a5a:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:19

    return 0;
20404a5c:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:20
}
20404a5e:	853e                	mv	a0,a5
20404a60:	50b2                	lw	ra,44(sp)
20404a62:	5422                	lw	s0,40(sp)
20404a64:	6145                	addi	sp,sp,48
20404a66:	8082                	ret

20404a68 <__metal_driver_sifive_gpio0_disable_input>:
__metal_driver_sifive_gpio0_disable_input():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:23

int __metal_driver_sifive_gpio0_disable_input(struct metal_gpio *ggpio,
                                              long source) {
20404a68:	7179                	addi	sp,sp,-48
20404a6a:	d606                	sw	ra,44(sp)
20404a6c:	d422                	sw	s0,40(sp)
20404a6e:	1800                	addi	s0,sp,48
20404a70:	fca42e23          	sw	a0,-36(s0)
20404a74:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:24
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404a78:	fdc42503          	lw	a0,-36(s0)
20404a7c:	336d                	jal	20404826 <__metal_driver_sifive_gpio0_base>
20404a7e:	87aa                	mv	a5,a0
20404a80:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:27

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_INPUT_EN)) &= ~source;
20404a84:	fec42783          	lw	a5,-20(s0)
20404a88:	0791                	addi	a5,a5,4
20404a8a:	439c                	lw	a5,0(a5)
20404a8c:	fd842703          	lw	a4,-40(s0)
20404a90:	fff74713          	not	a4,a4
20404a94:	86ba                	mv	a3,a4
20404a96:	fec42703          	lw	a4,-20(s0)
20404a9a:	0711                	addi	a4,a4,4
20404a9c:	8ff5                	and	a5,a5,a3
20404a9e:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:29

    return 0;
20404aa0:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:30
}
20404aa2:	853e                	mv	a0,a5
20404aa4:	50b2                	lw	ra,44(sp)
20404aa6:	5422                	lw	s0,40(sp)
20404aa8:	6145                	addi	sp,sp,48
20404aaa:	8082                	ret

20404aac <__metal_driver_sifive_gpio0_input>:
__metal_driver_sifive_gpio0_input():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:32

long __metal_driver_sifive_gpio0_input(struct metal_gpio *ggpio) {
20404aac:	7179                	addi	sp,sp,-48
20404aae:	d606                	sw	ra,44(sp)
20404ab0:	d422                	sw	s0,40(sp)
20404ab2:	1800                	addi	s0,sp,48
20404ab4:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:33
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404ab8:	fdc42503          	lw	a0,-36(s0)
20404abc:	d6bff0ef          	jal	ra,20404826 <__metal_driver_sifive_gpio0_base>
20404ac0:	87aa                	mv	a5,a0
20404ac2:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:35

    return __METAL_ACCESS_ONCE(
20404ac6:	fec42783          	lw	a5,-20(s0)
20404aca:	439c                	lw	a5,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:37
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_VALUE));
}
20404acc:	853e                	mv	a0,a5
20404ace:	50b2                	lw	ra,44(sp)
20404ad0:	5422                	lw	s0,40(sp)
20404ad2:	6145                	addi	sp,sp,48
20404ad4:	8082                	ret

20404ad6 <__metal_driver_sifive_gpio0_output>:
__metal_driver_sifive_gpio0_output():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:39

long __metal_driver_sifive_gpio0_output(struct metal_gpio *ggpio) {
20404ad6:	7179                	addi	sp,sp,-48
20404ad8:	d606                	sw	ra,44(sp)
20404ada:	d422                	sw	s0,40(sp)
20404adc:	1800                	addi	s0,sp,48
20404ade:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:40
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404ae2:	fdc42503          	lw	a0,-36(s0)
20404ae6:	d41ff0ef          	jal	ra,20404826 <__metal_driver_sifive_gpio0_base>
20404aea:	87aa                	mv	a5,a0
20404aec:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:42

    return __METAL_ACCESS_ONCE(
20404af0:	fec42783          	lw	a5,-20(s0)
20404af4:	07b1                	addi	a5,a5,12
20404af6:	439c                	lw	a5,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:44
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT));
}
20404af8:	853e                	mv	a0,a5
20404afa:	50b2                	lw	ra,44(sp)
20404afc:	5422                	lw	s0,40(sp)
20404afe:	6145                	addi	sp,sp,48
20404b00:	8082                	ret

20404b02 <__metal_driver_sifive_gpio0_disable_output>:
__metal_driver_sifive_gpio0_disable_output():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:47

int __metal_driver_sifive_gpio0_disable_output(struct metal_gpio *ggpio,
                                               long source) {
20404b02:	7179                	addi	sp,sp,-48
20404b04:	d606                	sw	ra,44(sp)
20404b06:	d422                	sw	s0,40(sp)
20404b08:	1800                	addi	s0,sp,48
20404b0a:	fca42e23          	sw	a0,-36(s0)
20404b0e:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:48
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b12:	fdc42503          	lw	a0,-36(s0)
20404b16:	d11ff0ef          	jal	ra,20404826 <__metal_driver_sifive_gpio0_base>
20404b1a:	87aa                	mv	a5,a0
20404b1c:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:51

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN)) &= ~source;
20404b20:	fec42783          	lw	a5,-20(s0)
20404b24:	07a1                	addi	a5,a5,8
20404b26:	439c                	lw	a5,0(a5)
20404b28:	fd842703          	lw	a4,-40(s0)
20404b2c:	fff74713          	not	a4,a4
20404b30:	86ba                	mv	a3,a4
20404b32:	fec42703          	lw	a4,-20(s0)
20404b36:	0721                	addi	a4,a4,8
20404b38:	8ff5                	and	a5,a5,a3
20404b3a:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:53

    return 0;
20404b3c:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:54
}
20404b3e:	853e                	mv	a0,a5
20404b40:	50b2                	lw	ra,44(sp)
20404b42:	5422                	lw	s0,40(sp)
20404b44:	6145                	addi	sp,sp,48
20404b46:	8082                	ret

20404b48 <__metal_driver_sifive_gpio0_enable_output>:
__metal_driver_sifive_gpio0_enable_output():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:57

int __metal_driver_sifive_gpio0_enable_output(struct metal_gpio *ggpio,
                                              long source) {
20404b48:	7179                	addi	sp,sp,-48
20404b4a:	d606                	sw	ra,44(sp)
20404b4c:	d422                	sw	s0,40(sp)
20404b4e:	1800                	addi	s0,sp,48
20404b50:	fca42e23          	sw	a0,-36(s0)
20404b54:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:58
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b58:	fdc42503          	lw	a0,-36(s0)
20404b5c:	ccbff0ef          	jal	ra,20404826 <__metal_driver_sifive_gpio0_base>
20404b60:	87aa                	mv	a5,a0
20404b62:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:61

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_OUTPUT_EN)) |= source;
20404b66:	fec42783          	lw	a5,-20(s0)
20404b6a:	07a1                	addi	a5,a5,8
20404b6c:	4398                	lw	a4,0(a5)
20404b6e:	fd842783          	lw	a5,-40(s0)
20404b72:	fec42683          	lw	a3,-20(s0)
20404b76:	06a1                	addi	a3,a3,8
20404b78:	8fd9                	or	a5,a5,a4
20404b7a:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:63

    return 0;
20404b7c:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:64
}
20404b7e:	853e                	mv	a0,a5
20404b80:	50b2                	lw	ra,44(sp)
20404b82:	5422                	lw	s0,40(sp)
20404b84:	6145                	addi	sp,sp,48
20404b86:	8082                	ret

20404b88 <__metal_driver_sifive_gpio0_output_set>:
__metal_driver_sifive_gpio0_output_set():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:67

int __metal_driver_sifive_gpio0_output_set(struct metal_gpio *ggpio,
                                           long value) {
20404b88:	7179                	addi	sp,sp,-48
20404b8a:	d606                	sw	ra,44(sp)
20404b8c:	d422                	sw	s0,40(sp)
20404b8e:	1800                	addi	s0,sp,48
20404b90:	fca42e23          	sw	a0,-36(s0)
20404b94:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:68
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404b98:	fdc42503          	lw	a0,-36(s0)
20404b9c:	c8bff0ef          	jal	ra,20404826 <__metal_driver_sifive_gpio0_base>
20404ba0:	87aa                	mv	a5,a0
20404ba2:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:70

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) |=
20404ba6:	fec42783          	lw	a5,-20(s0)
20404baa:	07b1                	addi	a5,a5,12
20404bac:	4398                	lw	a4,0(a5)
20404bae:	fd842783          	lw	a5,-40(s0)
20404bb2:	fec42683          	lw	a3,-20(s0)
20404bb6:	06b1                	addi	a3,a3,12
20404bb8:	8fd9                	or	a5,a5,a4
20404bba:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:73
        value;

    return 0;
20404bbc:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:74
}
20404bbe:	853e                	mv	a0,a5
20404bc0:	50b2                	lw	ra,44(sp)
20404bc2:	5422                	lw	s0,40(sp)
20404bc4:	6145                	addi	sp,sp,48
20404bc6:	8082                	ret

20404bc8 <__metal_driver_sifive_gpio0_output_clear>:
__metal_driver_sifive_gpio0_output_clear():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:77

int __metal_driver_sifive_gpio0_output_clear(struct metal_gpio *ggpio,
                                             long value) {
20404bc8:	7179                	addi	sp,sp,-48
20404bca:	d606                	sw	ra,44(sp)
20404bcc:	d422                	sw	s0,40(sp)
20404bce:	1800                	addi	s0,sp,48
20404bd0:	fca42e23          	sw	a0,-36(s0)
20404bd4:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:78
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404bd8:	fdc42503          	lw	a0,-36(s0)
20404bdc:	c4bff0ef          	jal	ra,20404826 <__metal_driver_sifive_gpio0_base>
20404be0:	87aa                	mv	a5,a0
20404be2:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:80

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &=
20404be6:	fec42783          	lw	a5,-20(s0)
20404bea:	07b1                	addi	a5,a5,12
20404bec:	439c                	lw	a5,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:81
        ~value;
20404bee:	fd842703          	lw	a4,-40(s0)
20404bf2:	fff74713          	not	a4,a4
20404bf6:	86ba                	mv	a3,a4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:80
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) &=
20404bf8:	fec42703          	lw	a4,-20(s0)
20404bfc:	0731                	addi	a4,a4,12
20404bfe:	8ff5                	and	a5,a5,a3
20404c00:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:83

    return 0;
20404c02:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:84
}
20404c04:	853e                	mv	a0,a5
20404c06:	50b2                	lw	ra,44(sp)
20404c08:	5422                	lw	s0,40(sp)
20404c0a:	6145                	addi	sp,sp,48
20404c0c:	8082                	ret

20404c0e <__metal_driver_sifive_gpio0_output_toggle>:
__metal_driver_sifive_gpio0_output_toggle():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:87

int __metal_driver_sifive_gpio0_output_toggle(struct metal_gpio *ggpio,
                                              long value) {
20404c0e:	7179                	addi	sp,sp,-48
20404c10:	d606                	sw	ra,44(sp)
20404c12:	d422                	sw	s0,40(sp)
20404c14:	1800                	addi	s0,sp,48
20404c16:	fca42e23          	sw	a0,-36(s0)
20404c1a:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:88
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404c1e:	fdc42503          	lw	a0,-36(s0)
20404c22:	c05ff0ef          	jal	ra,20404826 <__metal_driver_sifive_gpio0_base>
20404c26:	87aa                	mv	a5,a0
20404c28:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:91

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
        __METAL_ACCESS_ONCE(
20404c2c:	fec42783          	lw	a5,-20(s0)
20404c30:	07b1                	addi	a5,a5,12
20404c32:	4398                	lw	a4,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^
20404c34:	fd842783          	lw	a5,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:90
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404c38:	fec42683          	lw	a3,-20(s0)
20404c3c:	06b1                	addi	a3,a3,12
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:92
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) ^
20404c3e:	8fb9                	xor	a5,a5,a4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:90
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_PORT)) =
20404c40:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:95
        value;

    return 0;
20404c42:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:96
}
20404c44:	853e                	mv	a0,a5
20404c46:	50b2                	lw	ra,44(sp)
20404c48:	5422                	lw	s0,40(sp)
20404c4a:	6145                	addi	sp,sp,48
20404c4c:	8082                	ret

20404c4e <__metal_driver_sifive_gpio0_enable_io>:
__metal_driver_sifive_gpio0_enable_io():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:99

int __metal_driver_sifive_gpio0_enable_io(struct metal_gpio *ggpio, long source,
                                          long dest) {
20404c4e:	7179                	addi	sp,sp,-48
20404c50:	d606                	sw	ra,44(sp)
20404c52:	d422                	sw	s0,40(sp)
20404c54:	1800                	addi	s0,sp,48
20404c56:	fca42e23          	sw	a0,-36(s0)
20404c5a:	fcb42c23          	sw	a1,-40(s0)
20404c5e:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:100
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404c62:	fdc42503          	lw	a0,-36(s0)
20404c66:	bc1ff0ef          	jal	ra,20404826 <__metal_driver_sifive_gpio0_base>
20404c6a:	87aa                	mv	a5,a0
20404c6c:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:103

    __METAL_ACCESS_ONCE(
        (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_SEL)) |= source;
20404c70:	fec42783          	lw	a5,-20(s0)
20404c74:	03c78793          	addi	a5,a5,60
20404c78:	4398                	lw	a4,0(a5)
20404c7a:	fd842783          	lw	a5,-40(s0)
20404c7e:	fec42683          	lw	a3,-20(s0)
20404c82:	03c68693          	addi	a3,a3,60
20404c86:	8fd9                	or	a5,a5,a4
20404c88:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:104
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) |=
20404c8a:	fec42783          	lw	a5,-20(s0)
20404c8e:	03878793          	addi	a5,a5,56
20404c92:	4398                	lw	a4,0(a5)
20404c94:	fd442783          	lw	a5,-44(s0)
20404c98:	fec42683          	lw	a3,-20(s0)
20404c9c:	03868693          	addi	a3,a3,56
20404ca0:	8fd9                	or	a5,a5,a4
20404ca2:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:107
        dest;

    return 0;
20404ca4:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:108
}
20404ca6:	853e                	mv	a0,a5
20404ca8:	50b2                	lw	ra,44(sp)
20404caa:	5422                	lw	s0,40(sp)
20404cac:	6145                	addi	sp,sp,48
20404cae:	8082                	ret

20404cb0 <__metal_driver_sifive_gpio0_disable_io>:
__metal_driver_sifive_gpio0_disable_io():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:111

int __metal_driver_sifive_gpio0_disable_io(struct metal_gpio *ggpio,
                                           long source) {
20404cb0:	7179                	addi	sp,sp,-48
20404cb2:	d606                	sw	ra,44(sp)
20404cb4:	d422                	sw	s0,40(sp)
20404cb6:	1800                	addi	s0,sp,48
20404cb8:	fca42e23          	sw	a0,-36(s0)
20404cbc:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:112
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404cc0:	fdc42503          	lw	a0,-36(s0)
20404cc4:	b63ff0ef          	jal	ra,20404826 <__metal_driver_sifive_gpio0_base>
20404cc8:	87aa                	mv	a5,a0
20404cca:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114

    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) &=
20404cce:	fec42783          	lw	a5,-20(s0)
20404cd2:	03878793          	addi	a5,a5,56
20404cd6:	439c                	lw	a5,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:115
        ~source;
20404cd8:	fd842703          	lw	a4,-40(s0)
20404cdc:	fff74713          	not	a4,a4
20404ce0:	86ba                	mv	a3,a4
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:114
    __METAL_ACCESS_ONCE((__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_IOF_EN)) &=
20404ce2:	fec42703          	lw	a4,-20(s0)
20404ce6:	03870713          	addi	a4,a4,56
20404cea:	8ff5                	and	a5,a5,a3
20404cec:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:117

    return 0;
20404cee:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:118
}
20404cf0:	853e                	mv	a0,a5
20404cf2:	50b2                	lw	ra,44(sp)
20404cf4:	5422                	lw	s0,40(sp)
20404cf6:	6145                	addi	sp,sp,48
20404cf8:	8082                	ret

20404cfa <__metal_driver_sifive_gpio0_config_int>:
__metal_driver_sifive_gpio0_config_int():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:121

int __metal_driver_sifive_gpio0_config_int(struct metal_gpio *ggpio,
                                           long source, int intr_type) {
20404cfa:	7179                	addi	sp,sp,-48
20404cfc:	d606                	sw	ra,44(sp)
20404cfe:	d422                	sw	s0,40(sp)
20404d00:	1800                	addi	s0,sp,48
20404d02:	fca42e23          	sw	a0,-36(s0)
20404d06:	fcb42c23          	sw	a1,-40(s0)
20404d0a:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:122
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404d0e:	fdc42503          	lw	a0,-36(s0)
20404d12:	b15ff0ef          	jal	ra,20404826 <__metal_driver_sifive_gpio0_base>
20404d16:	87aa                	mv	a5,a0
20404d18:	fef42623          	sw	a5,-20(s0)
20404d1c:	fd442703          	lw	a4,-44(s0)
20404d20:	479d                	li	a5,7
20404d22:	1ce7e963          	bltu	a5,a4,20404ef4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
20404d26:	fd442783          	lw	a5,-44(s0)
20404d2a:	00279713          	slli	a4,a5,0x2
20404d2e:	204017b7          	lui	a5,0x20401
20404d32:	86078793          	addi	a5,a5,-1952 # 20400860 <__metal_driver_vtable_riscv_plic0+0x64>
20404d36:	97ba                	add	a5,a5,a4
20404d38:	439c                	lw	a5,0(a5)
20404d3a:	8782                	jr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:127

    switch (intr_type) {
    case METAL_GPIO_INT_DISABLE:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) &= ~source;
20404d3c:	fec42783          	lw	a5,-20(s0)
20404d40:	07e1                	addi	a5,a5,24
20404d42:	439c                	lw	a5,0(a5)
20404d44:	fd842703          	lw	a4,-40(s0)
20404d48:	fff74713          	not	a4,a4
20404d4c:	86ba                	mv	a3,a4
20404d4e:	fec42703          	lw	a4,-20(s0)
20404d52:	0761                	addi	a4,a4,24
20404d54:	8ff5                	and	a5,a5,a3
20404d56:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:129
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) &= ~source;
20404d58:	fec42783          	lw	a5,-20(s0)
20404d5c:	02078793          	addi	a5,a5,32
20404d60:	439c                	lw	a5,0(a5)
20404d62:	fd842703          	lw	a4,-40(s0)
20404d66:	fff74713          	not	a4,a4
20404d6a:	86ba                	mv	a3,a4
20404d6c:	fec42703          	lw	a4,-20(s0)
20404d70:	02070713          	addi	a4,a4,32
20404d74:	8ff5                	and	a5,a5,a3
20404d76:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:131
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) &= ~source;
20404d78:	fec42783          	lw	a5,-20(s0)
20404d7c:	02878793          	addi	a5,a5,40
20404d80:	439c                	lw	a5,0(a5)
20404d82:	fd842703          	lw	a4,-40(s0)
20404d86:	fff74713          	not	a4,a4
20404d8a:	86ba                	mv	a3,a4
20404d8c:	fec42703          	lw	a4,-20(s0)
20404d90:	02870713          	addi	a4,a4,40
20404d94:	8ff5                	and	a5,a5,a3
20404d96:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:133
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) &= ~source;
20404d98:	fec42783          	lw	a5,-20(s0)
20404d9c:	03078793          	addi	a5,a5,48
20404da0:	439c                	lw	a5,0(a5)
20404da2:	fd842703          	lw	a4,-40(s0)
20404da6:	fff74713          	not	a4,a4
20404daa:	86ba                	mv	a3,a4
20404dac:	fec42703          	lw	a4,-20(s0)
20404db0:	03070713          	addi	a4,a4,48
20404db4:	8ff5                	and	a5,a5,a3
20404db6:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:134
        break;
20404db8:	aa35                	j	20404ef4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:137
    case METAL_GPIO_INT_RISING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
20404dba:	fec42783          	lw	a5,-20(s0)
20404dbe:	07e1                	addi	a5,a5,24
20404dc0:	4398                	lw	a4,0(a5)
20404dc2:	fd842783          	lw	a5,-40(s0)
20404dc6:	fec42683          	lw	a3,-20(s0)
20404dca:	06e1                	addi	a3,a3,24
20404dcc:	8fd9                	or	a5,a5,a4
20404dce:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:138
        break;
20404dd0:	a215                	j	20404ef4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:141
    case METAL_GPIO_INT_FALLING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
20404dd2:	fec42783          	lw	a5,-20(s0)
20404dd6:	02078793          	addi	a5,a5,32
20404dda:	4398                	lw	a4,0(a5)
20404ddc:	fd842783          	lw	a5,-40(s0)
20404de0:	fec42683          	lw	a3,-20(s0)
20404de4:	02068693          	addi	a3,a3,32
20404de8:	8fd9                	or	a5,a5,a4
20404dea:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:142
        break;
20404dec:	a221                	j	20404ef4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:145
    case METAL_GPIO_INT_BOTH_EDGE:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
20404dee:	fec42783          	lw	a5,-20(s0)
20404df2:	07e1                	addi	a5,a5,24
20404df4:	4398                	lw	a4,0(a5)
20404df6:	fd842783          	lw	a5,-40(s0)
20404dfa:	fec42683          	lw	a3,-20(s0)
20404dfe:	06e1                	addi	a3,a3,24
20404e00:	8fd9                	or	a5,a5,a4
20404e02:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:147
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
20404e04:	fec42783          	lw	a5,-20(s0)
20404e08:	02078793          	addi	a5,a5,32
20404e0c:	4398                	lw	a4,0(a5)
20404e0e:	fd842783          	lw	a5,-40(s0)
20404e12:	fec42683          	lw	a3,-20(s0)
20404e16:	02068693          	addi	a3,a3,32
20404e1a:	8fd9                	or	a5,a5,a4
20404e1c:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:148
        break;
20404e1e:	a8d9                	j	20404ef4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:151
    case METAL_GPIO_INT_HIGH:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
20404e20:	fec42783          	lw	a5,-20(s0)
20404e24:	02878793          	addi	a5,a5,40
20404e28:	4398                	lw	a4,0(a5)
20404e2a:	fd842783          	lw	a5,-40(s0)
20404e2e:	fec42683          	lw	a3,-20(s0)
20404e32:	02868693          	addi	a3,a3,40
20404e36:	8fd9                	or	a5,a5,a4
20404e38:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:152
        break;
20404e3a:	a86d                	j	20404ef4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:155
    case METAL_GPIO_INT_LOW:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) |= source;
20404e3c:	fec42783          	lw	a5,-20(s0)
20404e40:	03078793          	addi	a5,a5,48
20404e44:	4398                	lw	a4,0(a5)
20404e46:	fd842783          	lw	a5,-40(s0)
20404e4a:	fec42683          	lw	a3,-20(s0)
20404e4e:	03068693          	addi	a3,a3,48
20404e52:	8fd9                	or	a5,a5,a4
20404e54:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:156
        break;
20404e56:	a879                	j	20404ef4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:159
    case METAL_GPIO_INT_BOTH_LEVEL:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
20404e58:	fec42783          	lw	a5,-20(s0)
20404e5c:	02878793          	addi	a5,a5,40
20404e60:	4398                	lw	a4,0(a5)
20404e62:	fd842783          	lw	a5,-40(s0)
20404e66:	fec42683          	lw	a3,-20(s0)
20404e6a:	02868693          	addi	a3,a3,40
20404e6e:	8fd9                	or	a5,a5,a4
20404e70:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:161
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) |= source;
20404e72:	fec42783          	lw	a5,-20(s0)
20404e76:	03078793          	addi	a5,a5,48
20404e7a:	4398                	lw	a4,0(a5)
20404e7c:	fd842783          	lw	a5,-40(s0)
20404e80:	fec42683          	lw	a3,-20(s0)
20404e84:	03068693          	addi	a3,a3,48
20404e88:	8fd9                	or	a5,a5,a4
20404e8a:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:162
        break;
20404e8c:	a0a5                	j	20404ef4 <__metal_driver_sifive_gpio0_config_int+0x1fa>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:165
    case METAL_GPIO_INT_MAX:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IE)) |= source;
20404e8e:	fec42783          	lw	a5,-20(s0)
20404e92:	07e1                	addi	a5,a5,24
20404e94:	4398                	lw	a4,0(a5)
20404e96:	fd842783          	lw	a5,-40(s0)
20404e9a:	fec42683          	lw	a3,-20(s0)
20404e9e:	06e1                	addi	a3,a3,24
20404ea0:	8fd9                	or	a5,a5,a4
20404ea2:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:167
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IE)) |= source;
20404ea4:	fec42783          	lw	a5,-20(s0)
20404ea8:	02078793          	addi	a5,a5,32
20404eac:	4398                	lw	a4,0(a5)
20404eae:	fd842783          	lw	a5,-40(s0)
20404eb2:	fec42683          	lw	a3,-20(s0)
20404eb6:	02068693          	addi	a3,a3,32
20404eba:	8fd9                	or	a5,a5,a4
20404ebc:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:169
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IE)) |= source;
20404ebe:	fec42783          	lw	a5,-20(s0)
20404ec2:	02878793          	addi	a5,a5,40
20404ec6:	4398                	lw	a4,0(a5)
20404ec8:	fd842783          	lw	a5,-40(s0)
20404ecc:	fec42683          	lw	a3,-20(s0)
20404ed0:	02868693          	addi	a3,a3,40
20404ed4:	8fd9                	or	a5,a5,a4
20404ed6:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:171
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IE)) |= source;
20404ed8:	fec42783          	lw	a5,-20(s0)
20404edc:	03078793          	addi	a5,a5,48
20404ee0:	4398                	lw	a4,0(a5)
20404ee2:	fd842783          	lw	a5,-40(s0)
20404ee6:	fec42683          	lw	a3,-20(s0)
20404eea:	03068693          	addi	a3,a3,48
20404eee:	8fd9                	or	a5,a5,a4
20404ef0:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:172
        break;
20404ef2:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:174
    }
    return 0;
20404ef4:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:175
}
20404ef6:	853e                	mv	a0,a5
20404ef8:	50b2                	lw	ra,44(sp)
20404efa:	5422                	lw	s0,40(sp)
20404efc:	6145                	addi	sp,sp,48
20404efe:	8082                	ret

20404f00 <__metal_driver_sifive_gpio0_clear_int>:
__metal_driver_sifive_gpio0_clear_int():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:178

int __metal_driver_sifive_gpio0_clear_int(struct metal_gpio *ggpio, long source,
                                          int intr_type) {
20404f00:	7179                	addi	sp,sp,-48
20404f02:	d606                	sw	ra,44(sp)
20404f04:	d422                	sw	s0,40(sp)
20404f06:	1800                	addi	s0,sp,48
20404f08:	fca42e23          	sw	a0,-36(s0)
20404f0c:	fcb42c23          	sw	a1,-40(s0)
20404f10:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:179
    long base = __metal_driver_sifive_gpio0_base(ggpio);
20404f14:	fdc42503          	lw	a0,-36(s0)
20404f18:	90fff0ef          	jal	ra,20404826 <__metal_driver_sifive_gpio0_base>
20404f1c:	87aa                	mv	a5,a0
20404f1e:	fef42623          	sw	a5,-20(s0)
20404f22:	fd442703          	lw	a4,-44(s0)
20404f26:	479d                	li	a5,7
20404f28:	14e7ea63          	bltu	a5,a4,2040507c <__metal_driver_sifive_gpio0_clear_int+0x17c>
20404f2c:	fd442783          	lw	a5,-44(s0)
20404f30:	00279713          	slli	a4,a5,0x2
20404f34:	204017b7          	lui	a5,0x20401
20404f38:	88078793          	addi	a5,a5,-1920 # 20400880 <__metal_driver_vtable_riscv_plic0+0x84>
20404f3c:	97ba                	add	a5,a5,a4
20404f3e:	439c                	lw	a5,0(a5)
20404f40:	8782                	jr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:184

    switch (intr_type) {
    case METAL_GPIO_INT_RISING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
20404f42:	fec42783          	lw	a5,-20(s0)
20404f46:	07f1                	addi	a5,a5,28
20404f48:	4398                	lw	a4,0(a5)
20404f4a:	fd842783          	lw	a5,-40(s0)
20404f4e:	fec42683          	lw	a3,-20(s0)
20404f52:	06f1                	addi	a3,a3,28
20404f54:	8fd9                	or	a5,a5,a4
20404f56:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:185
        break;
20404f58:	a215                	j	2040507c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:188
    case METAL_GPIO_INT_FALLING:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP)) |= source;
20404f5a:	fec42783          	lw	a5,-20(s0)
20404f5e:	02478793          	addi	a5,a5,36
20404f62:	4398                	lw	a4,0(a5)
20404f64:	fd842783          	lw	a5,-40(s0)
20404f68:	fec42683          	lw	a3,-20(s0)
20404f6c:	02468693          	addi	a3,a3,36
20404f70:	8fd9                	or	a5,a5,a4
20404f72:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:189
        break;
20404f74:	a221                	j	2040507c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:192
    case METAL_GPIO_INT_BOTH_EDGE:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
20404f76:	fec42783          	lw	a5,-20(s0)
20404f7a:	07f1                	addi	a5,a5,28
20404f7c:	4398                	lw	a4,0(a5)
20404f7e:	fd842783          	lw	a5,-40(s0)
20404f82:	fec42683          	lw	a3,-20(s0)
20404f86:	06f1                	addi	a3,a3,28
20404f88:	8fd9                	or	a5,a5,a4
20404f8a:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:194
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP)) |= source;
20404f8c:	fec42783          	lw	a5,-20(s0)
20404f90:	02478793          	addi	a5,a5,36
20404f94:	4398                	lw	a4,0(a5)
20404f96:	fd842783          	lw	a5,-40(s0)
20404f9a:	fec42683          	lw	a3,-20(s0)
20404f9e:	02468693          	addi	a3,a3,36
20404fa2:	8fd9                	or	a5,a5,a4
20404fa4:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:195
        break;
20404fa6:	a8d9                	j	2040507c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:198
    case METAL_GPIO_INT_HIGH:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP)) |= source;
20404fa8:	fec42783          	lw	a5,-20(s0)
20404fac:	02c78793          	addi	a5,a5,44
20404fb0:	4398                	lw	a4,0(a5)
20404fb2:	fd842783          	lw	a5,-40(s0)
20404fb6:	fec42683          	lw	a3,-20(s0)
20404fba:	02c68693          	addi	a3,a3,44
20404fbe:	8fd9                	or	a5,a5,a4
20404fc0:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:199
        break;
20404fc2:	a86d                	j	2040507c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:202
    case METAL_GPIO_INT_LOW:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP)) |= source;
20404fc4:	fec42783          	lw	a5,-20(s0)
20404fc8:	03478793          	addi	a5,a5,52
20404fcc:	4398                	lw	a4,0(a5)
20404fce:	fd842783          	lw	a5,-40(s0)
20404fd2:	fec42683          	lw	a3,-20(s0)
20404fd6:	03468693          	addi	a3,a3,52
20404fda:	8fd9                	or	a5,a5,a4
20404fdc:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:203
        break;
20404fde:	a879                	j	2040507c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:206
    case METAL_GPIO_INT_BOTH_LEVEL:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP)) |= source;
20404fe0:	fec42783          	lw	a5,-20(s0)
20404fe4:	02c78793          	addi	a5,a5,44
20404fe8:	4398                	lw	a4,0(a5)
20404fea:	fd842783          	lw	a5,-40(s0)
20404fee:	fec42683          	lw	a3,-20(s0)
20404ff2:	02c68693          	addi	a3,a3,44
20404ff6:	8fd9                	or	a5,a5,a4
20404ff8:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:208
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP)) |= source;
20404ffa:	fec42783          	lw	a5,-20(s0)
20404ffe:	03478793          	addi	a5,a5,52
20405002:	4398                	lw	a4,0(a5)
20405004:	fd842783          	lw	a5,-40(s0)
20405008:	fec42683          	lw	a3,-20(s0)
2040500c:	03468693          	addi	a3,a3,52
20405010:	8fd9                	or	a5,a5,a4
20405012:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:209
        break;
20405014:	a0a5                	j	2040507c <__metal_driver_sifive_gpio0_clear_int+0x17c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:212
    case METAL_GPIO_INT_MAX:
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_RISE_IP)) |= source;
20405016:	fec42783          	lw	a5,-20(s0)
2040501a:	07f1                	addi	a5,a5,28
2040501c:	4398                	lw	a4,0(a5)
2040501e:	fd842783          	lw	a5,-40(s0)
20405022:	fec42683          	lw	a3,-20(s0)
20405026:	06f1                	addi	a3,a3,28
20405028:	8fd9                	or	a5,a5,a4
2040502a:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:214
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_FALL_IP)) |= source;
2040502c:	fec42783          	lw	a5,-20(s0)
20405030:	02478793          	addi	a5,a5,36
20405034:	4398                	lw	a4,0(a5)
20405036:	fd842783          	lw	a5,-40(s0)
2040503a:	fec42683          	lw	a3,-20(s0)
2040503e:	02468693          	addi	a3,a3,36
20405042:	8fd9                	or	a5,a5,a4
20405044:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:216
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_HIGH_IP)) |= source;
20405046:	fec42783          	lw	a5,-20(s0)
2040504a:	02c78793          	addi	a5,a5,44
2040504e:	4398                	lw	a4,0(a5)
20405050:	fd842783          	lw	a5,-40(s0)
20405054:	fec42683          	lw	a3,-20(s0)
20405058:	02c68693          	addi	a3,a3,44
2040505c:	8fd9                	or	a5,a5,a4
2040505e:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:218
        __METAL_ACCESS_ONCE(
            (__metal_io_u32 *)(base + METAL_SIFIVE_GPIO0_LOW_IP)) |= source;
20405060:	fec42783          	lw	a5,-20(s0)
20405064:	03478793          	addi	a5,a5,52
20405068:	4398                	lw	a4,0(a5)
2040506a:	fd842783          	lw	a5,-40(s0)
2040506e:	fec42683          	lw	a3,-20(s0)
20405072:	03468693          	addi	a3,a3,52
20405076:	8fd9                	or	a5,a5,a4
20405078:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:219
        break;
2040507a:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:221
    }
    return 0;
2040507c:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:222
}
2040507e:	853e                	mv	a0,a5
20405080:	50b2                	lw	ra,44(sp)
20405082:	5422                	lw	s0,40(sp)
20405084:	6145                	addi	sp,sp,48
20405086:	8082                	ret

20405088 <__metal_driver_gpio_interrupt_controller>:
__metal_driver_gpio_interrupt_controller():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:225

struct metal_interrupt *
__metal_driver_gpio_interrupt_controller(struct metal_gpio *gpio) {
20405088:	1101                	addi	sp,sp,-32
2040508a:	ce06                	sw	ra,28(sp)
2040508c:	cc22                	sw	s0,24(sp)
2040508e:	1000                	addi	s0,sp,32
20405090:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:226
    return __metal_driver_sifive_gpio0_interrupt_parent(gpio);
20405094:	fec42503          	lw	a0,-20(s0)
20405098:	fb4ff0ef          	jal	ra,2040484c <__metal_driver_sifive_gpio0_interrupt_parent>
2040509c:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:227
}
2040509e:	853e                	mv	a0,a5
204050a0:	40f2                	lw	ra,28(sp)
204050a2:	4462                	lw	s0,24(sp)
204050a4:	6105                	addi	sp,sp,32
204050a6:	8082                	ret

204050a8 <__metal_driver_gpio_get_interrupt_id>:
__metal_driver_gpio_get_interrupt_id():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:229

int __metal_driver_gpio_get_interrupt_id(struct metal_gpio *gpio, int pin) {
204050a8:	7179                	addi	sp,sp,-48
204050aa:	d606                	sw	ra,44(sp)
204050ac:	d422                	sw	s0,40(sp)
204050ae:	1800                	addi	s0,sp,48
204050b0:	fca42e23          	sw	a0,-36(s0)
204050b4:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:231
    int irq;
    irq = __metal_driver_sifive_gpio0_interrupt_lines(gpio, pin);
204050b8:	fd842583          	lw	a1,-40(s0)
204050bc:	fdc42503          	lw	a0,-36(s0)
204050c0:	fb6ff0ef          	jal	ra,20404876 <__metal_driver_sifive_gpio0_interrupt_lines>
204050c4:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:232
    return irq;
204050c8:	fec42783          	lw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_gpio0.c:233
}
204050cc:	853e                	mv	a0,a5
204050ce:	50b2                	lw	ra,44(sp)
204050d0:	5422                	lw	s0,40(sp)
204050d2:	6145                	addi	sp,sp,48
204050d4:	8082                	ret

204050d6 <__metal_driver_sifive_uart0_control_base>:
__metal_driver_sifive_uart0_control_base():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:718

/* --------------------- sifive_trace ------------ */

/* --------------------- sifive_uart0 ------------ */
static __inline__ unsigned long __metal_driver_sifive_uart0_control_base(struct metal_uart *uart)
{
204050d6:	1101                	addi	sp,sp,-32
204050d8:	ce22                	sw	s0,28(sp)
204050da:	1000                	addi	s0,sp,32
204050dc:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:719
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204050e0:	fec42703          	lw	a4,-20(s0)
204050e4:	800007b7          	lui	a5,0x80000
204050e8:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2c0>
204050ec:	00f71563          	bne	a4,a5,204050f6 <__metal_driver_sifive_uart0_control_base+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:720
		return METAL_SIFIVE_UART0_10013000_BASE_ADDRESS;
204050f0:	100137b7          	lui	a5,0x10013
204050f4:	a011                	j	204050f8 <__metal_driver_sifive_uart0_control_base+0x22>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:723
	}
	else {
		return 0;
204050f6:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:725
	}
}
204050f8:	853e                	mv	a0,a5
204050fa:	4472                	lw	s0,28(sp)
204050fc:	6105                	addi	sp,sp,32
204050fe:	8082                	ret

20405100 <__metal_driver_sifive_uart0_interrupt_parent>:
__metal_driver_sifive_uart0_interrupt_parent():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:748
		return 0;
	}
}

static __inline__ struct metal_interrupt * __metal_driver_sifive_uart0_interrupt_parent(struct metal_uart *uart)
{
20405100:	1101                	addi	sp,sp,-32
20405102:	ce22                	sw	s0,28(sp)
20405104:	1000                	addi	s0,sp,32
20405106:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:749
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040510a:	fec42703          	lw	a4,-20(s0)
2040510e:	800007b7          	lui	a5,0x80000
20405112:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2c0>
20405116:	00f71763          	bne	a4,a5,20405124 <__metal_driver_sifive_uart0_interrupt_parent+0x24>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:750
		return (struct metal_interrupt *)&__metal_dt_interrupt_controller_c000000.controller;
2040511a:	800007b7          	lui	a5,0x80000
2040511e:	44078793          	addi	a5,a5,1088 # 80000440 <metal_segment_heap_target_end+0xffffefc0>
20405122:	a011                	j	20405126 <__metal_driver_sifive_uart0_interrupt_parent+0x26>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:753
	}
	else {
		return 0;
20405124:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:755
	}
}
20405126:	853e                	mv	a0,a5
20405128:	4472                	lw	s0,28(sp)
2040512a:	6105                	addi	sp,sp,32
2040512c:	8082                	ret

2040512e <__metal_driver_sifive_uart0_interrupt_line>:
__metal_driver_sifive_uart0_interrupt_line():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:758

static __inline__ int __metal_driver_sifive_uart0_interrupt_line(struct metal_uart *uart)
{
2040512e:	1101                	addi	sp,sp,-32
20405130:	ce22                	sw	s0,28(sp)
20405132:	1000                	addi	s0,sp,32
20405134:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:759
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405138:	fec42703          	lw	a4,-20(s0)
2040513c:	800007b7          	lui	a5,0x80000
20405140:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2c0>
20405144:	00f71463          	bne	a4,a5,2040514c <__metal_driver_sifive_uart0_interrupt_line+0x1e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:760
		return 5;
20405148:	4795                	li	a5,5
2040514a:	a011                	j	2040514e <__metal_driver_sifive_uart0_interrupt_line+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:763
	}
	else {
		return 0;
2040514c:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:765
	}
}
2040514e:	853e                	mv	a0,a5
20405150:	4472                	lw	s0,28(sp)
20405152:	6105                	addi	sp,sp,32
20405154:	8082                	ret

20405156 <__metal_driver_sifive_uart0_clock>:
__metal_driver_sifive_uart0_clock():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:768

static __inline__ struct metal_clock * __metal_driver_sifive_uart0_clock(struct metal_uart *uart)
{
20405156:	1101                	addi	sp,sp,-32
20405158:	ce22                	sw	s0,28(sp)
2040515a:	1000                	addi	s0,sp,32
2040515c:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:769
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
20405160:	fec42703          	lw	a4,-20(s0)
20405164:	800007b7          	lui	a5,0x80000
20405168:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2c0>
2040516c:	00f71763          	bne	a4,a5,2040517a <__metal_driver_sifive_uart0_clock+0x24>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:770
		return (struct metal_clock *)&__metal_dt_clock_0.clock;
20405170:	800007b7          	lui	a5,0x80000
20405174:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffebe0>
20405178:	a011                	j	2040517c <__metal_driver_sifive_uart0_clock+0x26>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:773
	}
	else {
		return 0;
2040517a:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:775
	}
}
2040517c:	853e                	mv	a0,a5
2040517e:	4472                	lw	s0,28(sp)
20405180:	6105                	addi	sp,sp,32
20405182:	8082                	ret

20405184 <__metal_driver_sifive_uart0_pinmux>:
__metal_driver_sifive_uart0_pinmux():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:778

static __inline__ struct __metal_driver_sifive_gpio0 * __metal_driver_sifive_uart0_pinmux(struct metal_uart *uart)
{
20405184:	1101                	addi	sp,sp,-32
20405186:	ce22                	sw	s0,28(sp)
20405188:	1000                	addi	s0,sp,32
2040518a:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:779
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
2040518e:	fec42703          	lw	a4,-20(s0)
20405192:	800007b7          	lui	a5,0x80000
20405196:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2c0>
2040519a:	00f71563          	bne	a4,a5,204051a4 <__metal_driver_sifive_uart0_pinmux+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:780
		return (struct __metal_driver_sifive_gpio0 *)&__metal_dt_gpio_10012000;
2040519e:	82018793          	addi	a5,gp,-2016 # 80000780 <__metal_dt_gpio_10012000>
204051a2:	a011                	j	204051a6 <__metal_driver_sifive_uart0_pinmux+0x22>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:783
	}
	else {
		return 0;
204051a4:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:785
	}
}
204051a6:	853e                	mv	a0,a5
204051a8:	4472                	lw	s0,28(sp)
204051aa:	6105                	addi	sp,sp,32
204051ac:	8082                	ret

204051ae <__metal_driver_sifive_uart0_pinmux_output_selector>:
__metal_driver_sifive_uart0_pinmux_output_selector():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:788

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_output_selector(struct metal_uart *uart)
{
204051ae:	1101                	addi	sp,sp,-32
204051b0:	ce22                	sw	s0,28(sp)
204051b2:	1000                	addi	s0,sp,32
204051b4:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:789
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204051b8:	fec42703          	lw	a4,-20(s0)
204051bc:	800007b7          	lui	a5,0x80000
204051c0:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2c0>
204051c4:	00f71463          	bne	a4,a5,204051cc <__metal_driver_sifive_uart0_pinmux_output_selector+0x1e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:790
		return 0;
204051c8:	4781                	li	a5,0
204051ca:	a011                	j	204051ce <__metal_driver_sifive_uart0_pinmux_output_selector+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:793
	}
	else {
		return 0;
204051cc:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:795
	}
}
204051ce:	853e                	mv	a0,a5
204051d0:	4472                	lw	s0,28(sp)
204051d2:	6105                	addi	sp,sp,32
204051d4:	8082                	ret

204051d6 <__metal_driver_sifive_uart0_pinmux_source_selector>:
__metal_driver_sifive_uart0_pinmux_source_selector():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:798

static __inline__ unsigned long __metal_driver_sifive_uart0_pinmux_source_selector(struct metal_uart *uart)
{
204051d6:	1101                	addi	sp,sp,-32
204051d8:	ce22                	sw	s0,28(sp)
204051da:	1000                	addi	s0,sp,32
204051dc:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:799
	if ((uintptr_t)uart == (uintptr_t)&__metal_dt_serial_10013000) {
204051e0:	fec42703          	lw	a4,-20(s0)
204051e4:	800007b7          	lui	a5,0x80000
204051e8:	74078793          	addi	a5,a5,1856 # 80000740 <metal_segment_heap_target_end+0xfffff2c0>
204051ec:	00f71563          	bne	a4,a5,204051f6 <__metal_driver_sifive_uart0_pinmux_source_selector+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:800
		return 196608;
204051f0:	000307b7          	lui	a5,0x30
204051f4:	a011                	j	204051f8 <__metal_driver_sifive_uart0_pinmux_source_selector+0x22>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:803
	}
	else {
		return 0;
204051f6:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:805
	}
}
204051f8:	853e                	mv	a0,a5
204051fa:	4472                	lw	s0,28(sp)
204051fc:	6105                	addi	sp,sp,32
204051fe:	8082                	ret

20405200 <__metal_driver_sifive_uart0_interrupt_controller>:
__metal_driver_sifive_uart0_interrupt_controller():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:37
    (__METAL_ACCESS_ONCE((__metal_io_u8 *)UART_REG(offset)))
#define UART_REGW(offset)                                                      \
    (__METAL_ACCESS_ONCE((__metal_io_u32 *)UART_REG(offset)))

struct metal_interrupt *
__metal_driver_sifive_uart0_interrupt_controller(struct metal_uart *uart) {
20405200:	1101                	addi	sp,sp,-32
20405202:	ce06                	sw	ra,28(sp)
20405204:	cc22                	sw	s0,24(sp)
20405206:	1000                	addi	s0,sp,32
20405208:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:38
    return __metal_driver_sifive_uart0_interrupt_parent(uart);
2040520c:	fec42503          	lw	a0,-20(s0)
20405210:	3dc5                	jal	20405100 <__metal_driver_sifive_uart0_interrupt_parent>
20405212:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:39
}
20405214:	853e                	mv	a0,a5
20405216:	40f2                	lw	ra,28(sp)
20405218:	4462                	lw	s0,24(sp)
2040521a:	6105                	addi	sp,sp,32
2040521c:	8082                	ret

2040521e <__metal_driver_sifive_uart0_get_interrupt_id>:
__metal_driver_sifive_uart0_get_interrupt_id():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:41

int __metal_driver_sifive_uart0_get_interrupt_id(struct metal_uart *uart) {
2040521e:	1101                	addi	sp,sp,-32
20405220:	ce06                	sw	ra,28(sp)
20405222:	cc22                	sw	s0,24(sp)
20405224:	1000                	addi	s0,sp,32
20405226:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:42
    return __metal_driver_sifive_uart0_interrupt_line(uart);
2040522a:	fec42503          	lw	a0,-20(s0)
2040522e:	3701                	jal	2040512e <__metal_driver_sifive_uart0_interrupt_line>
20405230:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:43
}
20405232:	853e                	mv	a0,a5
20405234:	40f2                	lw	ra,28(sp)
20405236:	4462                	lw	s0,24(sp)
20405238:	6105                	addi	sp,sp,32
2040523a:	8082                	ret

2040523c <__metal_driver_sifive_uart0_tx_interrupt_enable>:
__metal_driver_sifive_uart0_tx_interrupt_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:45

int __metal_driver_sifive_uart0_tx_interrupt_enable(struct metal_uart *uart) {
2040523c:	7179                	addi	sp,sp,-48
2040523e:	d606                	sw	ra,44(sp)
20405240:	d422                	sw	s0,40(sp)
20405242:	1800                	addi	s0,sp,48
20405244:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:46
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405248:	fdc42503          	lw	a0,-36(s0)
2040524c:	3569                	jal	204050d6 <__metal_driver_sifive_uart0_control_base>
2040524e:	87aa                	mv	a5,a0
20405250:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:48

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_TXWM;
20405254:	fec42783          	lw	a5,-20(s0)
20405258:	07c1                	addi	a5,a5,16
2040525a:	439c                	lw	a5,0(a5)
2040525c:	fec42703          	lw	a4,-20(s0)
20405260:	0741                	addi	a4,a4,16
20405262:	0017e793          	ori	a5,a5,1
20405266:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:49
    return 0;
20405268:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:50
}
2040526a:	853e                	mv	a0,a5
2040526c:	50b2                	lw	ra,44(sp)
2040526e:	5422                	lw	s0,40(sp)
20405270:	6145                	addi	sp,sp,48
20405272:	8082                	ret

20405274 <__metal_driver_sifive_uart0_tx_interrupt_disable>:
__metal_driver_sifive_uart0_tx_interrupt_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:52

int __metal_driver_sifive_uart0_tx_interrupt_disable(struct metal_uart *uart) {
20405274:	7179                	addi	sp,sp,-48
20405276:	d606                	sw	ra,44(sp)
20405278:	d422                	sw	s0,40(sp)
2040527a:	1800                	addi	s0,sp,48
2040527c:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:53
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405280:	fdc42503          	lw	a0,-36(s0)
20405284:	3d89                	jal	204050d6 <__metal_driver_sifive_uart0_control_base>
20405286:	87aa                	mv	a5,a0
20405288:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:55

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_TXWM;
2040528c:	fec42783          	lw	a5,-20(s0)
20405290:	07c1                	addi	a5,a5,16
20405292:	439c                	lw	a5,0(a5)
20405294:	fec42703          	lw	a4,-20(s0)
20405298:	0741                	addi	a4,a4,16
2040529a:	9bf9                	andi	a5,a5,-2
2040529c:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:56
    return 0;
2040529e:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:57
}
204052a0:	853e                	mv	a0,a5
204052a2:	50b2                	lw	ra,44(sp)
204052a4:	5422                	lw	s0,40(sp)
204052a6:	6145                	addi	sp,sp,48
204052a8:	8082                	ret

204052aa <__metal_driver_sifive_uart0_rx_interrupt_enable>:
__metal_driver_sifive_uart0_rx_interrupt_enable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:59

int __metal_driver_sifive_uart0_rx_interrupt_enable(struct metal_uart *uart) {
204052aa:	7179                	addi	sp,sp,-48
204052ac:	d606                	sw	ra,44(sp)
204052ae:	d422                	sw	s0,40(sp)
204052b0:	1800                	addi	s0,sp,48
204052b2:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:60
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204052b6:	fdc42503          	lw	a0,-36(s0)
204052ba:	3d31                	jal	204050d6 <__metal_driver_sifive_uart0_control_base>
204052bc:	87aa                	mv	a5,a0
204052be:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:62

    UART_REGW(METAL_SIFIVE_UART0_IE) |= UART_RXWM;
204052c2:	fec42783          	lw	a5,-20(s0)
204052c6:	07c1                	addi	a5,a5,16
204052c8:	439c                	lw	a5,0(a5)
204052ca:	fec42703          	lw	a4,-20(s0)
204052ce:	0741                	addi	a4,a4,16
204052d0:	0027e793          	ori	a5,a5,2
204052d4:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:63
    return 0;
204052d6:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:64
}
204052d8:	853e                	mv	a0,a5
204052da:	50b2                	lw	ra,44(sp)
204052dc:	5422                	lw	s0,40(sp)
204052de:	6145                	addi	sp,sp,48
204052e0:	8082                	ret

204052e2 <__metal_driver_sifive_uart0_rx_interrupt_disable>:
__metal_driver_sifive_uart0_rx_interrupt_disable():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:66

int __metal_driver_sifive_uart0_rx_interrupt_disable(struct metal_uart *uart) {
204052e2:	7179                	addi	sp,sp,-48
204052e4:	d606                	sw	ra,44(sp)
204052e6:	d422                	sw	s0,40(sp)
204052e8:	1800                	addi	s0,sp,48
204052ea:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:67
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204052ee:	fdc42503          	lw	a0,-36(s0)
204052f2:	de5ff0ef          	jal	ra,204050d6 <__metal_driver_sifive_uart0_control_base>
204052f6:	87aa                	mv	a5,a0
204052f8:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:69

    UART_REGW(METAL_SIFIVE_UART0_IE) &= ~UART_RXWM;
204052fc:	fec42783          	lw	a5,-20(s0)
20405300:	07c1                	addi	a5,a5,16
20405302:	439c                	lw	a5,0(a5)
20405304:	fec42703          	lw	a4,-20(s0)
20405308:	0741                	addi	a4,a4,16
2040530a:	9bf5                	andi	a5,a5,-3
2040530c:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:70
    return 0;
2040530e:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:71
}
20405310:	853e                	mv	a0,a5
20405312:	50b2                	lw	ra,44(sp)
20405314:	5422                	lw	s0,40(sp)
20405316:	6145                	addi	sp,sp,48
20405318:	8082                	ret

2040531a <__metal_driver_sifive_uart0_txready>:
__metal_driver_sifive_uart0_txready():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:73

int __metal_driver_sifive_uart0_txready(struct metal_uart *uart) {
2040531a:	7179                	addi	sp,sp,-48
2040531c:	d606                	sw	ra,44(sp)
2040531e:	d422                	sw	s0,40(sp)
20405320:	1800                	addi	s0,sp,48
20405322:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:74
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
20405326:	fdc42503          	lw	a0,-36(s0)
2040532a:	dadff0ef          	jal	ra,204050d6 <__metal_driver_sifive_uart0_control_base>
2040532e:	87aa                	mv	a5,a0
20405330:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:76

    return !!((UART_REGW(METAL_SIFIVE_UART0_TXDATA) & UART_TXFULL));
20405334:	fec42783          	lw	a5,-20(s0)
20405338:	439c                	lw	a5,0(a5)
2040533a:	83fd                	srli	a5,a5,0x1f
2040533c:	0ff7f793          	andi	a5,a5,255
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:77
}
20405340:	853e                	mv	a0,a5
20405342:	50b2                	lw	ra,44(sp)
20405344:	5422                	lw	s0,40(sp)
20405346:	6145                	addi	sp,sp,48
20405348:	8082                	ret

2040534a <__metal_driver_sifive_uart0_set_tx_watermark>:
__metal_driver_sifive_uart0_set_tx_watermark():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:80

int __metal_driver_sifive_uart0_set_tx_watermark(struct metal_uart *uart,
                                                 size_t level) {
2040534a:	7179                	addi	sp,sp,-48
2040534c:	d606                	sw	ra,44(sp)
2040534e:	d422                	sw	s0,40(sp)
20405350:	1800                	addi	s0,sp,48
20405352:	fca42e23          	sw	a0,-36(s0)
20405356:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:81
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040535a:	fdc42503          	lw	a0,-36(s0)
2040535e:	d79ff0ef          	jal	ra,204050d6 <__metal_driver_sifive_uart0_control_base>
20405362:	87aa                	mv	a5,a0
20405364:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:83

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(level);
20405368:	fec42783          	lw	a5,-20(s0)
2040536c:	07a1                	addi	a5,a5,8
2040536e:	4398                	lw	a4,0(a5)
20405370:	fd842783          	lw	a5,-40(s0)
20405374:	01079693          	slli	a3,a5,0x10
20405378:	000707b7          	lui	a5,0x70
2040537c:	8ff5                	and	a5,a5,a3
2040537e:	fec42683          	lw	a3,-20(s0)
20405382:	06a1                	addi	a3,a3,8
20405384:	8fd9                	or	a5,a5,a4
20405386:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:84
    return 0;
20405388:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:85
}
2040538a:	853e                	mv	a0,a5
2040538c:	50b2                	lw	ra,44(sp)
2040538e:	5422                	lw	s0,40(sp)
20405390:	6145                	addi	sp,sp,48
20405392:	8082                	ret

20405394 <__metal_driver_sifive_uart0_get_tx_watermark>:
__metal_driver_sifive_uart0_get_tx_watermark():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:87

size_t __metal_driver_sifive_uart0_get_tx_watermark(struct metal_uart *uart) {
20405394:	7179                	addi	sp,sp,-48
20405396:	d606                	sw	ra,44(sp)
20405398:	d422                	sw	s0,40(sp)
2040539a:	1800                	addi	s0,sp,48
2040539c:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:88
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204053a0:	fdc42503          	lw	a0,-36(s0)
204053a4:	d33ff0ef          	jal	ra,204050d6 <__metal_driver_sifive_uart0_control_base>
204053a8:	87aa                	mv	a5,a0
204053aa:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:90

    return ((UART_REGW(METAL_SIFIVE_UART0_TXCTRL) >> 16) & 0x7);
204053ae:	fec42783          	lw	a5,-20(s0)
204053b2:	07a1                	addi	a5,a5,8
204053b4:	439c                	lw	a5,0(a5)
204053b6:	83c1                	srli	a5,a5,0x10
204053b8:	8b9d                	andi	a5,a5,7
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:91
}
204053ba:	853e                	mv	a0,a5
204053bc:	50b2                	lw	ra,44(sp)
204053be:	5422                	lw	s0,40(sp)
204053c0:	6145                	addi	sp,sp,48
204053c2:	8082                	ret

204053c4 <__metal_driver_sifive_uart0_set_rx_watermark>:
__metal_driver_sifive_uart0_set_rx_watermark():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:94

int __metal_driver_sifive_uart0_set_rx_watermark(struct metal_uart *uart,
                                                 size_t level) {
204053c4:	7179                	addi	sp,sp,-48
204053c6:	d606                	sw	ra,44(sp)
204053c8:	d422                	sw	s0,40(sp)
204053ca:	1800                	addi	s0,sp,48
204053cc:	fca42e23          	sw	a0,-36(s0)
204053d0:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:95
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
204053d4:	fdc42503          	lw	a0,-36(s0)
204053d8:	cffff0ef          	jal	ra,204050d6 <__metal_driver_sifive_uart0_control_base>
204053dc:	87aa                	mv	a5,a0
204053de:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:97

    UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXCNT(level);
204053e2:	fec42783          	lw	a5,-20(s0)
204053e6:	07b1                	addi	a5,a5,12
204053e8:	4398                	lw	a4,0(a5)
204053ea:	fd842783          	lw	a5,-40(s0)
204053ee:	01079693          	slli	a3,a5,0x10
204053f2:	000707b7          	lui	a5,0x70
204053f6:	8ff5                	and	a5,a5,a3
204053f8:	fec42683          	lw	a3,-20(s0)
204053fc:	06b1                	addi	a3,a3,12
204053fe:	8fd9                	or	a5,a5,a4
20405400:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:98
    return 0;
20405402:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:99
}
20405404:	853e                	mv	a0,a5
20405406:	50b2                	lw	ra,44(sp)
20405408:	5422                	lw	s0,40(sp)
2040540a:	6145                	addi	sp,sp,48
2040540c:	8082                	ret

2040540e <__metal_driver_sifive_uart0_get_rx_watermark>:
__metal_driver_sifive_uart0_get_rx_watermark():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:101

size_t __metal_driver_sifive_uart0_get_rx_watermark(struct metal_uart *uart) {
2040540e:	7179                	addi	sp,sp,-48
20405410:	d606                	sw	ra,44(sp)
20405412:	d422                	sw	s0,40(sp)
20405414:	1800                	addi	s0,sp,48
20405416:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:102
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040541a:	fdc42503          	lw	a0,-36(s0)
2040541e:	cb9ff0ef          	jal	ra,204050d6 <__metal_driver_sifive_uart0_control_base>
20405422:	87aa                	mv	a5,a0
20405424:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:104

    return ((UART_REGW(METAL_SIFIVE_UART0_RXCTRL) >> 16) & 0x7);
20405428:	fec42783          	lw	a5,-20(s0)
2040542c:	07b1                	addi	a5,a5,12
2040542e:	439c                	lw	a5,0(a5)
20405430:	83c1                	srli	a5,a5,0x10
20405432:	8b9d                	andi	a5,a5,7
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:105
}
20405434:	853e                	mv	a0,a5
20405436:	50b2                	lw	ra,44(sp)
20405438:	5422                	lw	s0,40(sp)
2040543a:	6145                	addi	sp,sp,48
2040543c:	8082                	ret

2040543e <__metal_driver_sifive_uart0_putc>:
__metal_driver_sifive_uart0_putc():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:107

int __metal_driver_sifive_uart0_putc(struct metal_uart *uart, int c) {
2040543e:	7179                	addi	sp,sp,-48
20405440:	d606                	sw	ra,44(sp)
20405442:	d422                	sw	s0,40(sp)
20405444:	1800                	addi	s0,sp,48
20405446:	fca42e23          	sw	a0,-36(s0)
2040544a:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:108
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040544e:	fdc42503          	lw	a0,-36(s0)
20405452:	c85ff0ef          	jal	ra,204050d6 <__metal_driver_sifive_uart0_control_base>
20405456:	87aa                	mv	a5,a0
20405458:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110

    while (__metal_driver_sifive_uart0_txready(uart) != 0) {
2040545c:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:110 (discriminator 1)
2040545e:	fdc42503          	lw	a0,-36(s0)
20405462:	3d65                	jal	2040531a <__metal_driver_sifive_uart0_txready>
20405464:	87aa                	mv	a5,a0
20405466:	ffe5                	bnez	a5,2040545e <__metal_driver_sifive_uart0_putc+0x20>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:113
        /* wait */
    }
    UART_REGW(METAL_SIFIVE_UART0_TXDATA) = c;
20405468:	fec42783          	lw	a5,-20(s0)
2040546c:	fd842703          	lw	a4,-40(s0)
20405470:	c398                	sw	a4,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:114
    return 0;
20405472:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:115
}
20405474:	853e                	mv	a0,a5
20405476:	50b2                	lw	ra,44(sp)
20405478:	5422                	lw	s0,40(sp)
2040547a:	6145                	addi	sp,sp,48
2040547c:	8082                	ret

2040547e <__metal_driver_sifive_uart0_getc>:
__metal_driver_sifive_uart0_getc():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:117

int __metal_driver_sifive_uart0_getc(struct metal_uart *uart, int *c) {
2040547e:	7179                	addi	sp,sp,-48
20405480:	d606                	sw	ra,44(sp)
20405482:	d422                	sw	s0,40(sp)
20405484:	1800                	addi	s0,sp,48
20405486:	fca42e23          	sw	a0,-36(s0)
2040548a:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:119
    uint32_t ch;
    long control_base = __metal_driver_sifive_uart0_control_base(uart);
2040548e:	fdc42503          	lw	a0,-36(s0)
20405492:	c45ff0ef          	jal	ra,204050d6 <__metal_driver_sifive_uart0_control_base>
20405496:	87aa                	mv	a5,a0
20405498:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:121
    /* No seperate status register, we get status and the byte at same time */
    ch = UART_REGW(METAL_SIFIVE_UART0_RXDATA);
2040549c:	fec42783          	lw	a5,-20(s0)
204054a0:	0791                	addi	a5,a5,4
204054a2:	439c                	lw	a5,0(a5)
204054a4:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:123
    ;
    if (ch & UART_RXEMPTY) {
204054a8:	fe842783          	lw	a5,-24(s0)
204054ac:	0007d763          	bgez	a5,204054ba <__metal_driver_sifive_uart0_getc+0x3c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:124
        *c = -1; /* aka: EOF in most of the world */
204054b0:	fd842783          	lw	a5,-40(s0)
204054b4:	577d                	li	a4,-1
204054b6:	c398                	sw	a4,0(a5)
204054b8:	a801                	j	204054c8 <__metal_driver_sifive_uart0_getc+0x4a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:126
    } else {
        *c = ch & 0x0ff;
204054ba:	fe842783          	lw	a5,-24(s0)
204054be:	0ff7f713          	andi	a4,a5,255
204054c2:	fd842783          	lw	a5,-40(s0)
204054c6:	c398                	sw	a4,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:128
    }
    return 0;
204054c8:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:129
}
204054ca:	853e                	mv	a0,a5
204054cc:	50b2                	lw	ra,44(sp)
204054ce:	5422                	lw	s0,40(sp)
204054d0:	6145                	addi	sp,sp,48
204054d2:	8082                	ret

204054d4 <__metal_driver_sifive_uart0_get_baud_rate>:
__metal_driver_sifive_uart0_get_baud_rate():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:131

int __metal_driver_sifive_uart0_get_baud_rate(struct metal_uart *guart) {
204054d4:	7179                	addi	sp,sp,-48
204054d6:	d622                	sw	s0,44(sp)
204054d8:	1800                	addi	s0,sp,48
204054da:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:132
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
204054de:	fdc42783          	lw	a5,-36(s0)
204054e2:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:133
    return uart->baud_rate;
204054e6:	fec42783          	lw	a5,-20(s0)
204054ea:	43dc                	lw	a5,4(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:134
}
204054ec:	853e                	mv	a0,a5
204054ee:	5432                	lw	s0,44(sp)
204054f0:	6145                	addi	sp,sp,48
204054f2:	8082                	ret

204054f4 <__metal_driver_sifive_uart0_set_baud_rate>:
__metal_driver_sifive_uart0_set_baud_rate():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:137

int __metal_driver_sifive_uart0_set_baud_rate(struct metal_uart *guart,
                                              int baud_rate) {
204054f4:	7179                	addi	sp,sp,-48
204054f6:	d606                	sw	ra,44(sp)
204054f8:	d422                	sw	s0,40(sp)
204054fa:	1800                	addi	s0,sp,48
204054fc:	fca42e23          	sw	a0,-36(s0)
20405500:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:138
    struct __metal_driver_sifive_uart0 *uart = (void *)guart;
20405504:	fdc42783          	lw	a5,-36(s0)
20405508:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:139
    long control_base = __metal_driver_sifive_uart0_control_base(guart);
2040550c:	fdc42503          	lw	a0,-36(s0)
20405510:	bc7ff0ef          	jal	ra,204050d6 <__metal_driver_sifive_uart0_control_base>
20405514:	87aa                	mv	a5,a0
20405516:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:140
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
2040551a:	fdc42503          	lw	a0,-36(s0)
2040551e:	c39ff0ef          	jal	ra,20405156 <__metal_driver_sifive_uart0_clock>
20405522:	fea42223          	sw	a0,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:142

    uart->baud_rate = baud_rate;
20405526:	fd842703          	lw	a4,-40(s0)
2040552a:	fec42783          	lw	a5,-20(s0)
2040552e:	c3d8                	sw	a4,4(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:144

    if (clock != NULL) {
20405530:	fe442783          	lw	a5,-28(s0)
20405534:	cbb1                	beqz	a5,20405588 <__metal_driver_sifive_uart0_set_baud_rate+0x94>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:145
        long clock_rate = clock->vtable->get_rate_hz(clock);
20405536:	fe442783          	lw	a5,-28(s0)
2040553a:	439c                	lw	a5,0(a5)
2040553c:	439c                	lw	a5,0(a5)
2040553e:	fe442503          	lw	a0,-28(s0)
20405542:	9782                	jalr	a5
20405544:	fea42023          	sw	a0,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:146
        UART_REGW(METAL_SIFIVE_UART0_DIV) = clock_rate / baud_rate - 1;
20405548:	fe042703          	lw	a4,-32(s0)
2040554c:	fd842783          	lw	a5,-40(s0)
20405550:	02f747b3          	div	a5,a4,a5
20405554:	fff78713          	addi	a4,a5,-1 # 6ffff <__heap_size+0x6f7ff>
20405558:	fe842783          	lw	a5,-24(s0)
2040555c:	07e1                	addi	a5,a5,24
2040555e:	c398                	sw	a4,0(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:147
        UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXEN;
20405560:	fe842783          	lw	a5,-24(s0)
20405564:	07a1                	addi	a5,a5,8
20405566:	439c                	lw	a5,0(a5)
20405568:	fe842703          	lw	a4,-24(s0)
2040556c:	0721                	addi	a4,a4,8
2040556e:	0017e793          	ori	a5,a5,1
20405572:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:148
        UART_REGW(METAL_SIFIVE_UART0_RXCTRL) |= UART_RXEN;
20405574:	fe842783          	lw	a5,-24(s0)
20405578:	07b1                	addi	a5,a5,12
2040557a:	439c                	lw	a5,0(a5)
2040557c:	fe842703          	lw	a4,-24(s0)
20405580:	0731                	addi	a4,a4,12
20405582:	0017e793          	ori	a5,a5,1
20405586:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:150
    }
    return 0;
20405588:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:151
}
2040558a:	853e                	mv	a0,a5
2040558c:	50b2                	lw	ra,44(sp)
2040558e:	5422                	lw	s0,40(sp)
20405590:	6145                	addi	sp,sp,48
20405592:	8082                	ret

20405594 <pre_rate_change_callback_func>:
pre_rate_change_callback_func():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:153

static void pre_rate_change_callback_func(void *priv) {
20405594:	7139                	addi	sp,sp,-64
20405596:	de06                	sw	ra,60(sp)
20405598:	dc22                	sw	s0,56(sp)
2040559a:	0080                	addi	s0,sp,64
2040559c:	fca42623          	sw	a0,-52(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:154
    struct __metal_driver_sifive_uart0 *uart = priv;
204055a0:	fcc42783          	lw	a5,-52(s0)
204055a4:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:156
    long control_base =
        __metal_driver_sifive_uart0_control_base((struct metal_uart *)priv);
204055a8:	fcc42503          	lw	a0,-52(s0)
204055ac:	b2bff0ef          	jal	ra,204050d6 <__metal_driver_sifive_uart0_control_base>
204055b0:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:155
    long control_base =
204055b2:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:158
    struct metal_clock *clock =
        __metal_driver_sifive_uart0_clock((struct metal_uart *)priv);
204055b6:	fcc42503          	lw	a0,-52(s0)
204055ba:	b9dff0ef          	jal	ra,20405156 <__metal_driver_sifive_uart0_clock>
204055be:	fea42223          	sw	a0,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:163

    /* Detect when the TXDATA is empty by setting the transmit watermark count
     * to one and waiting until an interrupt is pending */

    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) &= ~(UART_TXCNT(0x7));
204055c2:	fe842783          	lw	a5,-24(s0)
204055c6:	07a1                	addi	a5,a5,8
204055c8:	4398                	lw	a4,0(a5)
204055ca:	fe842783          	lw	a5,-24(s0)
204055ce:	07a1                	addi	a5,a5,8
204055d0:	86be                	mv	a3,a5
204055d2:	fff907b7          	lui	a5,0xfff90
204055d6:	17fd                	addi	a5,a5,-1
204055d8:	8ff9                	and	a5,a5,a4
204055da:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:164
    UART_REGW(METAL_SIFIVE_UART0_TXCTRL) |= UART_TXCNT(1);
204055dc:	fe842783          	lw	a5,-24(s0)
204055e0:	07a1                	addi	a5,a5,8
204055e2:	4398                	lw	a4,0(a5)
204055e4:	fe842783          	lw	a5,-24(s0)
204055e8:	07a1                	addi	a5,a5,8
204055ea:	86be                	mv	a3,a5
204055ec:	67c1                	lui	a5,0x10
204055ee:	8fd9                	or	a5,a5,a4
204055f0:	c29c                	sw	a5,0(a3)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:166

    while ((UART_REGW(METAL_SIFIVE_UART0_IP) & UART_TXWM) == 0)
204055f2:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:166 (discriminator 1)
204055f4:	fe842783          	lw	a5,-24(s0)
204055f8:	07d1                	addi	a5,a5,20
204055fa:	439c                	lw	a5,0(a5)
204055fc:	8b85                	andi	a5,a5,1
204055fe:	dbfd                	beqz	a5,204055f4 <pre_rate_change_callback_func+0x60>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:174
    /* When the TXDATA clears, the UART is still shifting out the last byte.
     * Calculate the time we must drain to finish transmitting and then wait
     * that long. */

    long bits_per_symbol =
        (UART_REGW(METAL_SIFIVE_UART0_TXCTRL) & (1 << 1)) ? 9 : 10;
20405600:	fe842783          	lw	a5,-24(s0)
20405604:	07a1                	addi	a5,a5,8
20405606:	439c                	lw	a5,0(a5)
20405608:	8b89                	andi	a5,a5,2
2040560a:	c399                	beqz	a5,20405610 <pre_rate_change_callback_func+0x7c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:174 (discriminator 1)
2040560c:	47a5                	li	a5,9
2040560e:	a011                	j	20405612 <pre_rate_change_callback_func+0x7e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:174 (discriminator 2)
20405610:	47a9                	li	a5,10
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:173
    long bits_per_symbol =
20405612:	fef42023          	sw	a5,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:175
    long clk_freq = clock->vtable->get_rate_hz(clock);
20405616:	fe442783          	lw	a5,-28(s0)
2040561a:	439c                	lw	a5,0(a5)
2040561c:	439c                	lw	a5,0(a5)
2040561e:	fe442503          	lw	a0,-28(s0)
20405622:	9782                	jalr	a5
20405624:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:176
    long cycles_to_wait = bits_per_symbol * clk_freq / uart->baud_rate;
20405628:	fe042703          	lw	a4,-32(s0)
2040562c:	fdc42783          	lw	a5,-36(s0)
20405630:	02f707b3          	mul	a5,a4,a5
20405634:	873e                	mv	a4,a5
20405636:	fec42783          	lw	a5,-20(s0)
2040563a:	43dc                	lw	a5,4(a5)
2040563c:	02f757b3          	divu	a5,a4,a5
20405640:	fcf42c23          	sw	a5,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:178

    for (volatile long x = 0; x < cycles_to_wait; x++)
20405644:	fc042a23          	sw	zero,-44(s0)
20405648:	a039                	j	20405656 <pre_rate_change_callback_func+0xc2>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:179 (discriminator 3)
        __asm__("nop");
2040564a:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 3)
    for (volatile long x = 0; x < cycles_to_wait; x++)
2040564c:	fd442783          	lw	a5,-44(s0)
20405650:	0785                	addi	a5,a5,1
20405652:	fcf42a23          	sw	a5,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:178 (discriminator 1)
20405656:	fd442783          	lw	a5,-44(s0)
2040565a:	fd842703          	lw	a4,-40(s0)
2040565e:	fee7c6e3          	blt	a5,a4,2040564a <pre_rate_change_callback_func+0xb6>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:180
}
20405662:	0001                	nop
20405664:	0001                	nop
20405666:	50f2                	lw	ra,60(sp)
20405668:	5462                	lw	s0,56(sp)
2040566a:	6121                	addi	sp,sp,64
2040566c:	8082                	ret

2040566e <post_rate_change_callback_func>:
post_rate_change_callback_func():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:182

static void post_rate_change_callback_func(void *priv) {
2040566e:	7179                	addi	sp,sp,-48
20405670:	d606                	sw	ra,44(sp)
20405672:	d422                	sw	s0,40(sp)
20405674:	1800                	addi	s0,sp,48
20405676:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:183
    struct __metal_driver_sifive_uart0 *uart = priv;
2040567a:	fdc42783          	lw	a5,-36(s0)
2040567e:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:184
    metal_uart_set_baud_rate(&uart->uart, uart->baud_rate);
20405682:	fec42703          	lw	a4,-20(s0)
20405686:	fec42783          	lw	a5,-20(s0)
2040568a:	43dc                	lw	a5,4(a5)
2040568c:	85be                	mv	a1,a5
2040568e:	853a                	mv	a0,a4
20405690:	f72fc0ef          	jal	ra,20401e02 <metal_uart_set_baud_rate>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:185
}
20405694:	0001                	nop
20405696:	50b2                	lw	ra,44(sp)
20405698:	5422                	lw	s0,40(sp)
2040569a:	6145                	addi	sp,sp,48
2040569c:	8082                	ret

2040569e <__metal_driver_sifive_uart0_init>:
__metal_driver_sifive_uart0_init():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:187

void __metal_driver_sifive_uart0_init(struct metal_uart *guart, int baud_rate) {
2040569e:	7139                	addi	sp,sp,-64
204056a0:	de06                	sw	ra,60(sp)
204056a2:	dc22                	sw	s0,56(sp)
204056a4:	0080                	addi	s0,sp,64
204056a6:	fca42623          	sw	a0,-52(s0)
204056aa:	fcb42423          	sw	a1,-56(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:188
    struct __metal_driver_sifive_uart0 *uart = (void *)(guart);
204056ae:	fcc42783          	lw	a5,-52(s0)
204056b2:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:189
    struct metal_clock *clock = __metal_driver_sifive_uart0_clock(guart);
204056b6:	fcc42503          	lw	a0,-52(s0)
204056ba:	a9dff0ef          	jal	ra,20405156 <__metal_driver_sifive_uart0_clock>
204056be:	fea42423          	sw	a0,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:191
    struct __metal_driver_sifive_gpio0 *pinmux =
        __metal_driver_sifive_uart0_pinmux(guart);
204056c2:	fcc42503          	lw	a0,-52(s0)
204056c6:	abfff0ef          	jal	ra,20405184 <__metal_driver_sifive_uart0_pinmux>
204056ca:	fea42223          	sw	a0,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:193

    if (clock != NULL) {
204056ce:	fe842783          	lw	a5,-24(s0)
204056d2:	c7b9                	beqz	a5,20405720 <__metal_driver_sifive_uart0_init+0x82>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:194
        uart->pre_rate_change_callback.callback =
204056d4:	fec42783          	lw	a5,-20(s0)
204056d8:	20405737          	lui	a4,0x20405
204056dc:	59470713          	addi	a4,a4,1428 # 20405594 <pre_rate_change_callback_func>
204056e0:	c798                	sw	a4,8(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:196
            &pre_rate_change_callback_func;
        uart->pre_rate_change_callback.priv = guart;
204056e2:	fec42783          	lw	a5,-20(s0)
204056e6:	fcc42703          	lw	a4,-52(s0)
204056ea:	c7d8                	sw	a4,12(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:197
        metal_clock_register_pre_rate_change_callback(
204056ec:	fec42783          	lw	a5,-20(s0)
204056f0:	07a1                	addi	a5,a5,8
204056f2:	85be                	mv	a1,a5
204056f4:	fe842503          	lw	a0,-24(s0)
204056f8:	20f1                	jal	204057c4 <metal_clock_register_pre_rate_change_callback>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:200
            clock, &(uart->pre_rate_change_callback));

        uart->post_rate_change_callback.callback =
204056fa:	fec42783          	lw	a5,-20(s0)
204056fe:	20405737          	lui	a4,0x20405
20405702:	66e70713          	addi	a4,a4,1646 # 2040566e <post_rate_change_callback_func>
20405706:	cbd8                	sw	a4,20(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:202
            &post_rate_change_callback_func;
        uart->post_rate_change_callback.priv = guart;
20405708:	fec42783          	lw	a5,-20(s0)
2040570c:	fcc42703          	lw	a4,-52(s0)
20405710:	cf98                	sw	a4,24(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:203
        metal_clock_register_post_rate_change_callback(
20405712:	fec42783          	lw	a5,-20(s0)
20405716:	07d1                	addi	a5,a5,20
20405718:	85be                	mv	a1,a5
2040571a:	fe842503          	lw	a0,-24(s0)
2040571e:	28d9                	jal	204057f4 <metal_clock_register_post_rate_change_callback>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:207
            clock, &(uart->post_rate_change_callback));
    }

    metal_uart_set_baud_rate(&(uart->uart), baud_rate);
20405720:	fec42783          	lw	a5,-20(s0)
20405724:	fc842583          	lw	a1,-56(s0)
20405728:	853e                	mv	a0,a5
2040572a:	ed8fc0ef          	jal	ra,20401e02 <metal_uart_set_baud_rate>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:209

    if (pinmux != NULL) {
2040572e:	fe442783          	lw	a5,-28(s0)
20405732:	cb95                	beqz	a5,20405766 <__metal_driver_sifive_uart0_init+0xc8>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:211
        long pinmux_output_selector =
            __metal_driver_sifive_uart0_pinmux_output_selector(guart);
20405734:	fcc42503          	lw	a0,-52(s0)
20405738:	a77ff0ef          	jal	ra,204051ae <__metal_driver_sifive_uart0_pinmux_output_selector>
2040573c:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:210
        long pinmux_output_selector =
2040573e:	fef42023          	sw	a5,-32(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:213
        long pinmux_source_selector =
            __metal_driver_sifive_uart0_pinmux_source_selector(guart);
20405742:	fcc42503          	lw	a0,-52(s0)
20405746:	a91ff0ef          	jal	ra,204051d6 <__metal_driver_sifive_uart0_pinmux_source_selector>
2040574a:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:212
        long pinmux_source_selector =
2040574c:	fcf42e23          	sw	a5,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:214
        pinmux->gpio.vtable->enable_io((struct metal_gpio *)pinmux,
20405750:	fe442783          	lw	a5,-28(s0)
20405754:	439c                	lw	a5,0(a5)
20405756:	53dc                	lw	a5,36(a5)
20405758:	fdc42603          	lw	a2,-36(s0)
2040575c:	fe042583          	lw	a1,-32(s0)
20405760:	fe442503          	lw	a0,-28(s0)
20405764:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/sifive_uart0.c:218
                                       pinmux_output_selector,
                                       pinmux_source_selector);
    }
}
20405766:	0001                	nop
20405768:	50f2                	lw	ra,60(sp)
2040576a:	5462                	lw	s0,56(sp)
2040576c:	6121                	addi	sp,sp,64
2040576e:	8082                	ret

20405770 <_metal_clock_append_to_callbacks>:
_metal_clock_append_to_callbacks():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:63
/*!
 * @brief Append a callback to the linked list and return the head of the list
 */
__inline__ metal_clock_callback *
_metal_clock_append_to_callbacks(metal_clock_callback *list,
                                 metal_clock_callback *const cb) {
20405770:	7179                	addi	sp,sp,-48
20405772:	d622                	sw	s0,44(sp)
20405774:	1800                	addi	s0,sp,48
20405776:	fca42e23          	sw	a0,-36(s0)
2040577a:	fcb42c23          	sw	a1,-40(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:64
    cb->_next = NULL;
2040577e:	fd842783          	lw	a5,-40(s0)
20405782:	0007a423          	sw	zero,8(a5) # 10008 <__heap_size+0xf808>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:66

    if (!list) {
20405786:	fdc42783          	lw	a5,-36(s0)
2040578a:	e781                	bnez	a5,20405792 <_metal_clock_append_to_callbacks+0x22>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:67
        return cb;
2040578c:	fd842783          	lw	a5,-40(s0)
20405790:	a035                	j	204057bc <_metal_clock_append_to_callbacks+0x4c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:70
    }

    metal_clock_callback *current = list;
20405792:	fdc42783          	lw	a5,-36(s0)
20405796:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:72

    while ((current->_next) != NULL) {
2040579a:	a031                	j	204057a6 <_metal_clock_append_to_callbacks+0x36>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:73
        current = current->_next;
2040579c:	fec42783          	lw	a5,-20(s0)
204057a0:	479c                	lw	a5,8(a5)
204057a2:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:72
    while ((current->_next) != NULL) {
204057a6:	fec42783          	lw	a5,-20(s0)
204057aa:	479c                	lw	a5,8(a5)
204057ac:	fbe5                	bnez	a5,2040579c <_metal_clock_append_to_callbacks+0x2c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:76
    }

    current->_next = cb;
204057ae:	fec42783          	lw	a5,-20(s0)
204057b2:	fd842703          	lw	a4,-40(s0)
204057b6:	c798                	sw	a4,8(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:78

    return list;
204057b8:	fdc42783          	lw	a5,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:79
}
204057bc:	853e                	mv	a0,a5
204057be:	5432                	lw	s0,44(sp)
204057c0:	6145                	addi	sp,sp,48
204057c2:	8082                	ret

204057c4 <metal_clock_register_pre_rate_change_callback>:
metal_clock_register_pre_rate_change_callback():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:146
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_pre_rate_change_callback(struct metal_clock *clk,
                                              metal_clock_callback *cb) {
204057c4:	1101                	addi	sp,sp,-32
204057c6:	ce06                	sw	ra,28(sp)
204057c8:	cc22                	sw	s0,24(sp)
204057ca:	1000                	addi	s0,sp,32
204057cc:	fea42623          	sw	a0,-20(s0)
204057d0:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:148
    clk->_pre_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_pre_rate_change_callback, cb);
204057d4:	fec42783          	lw	a5,-20(s0)
204057d8:	43dc                	lw	a5,4(a5)
204057da:	fe842583          	lw	a1,-24(s0)
204057de:	853e                	mv	a0,a5
204057e0:	3f41                	jal	20405770 <_metal_clock_append_to_callbacks>
204057e2:	872a                	mv	a4,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:147
    clk->_pre_rate_change_callback =
204057e4:	fec42783          	lw	a5,-20(s0)
204057e8:	c3d8                	sw	a4,4(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:149
}
204057ea:	0001                	nop
204057ec:	40f2                	lw	ra,28(sp)
204057ee:	4462                	lw	s0,24(sp)
204057f0:	6105                	addi	sp,sp,32
204057f2:	8082                	ret

204057f4 <metal_clock_register_post_rate_change_callback>:
metal_clock_register_post_rate_change_callback():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:159
 * @param clk The handle for the clock
 * @param cb The callback to be registered
 */
__inline__ void
metal_clock_register_post_rate_change_callback(struct metal_clock *clk,
                                               metal_clock_callback *cb) {
204057f4:	1101                	addi	sp,sp,-32
204057f6:	ce06                	sw	ra,28(sp)
204057f8:	cc22                	sw	s0,24(sp)
204057fa:	1000                	addi	s0,sp,32
204057fc:	fea42623          	sw	a0,-20(s0)
20405800:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:161
    clk->_post_rate_change_callback =
        _metal_clock_append_to_callbacks(clk->_post_rate_change_callback, cb);
20405804:	fec42783          	lw	a5,-20(s0)
20405808:	479c                	lw	a5,8(a5)
2040580a:	fe842583          	lw	a1,-24(s0)
2040580e:	853e                	mv	a0,a5
20405810:	3785                	jal	20405770 <_metal_clock_append_to_callbacks>
20405812:	872a                	mv	a4,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:160
    clk->_post_rate_change_callback =
20405814:	fec42783          	lw	a5,-20(s0)
20405818:	c798                	sw	a4,8(a5)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/metal/clock.h:162
}
2040581a:	0001                	nop
2040581c:	40f2                	lw	ra,28(sp)
2040581e:	4462                	lw	s0,24(sp)
20405820:	6105                	addi	sp,sp,32
20405822:	8082                	ret

20405824 <metal_shutdown>:
metal_shutdown():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/shutdown.c:17
    __metal_shutdown_exit(__METAL_DT_SHUTDOWN_HANDLE, code);
}
#else
#pragma message(                                                               \
    "There is no defined shutdown mechanism, metal_shutdown() will spin.")
void metal_shutdown(int code) {
20405824:	1101                	addi	sp,sp,-32
20405826:	ce22                	sw	s0,28(sp)
20405828:	1000                	addi	s0,sp,32
2040582a:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/shutdown.c:19 (discriminator 1)
    while (1) {
        __asm__ volatile("nop");
2040582e:	0001                	nop
20405830:	bffd                	j	2040582e <metal_shutdown+0xa>
	...

20405880 <__metal_vector_table>:
IRQ_0():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:96
#endif
.option norvc
.global __metal_vector_table
__metal_vector_table:
IRQ_0:
        j metal_interrupt_vector_handler
20405880:	f0dfc06f          	j	2040278c <metal_interrupt_vector_handler>

20405884 <IRQ_1>:
IRQ_1():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:98
IRQ_1:
        j metal_interrupt_vector_handler
20405884:	f09fc06f          	j	2040278c <metal_interrupt_vector_handler>

20405888 <IRQ_2>:
IRQ_2():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:100
IRQ_2:
        j metal_interrupt_vector_handler
20405888:	f05fc06f          	j	2040278c <metal_interrupt_vector_handler>

2040588c <IRQ_3>:
IRQ_3():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:102
IRQ_3:
        j metal_software_interrupt_vector_handler
2040588c:	f2ffc06f          	j	204027ba <metal_software_interrupt_vector_handler>

20405890 <IRQ_4>:
IRQ_4():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:104
IRQ_4:
        j metal_interrupt_vector_handler
20405890:	efdfc06f          	j	2040278c <metal_interrupt_vector_handler>

20405894 <IRQ_5>:
IRQ_5():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:106
IRQ_5:
        j metal_interrupt_vector_handler
20405894:	ef9fc06f          	j	2040278c <metal_interrupt_vector_handler>

20405898 <IRQ_6>:
IRQ_6():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:108
IRQ_6:
        j metal_interrupt_vector_handler
20405898:	ef5fc06f          	j	2040278c <metal_interrupt_vector_handler>

2040589c <IRQ_7>:
IRQ_7():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:110
IRQ_7:
        j metal_timer_interrupt_vector_handler
2040589c:	818fd06f          	j	204028b4 <metal_timer_interrupt_vector_handler>

204058a0 <IRQ_8>:
IRQ_8():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:112
IRQ_8:
        j metal_interrupt_vector_handler
204058a0:	eedfc06f          	j	2040278c <metal_interrupt_vector_handler>

204058a4 <IRQ_9>:
IRQ_9():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:114
IRQ_9:
        j metal_interrupt_vector_handler
204058a4:	ee9fc06f          	j	2040278c <metal_interrupt_vector_handler>

204058a8 <IRQ_10>:
IRQ_10():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:116
IRQ_10:
        j metal_interrupt_vector_handler
204058a8:	ee5fc06f          	j	2040278c <metal_interrupt_vector_handler>

204058ac <IRQ_11>:
IRQ_11():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:118
IRQ_11:
        j metal_interrupt_vector_handler
204058ac:	ee1fc06f          	j	2040278c <metal_interrupt_vector_handler>

204058b0 <IRQ_12>:
IRQ_12():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:120
IRQ_12:
        j metal_interrupt_vector_handler
204058b0:	eddfc06f          	j	2040278c <metal_interrupt_vector_handler>

204058b4 <IRQ_13>:
IRQ_13():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:122
IRQ_13:
        j metal_interrupt_vector_handler
204058b4:	ed9fc06f          	j	2040278c <metal_interrupt_vector_handler>

204058b8 <IRQ_14>:
IRQ_14():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:124
IRQ_14:
        j metal_interrupt_vector_handler
204058b8:	ed5fc06f          	j	2040278c <metal_interrupt_vector_handler>

204058bc <IRQ_15>:
IRQ_15():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:126
IRQ_15:
        j metal_interrupt_vector_handler
204058bc:	ed1fc06f          	j	2040278c <metal_interrupt_vector_handler>

204058c0 <IRQ_LC0>:
IRQ_LC0():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:128
IRQ_LC0:
        j metal_lc0_interrupt_vector_handler
204058c0:	b3afd06f          	j	20402bfa <metal_lc0_interrupt_vector_handler>

204058c4 <IRQ_LC1>:
IRQ_LC1():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:130
IRQ_LC1:
        j metal_lc1_interrupt_vector_handler
204058c4:	bccfd06f          	j	20402c90 <metal_lc1_interrupt_vector_handler>

204058c8 <IRQ_LC2>:
IRQ_LC2():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:132
IRQ_LC2:
        j metal_lc2_interrupt_vector_handler
204058c8:	c5efd06f          	j	20402d26 <metal_lc2_interrupt_vector_handler>

204058cc <IRQ_LC3>:
IRQ_LC3():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:134
IRQ_LC3:
        j metal_lc3_interrupt_vector_handler
204058cc:	cf0fd06f          	j	20402dbc <metal_lc3_interrupt_vector_handler>

204058d0 <IRQ_LC4>:
IRQ_LC4():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:136
IRQ_LC4:
        j metal_lc4_interrupt_vector_handler
204058d0:	d82fd06f          	j	20402e52 <metal_lc4_interrupt_vector_handler>

204058d4 <IRQ_LC5>:
IRQ_LC5():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:138
IRQ_LC5:
        j metal_lc5_interrupt_vector_handler
204058d4:	e14fd06f          	j	20402ee8 <metal_lc5_interrupt_vector_handler>

204058d8 <IRQ_LC6>:
IRQ_LC6():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:140
IRQ_LC6:
        j metal_lc6_interrupt_vector_handler
204058d8:	ea6fd06f          	j	20402f7e <metal_lc6_interrupt_vector_handler>

204058dc <IRQ_LC7>:
IRQ_LC7():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:142
IRQ_LC7:
        j metal_lc7_interrupt_vector_handler
204058dc:	f38fd06f          	j	20403014 <metal_lc7_interrupt_vector_handler>

204058e0 <IRQ_LC8>:
IRQ_LC8():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:144
IRQ_LC8:
        j metal_lc8_interrupt_vector_handler
204058e0:	fcafd06f          	j	204030aa <metal_lc8_interrupt_vector_handler>

204058e4 <IRQ_LC9>:
IRQ_LC9():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:146
IRQ_LC9:
        j metal_lc9_interrupt_vector_handler
204058e4:	85dfd06f          	j	20403140 <metal_lc9_interrupt_vector_handler>

204058e8 <IRQ_LC10>:
IRQ_LC10():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:148
IRQ_LC10:
        j metal_lc10_interrupt_vector_handler
204058e8:	8effd06f          	j	204031d6 <metal_lc10_interrupt_vector_handler>

204058ec <IRQ_LC11>:
IRQ_LC11():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:150
IRQ_LC11:
        j metal_lc11_interrupt_vector_handler
204058ec:	981fd06f          	j	2040326c <metal_lc11_interrupt_vector_handler>

204058f0 <IRQ_LC12>:
IRQ_LC12():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:152
IRQ_LC12:
        j metal_lc12_interrupt_vector_handler
204058f0:	a13fd06f          	j	20403302 <metal_lc12_interrupt_vector_handler>

204058f4 <IRQ_LC13>:
IRQ_LC13():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:154
IRQ_LC13:
        j metal_lc13_interrupt_vector_handler
204058f4:	aa5fd06f          	j	20403398 <metal_lc13_interrupt_vector_handler>

204058f8 <IRQ_LC14>:
IRQ_LC14():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:156
IRQ_LC14:
        j metal_lc14_interrupt_vector_handler
204058f8:	b37fd06f          	j	2040342e <metal_lc14_interrupt_vector_handler>

204058fc <IRQ_LC15>:
IRQ_LC15():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/vector.S:158
IRQ_LC15:
        j metal_lc15_interrupt_vector_handler
204058fc:	bc9fd06f          	j	204034c4 <metal_lc15_interrupt_vector_handler>

20405900 <__metal_driver_fixed_clock_rate>:
__metal_driver_fixed_clock_rate():
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:134
{
20405900:	1101                	addi	sp,sp,-32
20405902:	ce22                	sw	s0,28(sp)
20405904:	1000                	addi	s0,sp,32
20405906:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:135
	if ((uintptr_t)clock == (uintptr_t)&__metal_dt_clock_0) {
2040590a:	fec42703          	lw	a4,-20(s0)
2040590e:	800007b7          	lui	a5,0x80000
20405912:	06078793          	addi	a5,a5,96 # 80000060 <metal_segment_heap_target_end+0xffffebe0>
20405916:	00f71763          	bne	a4,a5,20405924 <__metal_driver_fixed_clock_rate+0x24>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:136
		return METAL_FIXED_CLOCK_0_CLOCK_FREQUENCY;
2040591a:	03dfd7b7          	lui	a5,0x3dfd
2040591e:	24078793          	addi	a5,a5,576 # 3dfd240 <__heap_size+0x3dfca40>
20405922:	a011                	j	20405926 <__metal_driver_fixed_clock_rate+0x26>
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:139
		return 0;
20405924:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/bsp/freedom-e310-arty/build/debug/./metal/machine.h:141
}
20405926:	853e                	mv	a0,a5
20405928:	4472                	lw	s0,28(sp)
2040592a:	6105                	addi	sp,sp,32
2040592c:	8082                	ret

2040592e <__metal_driver_fixed_clock_get_rate_hz>:
__metal_driver_fixed_clock_get_rate_hz():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:12

#include <metal/drivers/fixed-clock.h>
#include <metal/machine.h>
#include <stddef.h>

long __metal_driver_fixed_clock_get_rate_hz(const struct metal_clock *gclk) {
2040592e:	1101                	addi	sp,sp,-32
20405930:	ce06                	sw	ra,28(sp)
20405932:	cc22                	sw	s0,24(sp)
20405934:	1000                	addi	s0,sp,32
20405936:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:13
    return __metal_driver_fixed_clock_rate(gclk);
2040593a:	fec42503          	lw	a0,-20(s0)
2040593e:	37c9                	jal	20405900 <__metal_driver_fixed_clock_rate>
20405940:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:14
}
20405942:	853e                	mv	a0,a5
20405944:	40f2                	lw	ra,28(sp)
20405946:	4462                	lw	s0,24(sp)
20405948:	6105                	addi	sp,sp,32
2040594a:	8082                	ret

2040594c <__metal_driver_fixed_clock_set_rate_hz>:
__metal_driver_fixed_clock_set_rate_hz():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:17

long __metal_driver_fixed_clock_set_rate_hz(struct metal_clock *gclk,
                                            long target_hz) {
2040594c:	1101                	addi	sp,sp,-32
2040594e:	ce06                	sw	ra,28(sp)
20405950:	cc22                	sw	s0,24(sp)
20405952:	1000                	addi	s0,sp,32
20405954:	fea42623          	sw	a0,-20(s0)
20405958:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:18
    return __metal_driver_fixed_clock_get_rate_hz(gclk);
2040595c:	fec42503          	lw	a0,-20(s0)
20405960:	37f9                	jal	2040592e <__metal_driver_fixed_clock_get_rate_hz>
20405962:	87aa                	mv	a5,a0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/drivers/fixed-clock.c:19
}
20405964:	853e                	mv	a0,a5
20405966:	40f2                	lw	ra,28(sp)
20405968:	4462                	lw	s0,24(sp)
2040596a:	6105                	addi	sp,sp,32
2040596c:	8082                	ret

2040596e <_close>:
_close():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_close.c:3
#include <errno.h>

int _close(int file) {
2040596e:	1101                	addi	sp,sp,-32
20405970:	ce06                	sw	ra,28(sp)
20405972:	cc22                	sw	s0,24(sp)
20405974:	1000                	addi	s0,sp,32
20405976:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_close.c:4
    errno = ENOSYS;
2040597a:	2a51                	jal	20405b0e <__errno>
2040597c:	872a                	mv	a4,a0
2040597e:	05800793          	li	a5,88
20405982:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_close.c:5
    return -1;
20405984:	57fd                	li	a5,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_close.c:6
}
20405986:	853e                	mv	a0,a5
20405988:	40f2                	lw	ra,28(sp)
2040598a:	4462                	lw	s0,24(sp)
2040598c:	6105                	addi	sp,sp,32
2040598e:	8082                	ret

20405990 <_fstat>:
_fstat():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:4
#include <errno.h>
#include <sys/stat.h>

int _fstat(int file, struct stat *st) {
20405990:	1101                	addi	sp,sp,-32
20405992:	ce06                	sw	ra,28(sp)
20405994:	cc22                	sw	s0,24(sp)
20405996:	1000                	addi	s0,sp,32
20405998:	fea42623          	sw	a0,-20(s0)
2040599c:	feb42423          	sw	a1,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:5
    errno = -ENOSYS;
204059a0:	22bd                	jal	20405b0e <__errno>
204059a2:	872a                	mv	a4,a0
204059a4:	fa800793          	li	a5,-88
204059a8:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:6
    return -1;
204059aa:	57fd                	li	a5,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_fstat.c:7
}
204059ac:	853e                	mv	a0,a5
204059ae:	40f2                	lw	ra,28(sp)
204059b0:	4462                	lw	s0,24(sp)
204059b2:	6105                	addi	sp,sp,32
204059b4:	8082                	ret

204059b6 <_isatty>:
_isatty():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_isatty.c:3
#include <unistd.h>

int _isatty(int file) { return (file == STDOUT_FILENO); }
204059b6:	1101                	addi	sp,sp,-32
204059b8:	ce22                	sw	s0,28(sp)
204059ba:	1000                	addi	s0,sp,32
204059bc:	fea42623          	sw	a0,-20(s0)
204059c0:	fec42783          	lw	a5,-20(s0)
204059c4:	17fd                	addi	a5,a5,-1
204059c6:	0017b793          	seqz	a5,a5
204059ca:	0ff7f793          	andi	a5,a5,255
204059ce:	853e                	mv	a0,a5
204059d0:	4472                	lw	s0,28(sp)
204059d2:	6105                	addi	sp,sp,32
204059d4:	8082                	ret

204059d6 <_lseek>:
_lseek():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:4
#include <errno.h>
#include <sys/types.h>

off_t _lseek(int file, off_t ptr, int dir) {
204059d6:	1101                	addi	sp,sp,-32
204059d8:	ce06                	sw	ra,28(sp)
204059da:	cc22                	sw	s0,24(sp)
204059dc:	1000                	addi	s0,sp,32
204059de:	fea42623          	sw	a0,-20(s0)
204059e2:	feb42423          	sw	a1,-24(s0)
204059e6:	fec42223          	sw	a2,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:5
    errno = ENOSYS;
204059ea:	2215                	jal	20405b0e <__errno>
204059ec:	872a                	mv	a4,a0
204059ee:	05800793          	li	a5,88
204059f2:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:6
    return -1;
204059f4:	57fd                	li	a5,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_lseek.c:7
}
204059f6:	853e                	mv	a0,a5
204059f8:	40f2                	lw	ra,28(sp)
204059fa:	4462                	lw	s0,24(sp)
204059fc:	6105                	addi	sp,sp,32
204059fe:	8082                	ret

20405a00 <_read>:
_read():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_read.c:4
#include <errno.h>
#include <sys/types.h>

ssize_t _read(int file, void *ptr, size_t len) {
20405a00:	1101                	addi	sp,sp,-32
20405a02:	ce06                	sw	ra,28(sp)
20405a04:	cc22                	sw	s0,24(sp)
20405a06:	1000                	addi	s0,sp,32
20405a08:	fea42623          	sw	a0,-20(s0)
20405a0c:	feb42423          	sw	a1,-24(s0)
20405a10:	fec42223          	sw	a2,-28(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_read.c:5
    errno = ENOSYS;
20405a14:	28ed                	jal	20405b0e <__errno>
20405a16:	872a                	mv	a4,a0
20405a18:	05800793          	li	a5,88
20405a1c:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_read.c:6
    return -1;
20405a1e:	57fd                	li	a5,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_read.c:7
}
20405a20:	853e                	mv	a0,a5
20405a22:	40f2                	lw	ra,28(sp)
20405a24:	4462                	lw	s0,24(sp)
20405a26:	6105                	addi	sp,sp,32
20405a28:	8082                	ret

20405a2a <_sbrk>:
_sbrk():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:24
int _brk(void *addr) {
    __brk = addr;
    return 0;
}

char *_sbrk(ptrdiff_t incr) {
20405a2a:	7179                	addi	sp,sp,-48
20405a2c:	d606                	sw	ra,44(sp)
20405a2e:	d422                	sw	s0,40(sp)
20405a30:	1800                	addi	s0,sp,48
20405a32:	fca42e23          	sw	a0,-36(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:25
    char *old = __brk;
20405a36:	8241a783          	lw	a5,-2012(gp) # 80000784 <__brk>
20405a3a:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:28

    /* If __heap_size == 0, we can't allocate memory on the heap */
    if (&metal_segment_heap_target_start == &metal_segment_heap_target_end) {
20405a3e:	d2018713          	addi	a4,gp,-736 # 80000c80 <_sp>
20405a42:	52018793          	addi	a5,gp,1312 # 80001480 <metal_segment_heap_target_end>
20405a46:	00f71463          	bne	a4,a5,20405a4e <_sbrk+0x24>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:29
        return (void *)-1;
20405a4a:	57fd                	li	a5,-1
20405a4c:	a83d                	j	20405a8a <_sbrk+0x60>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:33
    }

    /* Don't move the break past the end of the heap */
    if ((__brk + incr) < &metal_segment_heap_target_end) {
20405a4e:	8241a703          	lw	a4,-2012(gp) # 80000784 <__brk>
20405a52:	fdc42783          	lw	a5,-36(s0)
20405a56:	973e                	add	a4,a4,a5
20405a58:	52018793          	addi	a5,gp,1312 # 80001480 <metal_segment_heap_target_end>
20405a5c:	02f77263          	bgeu	a4,a5,20405a80 <_sbrk+0x56>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:34
        __brk += incr;
20405a60:	8241a703          	lw	a4,-2012(gp) # 80000784 <__brk>
20405a64:	fdc42783          	lw	a5,-36(s0)
20405a68:	973e                	add	a4,a4,a5
20405a6a:	82e1a223          	sw	a4,-2012(gp) # 80000784 <__brk>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:40
    } else {
        __brk = &metal_segment_heap_target_end;
        return (void *)-1;
    }
    /* Scrub out allocated memory to avoid spurious ECC errors */
    metal_mem_scrub(old, incr);
20405a6e:	fdc42583          	lw	a1,-36(s0)
20405a72:	fec42503          	lw	a0,-20(s0)
20405a76:	e14fa0ef          	jal	ra,2040008a <metal_mem_scrub>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:42

    return old;
20405a7a:	fec42783          	lw	a5,-20(s0)
20405a7e:	a031                	j	20405a8a <_sbrk+0x60>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:36
        __brk = &metal_segment_heap_target_end;
20405a80:	52018713          	addi	a4,gp,1312 # 80001480 <metal_segment_heap_target_end>
20405a84:	82e1a223          	sw	a4,-2012(gp) # 80000784 <__brk>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:37
        return (void *)-1;
20405a88:	57fd                	li	a5,-1
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_sbrk.c:43
}
20405a8a:	853e                	mv	a0,a5
20405a8c:	50b2                	lw	ra,44(sp)
20405a8e:	5422                	lw	s0,40(sp)
20405a90:	6145                	addi	sp,sp,48
20405a92:	8082                	ret

20405a94 <_write>:
_write():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_write.c:7
#include <metal/tty.h>
#include <sys/types.h>
#include <unistd.h>

/* Write to a file.  */
ssize_t _write(int file, const void *ptr, size_t len) {
20405a94:	7179                	addi	sp,sp,-48
20405a96:	d606                	sw	ra,44(sp)
20405a98:	d422                	sw	s0,40(sp)
20405a9a:	1800                	addi	s0,sp,48
20405a9c:	fca42e23          	sw	a0,-36(s0)
20405aa0:	fcb42c23          	sw	a1,-40(s0)
20405aa4:	fcc42a23          	sw	a2,-44(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_write.c:8
    if (file != STDOUT_FILENO) {
20405aa8:	fdc42703          	lw	a4,-36(s0)
20405aac:	4785                	li	a5,1
20405aae:	00f70963          	beq	a4,a5,20405ac0 <_write+0x2c>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_write.c:9
        errno = ENOSYS;
20405ab2:	28b1                	jal	20405b0e <__errno>
20405ab4:	872a                	mv	a4,a0
20405ab6:	05800793          	li	a5,88
20405aba:	c31c                	sw	a5,0(a4)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_write.c:10
        return -1;
20405abc:	57fd                	li	a5,-1
20405abe:	a835                	j	20405afa <_write+0x66>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_write.c:13
    }

    const char *bptr = ptr;
20405ac0:	fd842783          	lw	a5,-40(s0)
20405ac4:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_write.c:14
    for (size_t i = 0; i < len; ++i)
20405ac8:	fe042623          	sw	zero,-20(s0)
20405acc:	a005                	j	20405aec <_write+0x58>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_write.c:15 (discriminator 3)
        metal_tty_putc(bptr[i]);
20405ace:	fe842703          	lw	a4,-24(s0)
20405ad2:	fec42783          	lw	a5,-20(s0)
20405ad6:	97ba                	add	a5,a5,a4
20405ad8:	0007c783          	lbu	a5,0(a5)
20405adc:	853e                	mv	a0,a5
20405ade:	a44fc0ef          	jal	ra,20401d22 <metal_tty_putc>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_write.c:14 (discriminator 3)
    for (size_t i = 0; i < len; ++i)
20405ae2:	fec42783          	lw	a5,-20(s0)
20405ae6:	0785                	addi	a5,a5,1
20405ae8:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_write.c:14 (discriminator 1)
20405aec:	fec42703          	lw	a4,-20(s0)
20405af0:	fd442783          	lw	a5,-44(s0)
20405af4:	fcf76de3          	bltu	a4,a5,20405ace <_write+0x3a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_write.c:16
    return 0;
20405af8:	4781                	li	a5,0
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_write.c:17
}
20405afa:	853e                	mv	a0,a5
20405afc:	50b2                	lw	ra,44(sp)
20405afe:	5422                	lw	s0,40(sp)
20405b00:	6145                	addi	sp,sp,48
20405b02:	8082                	ret

20405b04 <atexit>:
atexit():
20405b04:	85aa                	mv	a1,a0
20405b06:	4681                	li	a3,0
20405b08:	4601                	li	a2,0
20405b0a:	4501                	li	a0,0
20405b0c:	a0e1                	j	20405bd4 <__register_exitproc>

20405b0e <__errno>:
__errno():
20405b0e:	5fbfb517          	auipc	a0,0x5fbfb
20405b12:	c5652503          	lw	a0,-938(a0) # 80000764 <_impure_ptr>
20405b16:	8082                	ret

20405b18 <exit>:
exit():
20405b18:	1141                	addi	sp,sp,-16
20405b1a:	c422                	sw	s0,8(sp)
20405b1c:	c606                	sw	ra,12(sp)
20405b1e:	00000797          	auipc	a5,0x0
20405b22:	12e78793          	addi	a5,a5,302 # 20405c4c <__call_exitprocs>
20405b26:	842a                	mv	s0,a0
20405b28:	c399                	beqz	a5,20405b2e <exit+0x16>
20405b2a:	4581                	li	a1,0
20405b2c:	2205                	jal	20405c4c <__call_exitprocs>
20405b2e:	ffffb517          	auipc	a0,0xffffb
20405b32:	e0252503          	lw	a0,-510(a0) # 20400930 <_global_impure_ptr>
20405b36:	551c                	lw	a5,40(a0)
20405b38:	c391                	beqz	a5,20405b3c <exit+0x24>
20405b3a:	9782                	jalr	a5
20405b3c:	8522                	mv	a0,s0
20405b3e:	24fd                	jal	20405e2c <_exit>

20405b40 <__libc_fini_array>:
__libc_fini_array():
20405b40:	1141                	addi	sp,sp,-16
20405b42:	c422                	sw	s0,8(sp)
20405b44:	c226                	sw	s1,4(sp)
20405b46:	ffffa417          	auipc	s0,0xffffa
20405b4a:	7a240413          	addi	s0,s0,1954 # 204002e8 <__fini_array_end>
20405b4e:	ffffa497          	auipc	s1,0xffffa
20405b52:	79a48493          	addi	s1,s1,1946 # 204002e8 <__fini_array_end>
20405b56:	8c05                	sub	s0,s0,s1
20405b58:	c606                	sw	ra,12(sp)
20405b5a:	8409                	srai	s0,s0,0x2
20405b5c:	e411                	bnez	s0,20405b68 <__libc_fini_array+0x28>
20405b5e:	40b2                	lw	ra,12(sp)
20405b60:	4422                	lw	s0,8(sp)
20405b62:	4492                	lw	s1,4(sp)
20405b64:	0141                	addi	sp,sp,16
20405b66:	8082                	ret
20405b68:	147d                	addi	s0,s0,-1
20405b6a:	00241793          	slli	a5,s0,0x2
20405b6e:	97a6                	add	a5,a5,s1
20405b70:	439c                	lw	a5,0(a5)
20405b72:	9782                	jalr	a5
20405b74:	b7e5                	j	20405b5c <__libc_fini_array+0x1c>

20405b76 <__libc_init_array>:
__libc_init_array():
20405b76:	1141                	addi	sp,sp,-16
20405b78:	c422                	sw	s0,8(sp)
20405b7a:	c226                	sw	s1,4(sp)
20405b7c:	ffffa417          	auipc	s0,0xffffa
20405b80:	76440413          	addi	s0,s0,1892 # 204002e0 <_metal_tty_init_ptr>
20405b84:	ffffa497          	auipc	s1,0xffffa
20405b88:	75c48493          	addi	s1,s1,1884 # 204002e0 <_metal_tty_init_ptr>
20405b8c:	8c81                	sub	s1,s1,s0
20405b8e:	c04a                	sw	s2,0(sp)
20405b90:	c606                	sw	ra,12(sp)
20405b92:	8489                	srai	s1,s1,0x2
20405b94:	4901                	li	s2,0
20405b96:	02991563          	bne	s2,s1,20405bc0 <__libc_init_array+0x4a>
20405b9a:	ffffa417          	auipc	s0,0xffffa
20405b9e:	74640413          	addi	s0,s0,1862 # 204002e0 <_metal_tty_init_ptr>
20405ba2:	ffffa497          	auipc	s1,0xffffa
20405ba6:	73e48493          	addi	s1,s1,1854 # 204002e0 <_metal_tty_init_ptr>
20405baa:	8c81                	sub	s1,s1,s0
20405bac:	8489                	srai	s1,s1,0x2
20405bae:	4901                	li	s2,0
20405bb0:	00991d63          	bne	s2,s1,20405bca <__libc_init_array+0x54>
20405bb4:	40b2                	lw	ra,12(sp)
20405bb6:	4422                	lw	s0,8(sp)
20405bb8:	4492                	lw	s1,4(sp)
20405bba:	4902                	lw	s2,0(sp)
20405bbc:	0141                	addi	sp,sp,16
20405bbe:	8082                	ret
20405bc0:	401c                	lw	a5,0(s0)
20405bc2:	0905                	addi	s2,s2,1
20405bc4:	0411                	addi	s0,s0,4
20405bc6:	9782                	jalr	a5
20405bc8:	b7f9                	j	20405b96 <__libc_init_array+0x20>
20405bca:	401c                	lw	a5,0(s0)
20405bcc:	0905                	addi	s2,s2,1
20405bce:	0411                	addi	s0,s0,4
20405bd0:	9782                	jalr	a5
20405bd2:	bff9                	j	20405bb0 <__libc_init_array+0x3a>

20405bd4 <__register_exitproc>:
__register_exitproc():
20405bd4:	88aa                	mv	a7,a0
20405bd6:	5fbfb517          	auipc	a0,0x5fbfb
20405bda:	bd650513          	addi	a0,a0,-1066 # 800007ac <_global_atexit>
20405bde:	411c                	lw	a5,0(a0)
20405be0:	ef81                	bnez	a5,20405bf8 <__register_exitproc+0x24>
20405be2:	88c18713          	addi	a4,gp,-1908 # 800007ec <_global_atexit0>
20405be6:	c118                	sw	a4,0(a0)
20405be8:	00000513          	li	a0,0
20405bec:	87ba                	mv	a5,a4
20405bee:	c509                	beqz	a0,20405bf8 <__register_exitproc+0x24>
20405bf0:	411c                	lw	a5,0(a0)
20405bf2:	08f72423          	sw	a5,136(a4)
20405bf6:	87ba                	mv	a5,a4
20405bf8:	43d8                	lw	a4,4(a5)
20405bfa:	487d                	li	a6,31
20405bfc:	557d                	li	a0,-1
20405bfe:	04e84663          	blt	a6,a4,20405c4a <__register_exitproc+0x76>
20405c02:	02088d63          	beqz	a7,20405c3c <__register_exitproc+0x68>
20405c06:	0887a803          	lw	a6,136(a5)
20405c0a:	04080063          	beqz	a6,20405c4a <__register_exitproc+0x76>
20405c0e:	00271513          	slli	a0,a4,0x2
20405c12:	9542                	add	a0,a0,a6
20405c14:	c110                	sw	a2,0(a0)
20405c16:	10082303          	lw	t1,256(a6)
20405c1a:	4605                	li	a2,1
20405c1c:	00e61633          	sll	a2,a2,a4
20405c20:	00c36333          	or	t1,t1,a2
20405c24:	10682023          	sw	t1,256(a6)
20405c28:	08d52023          	sw	a3,128(a0)
20405c2c:	4689                	li	a3,2
20405c2e:	00d89763          	bne	a7,a3,20405c3c <__register_exitproc+0x68>
20405c32:	10482683          	lw	a3,260(a6)
20405c36:	8e55                	or	a2,a2,a3
20405c38:	10c82223          	sw	a2,260(a6)
20405c3c:	00170693          	addi	a3,a4,1
20405c40:	070a                	slli	a4,a4,0x2
20405c42:	c3d4                	sw	a3,4(a5)
20405c44:	97ba                	add	a5,a5,a4
20405c46:	c78c                	sw	a1,8(a5)
20405c48:	4501                	li	a0,0
20405c4a:	8082                	ret

20405c4c <__call_exitprocs>:
__call_exitprocs():
20405c4c:	7179                	addi	sp,sp,-48
20405c4e:	ca56                	sw	s5,20(sp)
20405c50:	c85a                	sw	s6,16(sp)
20405c52:	c65e                	sw	s7,12(sp)
20405c54:	c462                	sw	s8,8(sp)
20405c56:	d606                	sw	ra,44(sp)
20405c58:	d422                	sw	s0,40(sp)
20405c5a:	d226                	sw	s1,36(sp)
20405c5c:	d04a                	sw	s2,32(sp)
20405c5e:	ce4e                	sw	s3,28(sp)
20405c60:	cc52                	sw	s4,24(sp)
20405c62:	c266                	sw	s9,4(sp)
20405c64:	8b2a                	mv	s6,a0
20405c66:	8aae                	mv	s5,a1
20405c68:	5fbfbb97          	auipc	s7,0x5fbfb
20405c6c:	b44b8b93          	addi	s7,s7,-1212 # 800007ac <_global_atexit>
20405c70:	4c05                	li	s8,1
20405c72:	000ba483          	lw	s1,0(s7)
20405c76:	cc81                	beqz	s1,20405c8e <__call_exitprocs+0x42>
20405c78:	40c0                	lw	s0,4(s1)
20405c7a:	0884a983          	lw	s3,136(s1)
20405c7e:	fff40913          	addi	s2,s0,-1
20405c82:	040a                	slli	s0,s0,0x2
20405c84:	00898a33          	add	s4,s3,s0
20405c88:	9426                	add	s0,s0,s1
20405c8a:	00095f63          	bgez	s2,20405ca8 <__call_exitprocs+0x5c>
20405c8e:	50b2                	lw	ra,44(sp)
20405c90:	5422                	lw	s0,40(sp)
20405c92:	5492                	lw	s1,36(sp)
20405c94:	5902                	lw	s2,32(sp)
20405c96:	49f2                	lw	s3,28(sp)
20405c98:	4a62                	lw	s4,24(sp)
20405c9a:	4ad2                	lw	s5,20(sp)
20405c9c:	4b42                	lw	s6,16(sp)
20405c9e:	4bb2                	lw	s7,12(sp)
20405ca0:	4c22                	lw	s8,8(sp)
20405ca2:	4c92                	lw	s9,4(sp)
20405ca4:	6145                	addi	sp,sp,48
20405ca6:	8082                	ret
20405ca8:	000a8c63          	beqz	s5,20405cc0 <__call_exitprocs+0x74>
20405cac:	00099663          	bnez	s3,20405cb8 <__call_exitprocs+0x6c>
20405cb0:	197d                	addi	s2,s2,-1
20405cb2:	1a71                	addi	s4,s4,-4
20405cb4:	1471                	addi	s0,s0,-4
20405cb6:	bfd1                	j	20405c8a <__call_exitprocs+0x3e>
20405cb8:	07ca2783          	lw	a5,124(s4)
20405cbc:	ff579ae3          	bne	a5,s5,20405cb0 <__call_exitprocs+0x64>
20405cc0:	40d8                	lw	a4,4(s1)
20405cc2:	405c                	lw	a5,4(s0)
20405cc4:	177d                	addi	a4,a4,-1
20405cc6:	03271863          	bne	a4,s2,20405cf6 <__call_exitprocs+0xaa>
20405cca:	0124a223          	sw	s2,4(s1)
20405cce:	d3ed                	beqz	a5,20405cb0 <__call_exitprocs+0x64>
20405cd0:	0044ac83          	lw	s9,4(s1)
20405cd4:	00098863          	beqz	s3,20405ce4 <__call_exitprocs+0x98>
20405cd8:	1009a683          	lw	a3,256(s3)
20405cdc:	012c1733          	sll	a4,s8,s2
20405ce0:	8ef9                	and	a3,a3,a4
20405ce2:	ee89                	bnez	a3,20405cfc <__call_exitprocs+0xb0>
20405ce4:	9782                	jalr	a5
20405ce6:	40d8                	lw	a4,4(s1)
20405ce8:	000ba783          	lw	a5,0(s7)
20405cec:	f99713e3          	bne	a4,s9,20405c72 <__call_exitprocs+0x26>
20405cf0:	fcf480e3          	beq	s1,a5,20405cb0 <__call_exitprocs+0x64>
20405cf4:	bfbd                	j	20405c72 <__call_exitprocs+0x26>
20405cf6:	00042223          	sw	zero,4(s0)
20405cfa:	bfd1                	j	20405cce <__call_exitprocs+0x82>
20405cfc:	1049a683          	lw	a3,260(s3)
20405d00:	ffca2583          	lw	a1,-4(s4)
20405d04:	8f75                	and	a4,a4,a3
20405d06:	e701                	bnez	a4,20405d0e <__call_exitprocs+0xc2>
20405d08:	855a                	mv	a0,s6
20405d0a:	9782                	jalr	a5
20405d0c:	bfe9                	j	20405ce6 <__call_exitprocs+0x9a>
20405d0e:	852e                	mv	a0,a1
20405d10:	9782                	jalr	a5
20405d12:	bfd1                	j	20405ce6 <__call_exitprocs+0x9a>

20405d14 <metal_init>:
metal_init():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:17
extern metal_constructor_t metal_constructors_start;
extern metal_constructor_t metal_constructors_end;
extern metal_destructor_t metal_destructors_start;
extern metal_destructor_t metal_destructors_end;

void metal_init(void) {
20405d14:	1101                	addi	sp,sp,-32
20405d16:	ce06                	sw	ra,28(sp)
20405d18:	cc22                	sw	s0,24(sp)
20405d1a:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:20
    /* Make sure the constructors only run once */
    static int init_done = 0;
    if (init_done) {
20405d1c:	800007b7          	lui	a5,0x80000
20405d20:	7b07a783          	lw	a5,1968(a5) # 800007b0 <metal_segment_heap_target_end+0xfffff330>
20405d24:	efa9                	bnez	a5,20405d7e <metal_init+0x6a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:23
        return;
    }
    init_done = 1;
20405d26:	800007b7          	lui	a5,0x80000
20405d2a:	4705                	li	a4,1
20405d2c:	7ae7a823          	sw	a4,1968(a5) # 800007b0 <metal_segment_heap_target_end+0xfffff330>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:25

    if (&metal_constructors_end <= &metal_constructors_start) {
20405d30:	204007b7          	lui	a5,0x20400
20405d34:	2e478713          	addi	a4,a5,740 # 204002e4 <metal_tty_init>
20405d38:	204007b7          	lui	a5,0x20400
20405d3c:	2e078793          	addi	a5,a5,736 # 204002e0 <_metal_tty_init_ptr>
20405d40:	04e7f163          	bgeu	a5,a4,20405d82 <metal_init+0x6e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:29
        return;
    }

    metal_constructor_t *funcptr = &metal_constructors_start;
20405d44:	204007b7          	lui	a5,0x20400
20405d48:	2e078793          	addi	a5,a5,736 # 204002e0 <_metal_tty_init_ptr>
20405d4c:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:30
    while (funcptr != &metal_constructors_end) {
20405d50:	a831                	j	20405d6c <metal_init+0x58>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:31
        metal_constructor_t func = *funcptr;
20405d52:	fec42783          	lw	a5,-20(s0)
20405d56:	439c                	lw	a5,0(a5)
20405d58:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:33

        func();
20405d5c:	fe842783          	lw	a5,-24(s0)
20405d60:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:35

        funcptr += 1;
20405d62:	fec42783          	lw	a5,-20(s0)
20405d66:	0791                	addi	a5,a5,4
20405d68:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:30
    while (funcptr != &metal_constructors_end) {
20405d6c:	fec42703          	lw	a4,-20(s0)
20405d70:	204007b7          	lui	a5,0x20400
20405d74:	2e478793          	addi	a5,a5,740 # 204002e4 <metal_tty_init>
20405d78:	fcf71de3          	bne	a4,a5,20405d52 <metal_init+0x3e>
20405d7c:	a021                	j	20405d84 <metal_init+0x70>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:21
        return;
20405d7e:	0001                	nop
20405d80:	a011                	j	20405d84 <metal_init+0x70>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:26
        return;
20405d82:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:37
    }
}
20405d84:	40f2                	lw	ra,28(sp)
20405d86:	4462                	lw	s0,24(sp)
20405d88:	6105                	addi	sp,sp,32
20405d8a:	8082                	ret

20405d8c <metal_fini>:
metal_fini():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:39

void metal_fini(void) {
20405d8c:	1101                	addi	sp,sp,-32
20405d8e:	ce06                	sw	ra,28(sp)
20405d90:	cc22                	sw	s0,24(sp)
20405d92:	1000                	addi	s0,sp,32
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:42
    /* Make sure the destructors only run once */
    static int fini_done = 0;
    if (fini_done) {
20405d94:	800007b7          	lui	a5,0x80000
20405d98:	7b47a783          	lw	a5,1972(a5) # 800007b4 <metal_segment_heap_target_end+0xfffff334>
20405d9c:	efa9                	bnez	a5,20405df6 <metal_fini+0x6a>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:45
        return;
    }
    fini_done = 1;
20405d9e:	800007b7          	lui	a5,0x80000
20405da2:	4705                	li	a4,1
20405da4:	7ae7aa23          	sw	a4,1972(a5) # 800007b4 <metal_segment_heap_target_end+0xfffff334>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:47

    if (&metal_destructors_end <= &metal_destructors_start) {
20405da8:	204007b7          	lui	a5,0x20400
20405dac:	2e878713          	addi	a4,a5,744 # 204002e8 <__fini_array_end>
20405db0:	204007b7          	lui	a5,0x20400
20405db4:	2e878793          	addi	a5,a5,744 # 204002e8 <__fini_array_end>
20405db8:	04e7f163          	bgeu	a5,a4,20405dfa <metal_fini+0x6e>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:51
        return;
    }

    metal_destructor_t *funcptr = &metal_destructors_start;
20405dbc:	204007b7          	lui	a5,0x20400
20405dc0:	2e878793          	addi	a5,a5,744 # 204002e8 <__fini_array_end>
20405dc4:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:52
    while (funcptr != &metal_destructors_end) {
20405dc8:	a831                	j	20405de4 <metal_fini+0x58>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:53
        metal_destructor_t func = *funcptr;
20405dca:	fec42783          	lw	a5,-20(s0)
20405dce:	439c                	lw	a5,0(a5)
20405dd0:	fef42423          	sw	a5,-24(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:55

        func();
20405dd4:	fe842783          	lw	a5,-24(s0)
20405dd8:	9782                	jalr	a5
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:57

        funcptr += 1;
20405dda:	fec42783          	lw	a5,-20(s0)
20405dde:	0791                	addi	a5,a5,4
20405de0:	fef42623          	sw	a5,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:52
    while (funcptr != &metal_destructors_end) {
20405de4:	fec42703          	lw	a4,-20(s0)
20405de8:	204007b7          	lui	a5,0x20400
20405dec:	2e878793          	addi	a5,a5,744 # 204002e8 <__fini_array_end>
20405df0:	fcf71de3          	bne	a4,a5,20405dca <metal_fini+0x3e>
20405df4:	a021                	j	20405dfc <metal_fini+0x70>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:43
        return;
20405df6:	0001                	nop
20405df8:	a011                	j	20405dfc <metal_fini+0x70>
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:48
        return;
20405dfa:	0001                	nop
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:59
    }
}
20405dfc:	40f2                	lw	ra,28(sp)
20405dfe:	4462                	lw	s0,24(sp)
20405e00:	6105                	addi	sp,sp,32
20405e02:	8082                	ret

20405e04 <metal_init_run>:
metal_init_run():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:69
 * in the case that users don't want the metal constructors or
 * destructors to run.
 */

void metal_init_run(void) __attribute__((weak));
void metal_init_run(void) { metal_init(); }
20405e04:	1141                	addi	sp,sp,-16
20405e06:	c606                	sw	ra,12(sp)
20405e08:	c422                	sw	s0,8(sp)
20405e0a:	0800                	addi	s0,sp,16
20405e0c:	3721                	jal	20405d14 <metal_init>
20405e0e:	0001                	nop
20405e10:	40b2                	lw	ra,12(sp)
20405e12:	4422                	lw	s0,8(sp)
20405e14:	0141                	addi	sp,sp,16
20405e16:	8082                	ret

20405e18 <metal_fini_run>:
metal_fini_run():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/src/init.c:72

void metal_fini_run(void) __attribute__((weak));
void metal_fini_run(void) { metal_fini(); }
20405e18:	1141                	addi	sp,sp,-16
20405e1a:	c606                	sw	ra,12(sp)
20405e1c:	c422                	sw	s0,8(sp)
20405e1e:	0800                	addi	s0,sp,16
20405e20:	37b5                	jal	20405d8c <metal_fini>
20405e22:	0001                	nop
20405e24:	40b2                	lw	ra,12(sp)
20405e26:	4422                	lw	s0,8(sp)
20405e28:	0141                	addi	sp,sp,16
20405e2a:	8082                	ret

20405e2c <_exit>:
_exit():
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:3
#include <metal/shutdown.h>

void _exit(int exit_status) {
20405e2c:	1101                	addi	sp,sp,-32
20405e2e:	ce06                	sw	ra,28(sp)
20405e30:	cc22                	sw	s0,24(sp)
20405e32:	1000                	addi	s0,sp,32
20405e34:	fea42623          	sw	a0,-20(s0)
/home/alex/Desktop/chipStuff/freedom-e-sdk/freedom-metal/gloss/sys_exit.c:4
    metal_shutdown(exit_status);
20405e38:	fec42503          	lw	a0,-20(s0)
20405e3c:	9e9ff0ef          	jal	ra,20405824 <metal_shutdown>
